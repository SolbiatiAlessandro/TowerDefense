(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _statesBootJs = require("./states/Boot.js");

var _statesBootJs2 = _interopRequireDefault(_statesBootJs);

var _statesPreloadJs = require("./states/Preload.js");

var _statesPreloadJs2 = _interopRequireDefault(_statesPreloadJs);

var _statesGameJs = require("./states/Game.js");

var _statesGameJs2 = _interopRequireDefault(_statesGameJs);

var game;

window.onload = function () {
  game = new Phaser.Game(800, 600, Phaser.AUTO, 'game');
  game.state.add('boot', _statesBootJs2["default"]);
  game.state.add('preload', _statesPreloadJs2["default"]);
  game.state.add('game', _statesGameJs2["default"]);
  game.state.start('boot');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvYXBwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7NEJBRWlCLGtCQUFrQjs7OzsrQkFDZixxQkFBcUI7Ozs7NEJBQ3hCLGtCQUFrQjs7OztBQUpuQyxJQUFJLElBQUksQ0FBQzs7QUFPVCxNQUFNLENBQUMsTUFBTSxHQUFHLFlBQVk7QUFDMUIsTUFBSSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDdEQsTUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSw0QkFBTyxDQUFDO0FBQzdCLE1BQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsK0JBQVUsQ0FBQztBQUNuQyxNQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLDRCQUFPLENBQUM7QUFDN0IsTUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDMUIsQ0FBQyIsImZpbGUiOiIvVXNlcnMvbGVzc2FuZHJvL0hhY2tpbmcvSlMvR0FNRS9QSEFTRVIvYm9vay10cmF2aXMtZmFhcy9Ub3dlckRlZmVuc2Uvc3JjL2FwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnYW1lO1xyXG5cclxuaW1wb3J0IEJvb3QgZnJvbSBcIi4vc3RhdGVzL0Jvb3QuanNcIjtcclxuaW1wb3J0IFByZWxvYWQgZnJvbSBcIi4vc3RhdGVzL1ByZWxvYWQuanNcIjtcclxuaW1wb3J0IEdhbWUgZnJvbSBcIi4vc3RhdGVzL0dhbWUuanNcIjtcclxuXHJcblxyXG53aW5kb3cub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gIGdhbWUgPSBuZXcgUGhhc2VyLkdhbWUoODAwLCA2MDAsIFBoYXNlci5BVVRPLCAnZ2FtZScpO1xyXG4gIGdhbWUuc3RhdGUuYWRkKCdib290JywgQm9vdCk7XHJcbiAgZ2FtZS5zdGF0ZS5hZGQoJ3ByZWxvYWQnLCBQcmVsb2FkKTtcclxuICBnYW1lLnN0YXRlLmFkZCgnZ2FtZScsIEdhbWUpO1xyXG4gIGdhbWUuc3RhdGUuc3RhcnQoJ2Jvb3QnKTtcclxufTsiXX0=
},{"./states/Boot.js":5,"./states/Game.js":6,"./states/Preload.js":7}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Human = (function (_Phaser$Plugin$Isometric$IsoSprite) {
	_inherits(Human, _Phaser$Plugin$Isometric$IsoSprite);

	function Human(game, x, y, enemies, arrows) {
		_classCallCheck(this, Human);

		_get(Object.getPrototypeOf(Human.prototype), 'constructor', this).call(this, game, x, y, 0, 'human', 0); // what are this params? the second is a iso

		this.animations.add('idle', [10, 11]);
		this.animations.play('idle', 2, true);

		this.anchor.setTo(.5, .5);
		this.enemies = enemies;
		this.arrows = arrows;

		this.showInterval = 400;
		this.shotTime = this.game.time.now + this.shotInterval;
	}

	_createClass(Human, [{
		key: 'update',
		value: function update() {
			if (this.game.time.now > this.shotTime) {
				this.target = this.enemies.findNearest(this.x, this.y);

				if (this.target) {
					var arrow = this.arows.getFirstDead();
					if (!arrow) arrow = this.arrows.create(0, 0, 'arrow');
					arrow.revive();
					arrow.x = this.x;
					arrow.y = this.y;
					arrow.lifespan = 4000;

					arrow.rotation = this.game.physics.arcade.moveToObject(arrow, this.target, 120);

					this.shotTime = this.game.time.now + this.showInterval;
				}
			}
		}
	}]);

	return Human;
})(Phaser.Plugin.Isometric.IsoSprite);

exports['default'] = Human;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvcHJlZmFicy9IdW1hbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztJQUFxQixLQUFLO1dBQUwsS0FBSzs7QUFFZCxVQUZTLEtBQUssQ0FFYixJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFDO3dCQUZwQixLQUFLOztBQUd4Qiw2QkFIbUIsS0FBSyw2Q0FHbEIsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUU7O0FBRWpDLE1BQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3RDLE1BQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7O0FBRXRDLE1BQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUMxQixNQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztBQUN2QixNQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQzs7QUFFckIsTUFBSSxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUM7QUFDeEIsTUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztFQUN2RDs7Y0FkbUIsS0FBSzs7U0FnQm5CLGtCQUFFO0FBQ1AsT0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBQztBQUNyQyxRQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDOztBQUV2RCxRQUFHLElBQUksQ0FBQyxNQUFNLEVBQUM7QUFDZCxTQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQ3RDLFNBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDckQsVUFBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ2YsVUFBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ2pCLFVBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNqQixVQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQzs7QUFFdEIsVUFBSyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUNyRCxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQzs7QUFFMUIsU0FBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztLQUN2RDtJQUNEO0dBQ0Q7OztRQWxDbUIsS0FBSztHQUFTLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVM7O3FCQUEvQyxLQUFLIiwiZmlsZSI6Ii9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvcHJlZmFicy9IdW1hbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIEh1bWFuIGV4dGVuZHMgUGhhc2VyLlBsdWdpbi5Jc29tZXRyaWMuSXNvU3ByaXRlIHtcblxuXHRjb25zdHJ1Y3RvcihnYW1lLCB4LCB5LCBlbmVtaWVzLCBhcnJvd3Mpe1xuXHRcdHN1cGVyKGdhbWUsIHgsIHksIDAsICdodW1hbicsIDApOyAvLyB3aGF0IGFyZSB0aGlzIHBhcmFtcz8gdGhlIHNlY29uZCBpcyBhIGlzb1xuXG5cdFx0dGhpcy5hbmltYXRpb25zLmFkZCgnaWRsZScsIFsxMCwgMTFdKTtcblx0XHR0aGlzLmFuaW1hdGlvbnMucGxheSgnaWRsZScsIDIsIHRydWUpO1xuXG5cdFx0dGhpcy5hbmNob3Iuc2V0VG8oLjUsIC41KTtcblx0XHR0aGlzLmVuZW1pZXMgPSBlbmVtaWVzO1xuXHRcdHRoaXMuYXJyb3dzID0gYXJyb3dzO1xuXG5cdFx0dGhpcy5zaG93SW50ZXJ2YWwgPSA0MDA7XG5cdFx0dGhpcy5zaG90VGltZSA9IHRoaXMuZ2FtZS50aW1lLm5vdyArIHRoaXMuc2hvdEludGVydmFsO1xuXHR9XG5cblx0dXBkYXRlKCl7XG5cdFx0aWYodGhpcy5nYW1lLnRpbWUubm93ID4gdGhpcy5zaG90VGltZSl7XG5cdFx0XHR0aGlzLnRhcmdldCA9IHRoaXMuZW5lbWllcy5maW5kTmVhcmVzdCh0aGlzLngsIHRoaXMueSk7XG5cblx0XHRcdGlmKHRoaXMudGFyZ2V0KXtcblx0XHRcdFx0dmFyIGFycm93ID0gdGhpcy5hcm93cy5nZXRGaXJzdERlYWQoKTtcblx0XHRcdFx0aWYoIWFycm93KSBhcnJvdyA9IHRoaXMuYXJyb3dzLmNyZWF0ZSgwLCAwLCAnYXJyb3cnKTtcblx0XHRcdFx0YXJyb3cucmV2aXZlKCk7XG5cdFx0XHRcdGFycm93LnggPSB0aGlzLng7XG5cdFx0XHRcdGFycm93LnkgPSB0aGlzLnk7XG5cdFx0XHRcdGFycm93LmxpZmVzcGFuID0gNDAwMDtcblxuXHRcdFx0XHRhcnJvdy5yb3RhdGlvbiA9IHRoaXMuZ2FtZS5waHlzaWNzLmFyY2FkZS5tb3ZlVG9PYmplY3QoXG5cdFx0XHRcdFx0YXJyb3csIHRoaXMudGFyZ2V0LCAxMjApO1xuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5zaG90VGltZSA9IHRoaXMuZ2FtZS50aW1lLm5vdyArIHRoaXMuc2hvd0ludGVydmFsO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuIl19
},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NumberBox = (function (_Phaser$Group) {
	_inherits(NumberBox, _Phaser$Group);

	function NumberBox(game, bgasset, val, parent) {
		_classCallCheck(this, NumberBox);

		_get(Object.getPrototypeOf(NumberBox.prototype), "constructor", this).call(this, game, parent);
		this.create(0, 0, bgasset);
		var style = {
			font: "30px arial",
			align: "center",
			fill: "#fff"
		};
		this.txtValue = new Phaser.Text(this.game, 55, 55, val.toString(), style);
		this.txtValue.anchor.setTo(.5, .5);
		this.add(this.txtValue);
	}

	_createClass(NumberBox, [{
		key: "setValue",
		value: function setValue(val) {
			this.txtValue.text = val.toString();
		}
	}]);

	return NumberBox;
})(Phaser.Group);

exports["default"] = NumberBox;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvcHJlZmFicy9OdW1iZXJCb3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7SUFBcUIsU0FBUztXQUFULFNBQVM7O0FBQ2xCLFVBRFMsU0FBUyxDQUNqQixJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUM7d0JBRG5CLFNBQVM7O0FBRTVCLDZCQUZtQixTQUFTLDZDQUV0QixJQUFJLEVBQUUsTUFBTSxFQUFFO0FBQ3BCLE1BQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMzQixNQUFJLEtBQUssR0FBRztBQUNYLE9BQUksRUFBRSxZQUFZO0FBQ2xCLFFBQUssRUFBRSxRQUFRO0FBQ2YsT0FBSSxFQUFFLE1BQU07R0FDWixDQUFDO0FBQ0YsTUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQzlCLElBQUksQ0FBQyxJQUFJLEVBQ1QsRUFBRSxFQUNGLEVBQUUsRUFDRixHQUFHLENBQUMsUUFBUSxFQUFFLEVBQ2QsS0FBSyxDQUNMLENBQUM7QUFDRixNQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xDLE1BQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0VBQ3hCOztjQWxCbUIsU0FBUzs7U0FvQnJCLGtCQUFDLEdBQUcsRUFBQztBQUNaLE9BQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztHQUNwQzs7O1FBdEJtQixTQUFTO0dBQVMsTUFBTSxDQUFDLEtBQUs7O3FCQUE5QixTQUFTIiwiZmlsZSI6Ii9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvcHJlZmFicy9OdW1iZXJCb3guanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBOdW1iZXJCb3ggZXh0ZW5kcyBQaGFzZXIuR3JvdXAge1xuXHRjb25zdHJ1Y3RvcihnYW1lLCBiZ2Fzc2V0LCB2YWwsIHBhcmVudCl7XG5cdFx0c3VwZXIoZ2FtZSwgcGFyZW50KTtcblx0XHR0aGlzLmNyZWF0ZSgwLCAwLCBiZ2Fzc2V0KTtcblx0XHR2YXIgc3R5bGUgPSB7XG5cdFx0XHRmb250OiBcIjMwcHggYXJpYWxcIixcblx0XHRcdGFsaWduOiBcImNlbnRlclwiLFxuXHRcdFx0ZmlsbDogXCIjZmZmXCJcblx0XHR9O1xuXHRcdHRoaXMudHh0VmFsdWUgPSBuZXcgUGhhc2VyLlRleHQoXG5cdFx0XHR0aGlzLmdhbWUsXG5cdFx0XHQ1NSxcblx0XHRcdDU1LFxuXHRcdFx0dmFsLnRvU3RyaW5nKCksXG5cdFx0XHRzdHlsZVxuXHRcdCk7XG5cdFx0dGhpcy50eHRWYWx1ZS5hbmNob3Iuc2V0VG8oLjUsLjUpO1xuXHRcdHRoaXMuYWRkKHRoaXMudHh0VmFsdWUpO1xuXHR9XG5cblx0c2V0VmFsdWUodmFsKXtcblx0XHR0aGlzLnR4dFZhbHVlLnRleHQgPSB2YWwudG9TdHJpbmcoKTtcblx0fVxufVxuIl19
},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Skeleton = (function (_Phaser$Plugin$Isometric$IsoSprite) {
	_inherits(Skeleton, _Phaser$Plugin$Isometric$IsoSprite);

	function Skeleton(game, x, y, frame) {
		_classCallCheck(this, Skeleton);

		_get(Object.getPrototypeOf(Skeleton.prototype), 'constructor', this).call(this, game, x, y, 0, 'skeleton', frame);

		this.walkAnim = this.animations.add('walk', [10, 11]);
		this.animations.add('hurt', [12]);
		this.animations.add('attack', [13, 14, 13, 14, 14, 13, 14]);

		this.animations.play('walk', 2, true);

		this.anchor.setTo(.5, .5);

		this.game.physics.enable(this, Phaser.Physics.ARCADE);

		this.path, this.pathPosition;

		this.health = 5;
		this.worth = 20;

		this.pathFinished = new Phaser.Signal();
	}

	_createClass(Skeleton, [{
		key: 'setPath',
		value: function setPath(path) {
			this.path = path;
			this.pathPosition = -1;
		}
	}, {
		key: 'advanceTile',
		value: function advanceTile() {
			this.pathPosition++;

			if (this.pathPosition < this.path.length) {
				//tween
				if (this.path[this.pathPosition].x > this.isoX) {
					this.scale.x = 1;
				} else {
					this.scale.x = -1;
				}

				this.walkMotion = this.game.add.tween(this).to({
					isoX: this.path[this.pathPosition].x,
					isoY: this.path[this.pathPosition].y
				}, 2000, Phaser.Easing.Linear, None, true);
				this.walkMotion.onComplete.add(this.advanceTile, this);
			} else {
				this.animations.play("attack", 2);
				this.animations.currentAnim.onComplete.addOnce(this.attackOver, this);
			}
		}
	}, {
		key: 'attackOver',
		value: function attackOver() {
			this.pathFinished.dispatch(this);
		}
	}]);

	return Skeleton;
})(Phaser.Plugin.Isometric.IsoSprite);

exports['default'] = Skeleton;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvcHJlZmFicy9Ta2VsZXRvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztJQUFxQixRQUFRO1dBQVIsUUFBUTs7QUFDakIsVUFEUyxRQUFRLENBQ2hCLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBQzt3QkFEVixRQUFROztBQUUzQiw2QkFGbUIsUUFBUSw2Q0FFckIsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUU7O0FBRXhDLE1BQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDckQsTUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNsQyxNQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDOztBQUV0RCxNQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDOztBQUV0QyxNQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7O0FBRTFCLE1BQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQzs7QUFFdEQsTUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDOztBQUU3QixNQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztBQUNoQixNQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQzs7QUFFaEIsTUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztFQUN4Qzs7Y0FwQm1CLFFBQVE7O1NBc0JyQixpQkFBQyxJQUFJLEVBQUM7QUFDWixPQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztBQUNqQixPQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxDQUFDO0dBQ3ZCOzs7U0FFVSx1QkFBRTtBQUNaLE9BQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQzs7QUFFcEIsT0FBRyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFDOztBQUV2QyxRQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFDO0FBQzdDLFNBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNqQixNQUFNO0FBQ04sU0FBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDbEI7O0FBRUQsUUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQzdDLFNBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0FBQ3BDLFNBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0tBQ3BDLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM1QyxRQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN2RCxNQUFNO0FBQ04sUUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLFFBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0RTtHQUNEOzs7U0FFUyxzQkFBRTtBQUNYLE9BQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQ2pDOzs7UUFuRG1CLFFBQVE7R0FBUyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTOztxQkFBbEQsUUFBUSIsImZpbGUiOiIvVXNlcnMvbGVzc2FuZHJvL0hhY2tpbmcvSlMvR0FNRS9QSEFTRVIvYm9vay10cmF2aXMtZmFhcy9Ub3dlckRlZmVuc2Uvc3JjL3ByZWZhYnMvU2tlbGV0b24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBTa2VsZXRvbiBleHRlbmRzIFBoYXNlci5QbHVnaW4uSXNvbWV0cmljLklzb1Nwcml0ZXtcblx0Y29uc3RydWN0b3IoZ2FtZSwgeCwgeSwgZnJhbWUpe1xuXHRcdHN1cGVyKGdhbWUsIHgsIHksIDAsICdza2VsZXRvbicsIGZyYW1lKTtcblxuXHRcdHRoaXMud2Fsa0FuaW0gPSB0aGlzLmFuaW1hdGlvbnMuYWRkKCd3YWxrJywgWzEwLDExXSk7XG5cdFx0dGhpcy5hbmltYXRpb25zLmFkZCgnaHVydCcsIFsxMl0pO1xuXHRcdHRoaXMuYW5pbWF0aW9ucy5hZGQoJ2F0dGFjaycsIFsxMywxNCwxMywxNCwxNCwxMywxNF0pO1xuXG5cdFx0dGhpcy5hbmltYXRpb25zLnBsYXkoJ3dhbGsnLCAyLCB0cnVlKTtcblxuXHRcdHRoaXMuYW5jaG9yLnNldFRvKC41LCAuNSk7XG5cblx0XHR0aGlzLmdhbWUucGh5c2ljcy5lbmFibGUodGhpcywgUGhhc2VyLlBoeXNpY3MuQVJDQURFKTtcblxuXHRcdHRoaXMucGF0aCwgdGhpcy5wYXRoUG9zaXRpb247XG5cblx0XHR0aGlzLmhlYWx0aCA9IDU7XG5cdFx0dGhpcy53b3J0aCA9IDIwO1xuXG5cdFx0dGhpcy5wYXRoRmluaXNoZWQgPSBuZXcgUGhhc2VyLlNpZ25hbCgpO1xuXHR9XG5cblx0c2V0UGF0aChwYXRoKXtcblx0XHR0aGlzLnBhdGggPSBwYXRoO1xuXHRcdHRoaXMucGF0aFBvc2l0aW9uID0gLTE7XG5cdH1cblxuXHRhZHZhbmNlVGlsZSgpe1xuXHRcdHRoaXMucGF0aFBvc2l0aW9uKys7XG5cblx0XHRpZih0aGlzLnBhdGhQb3NpdGlvbiA8IHRoaXMucGF0aC5sZW5ndGgpe1xuXHRcdFx0Ly90d2VlblxuXHRcdFx0aWYodGhpcy5wYXRoW3RoaXMucGF0aFBvc2l0aW9uXS54ID4gdGhpcy5pc29YKXtcblx0XHRcdFx0dGhpcy5zY2FsZS54ID0gMTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuc2NhbGUueCA9IC0xO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLndhbGtNb3Rpb24gPSB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXMpLnRvKHtcblx0XHRcdFx0XHRpc29YOiB0aGlzLnBhdGhbdGhpcy5wYXRoUG9zaXRpb25dLngsXG5cdFx0XHRcdFx0aXNvWTogdGhpcy5wYXRoW3RoaXMucGF0aFBvc2l0aW9uXS55LFxuXHRcdFx0XHR9LFx0MjAwMCwgUGhhc2VyLkVhc2luZy5MaW5lYXIsIE5vbmUsIHRydWUpO1xuXHRcdFx0dGhpcy53YWxrTW90aW9uLm9uQ29tcGxldGUuYWRkKHRoaXMuYWR2YW5jZVRpbGUsIHRoaXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmFuaW1hdGlvbnMucGxheShcImF0dGFja1wiLCAyKTtcblx0XHRcdHRoaXMuYW5pbWF0aW9ucy5jdXJyZW50QW5pbS5vbkNvbXBsZXRlLmFkZE9uY2UodGhpcy5hdHRhY2tPdmVyLCB0aGlzKTtcblx0XHR9XG5cdH1cblxuXHRhdHRhY2tPdmVyKCl7XG5cdFx0dGhpcy5wYXRoRmluaXNoZWQuZGlzcGF0Y2godGhpcyk7XG5cdH1cbn1cbiJdfQ==
},{}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Boot = (function () {
  function Boot() {
    _classCallCheck(this, Boot);
  }

  _createClass(Boot, [{
    key: 'preload',
    value: function preload() {
      this.load.image('preloader', 'assets/images/loading_bar.png');
    }
  }, {
    key: 'create',
    value: function create() {
      this.game.input.maxPointers = 1;
      this.game.state.start('preload');
    }
  }]);

  return Boot;
})();

exports['default'] = Boot;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvc3RhdGVzL0Jvb3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFxQixJQUFJO1dBQUosSUFBSTswQkFBSixJQUFJOzs7ZUFBSixJQUFJOztXQUVoQixtQkFBRztBQUNSLFVBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSwrQkFBK0IsQ0FBQyxDQUFDO0tBQy9EOzs7V0FFSyxrQkFBRztBQUNQLFVBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7QUFDaEMsVUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQ2xDOzs7U0FUa0IsSUFBSTs7O3FCQUFKLElBQUkiLCJmaWxlIjoiL1VzZXJzL2xlc3NhbmRyby9IYWNraW5nL0pTL0dBTUUvUEhBU0VSL2Jvb2stdHJhdmlzLWZhYXMvVG93ZXJEZWZlbnNlL3NyYy9zdGF0ZXMvQm9vdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvb3Qge1xyXG5cclxuICBwcmVsb2FkKCkge1xyXG4gICAgdGhpcy5sb2FkLmltYWdlKCdwcmVsb2FkZXInLCAnYXNzZXRzL2ltYWdlcy9sb2FkaW5nX2Jhci5wbmcnKTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZSgpIHtcclxuICAgIHRoaXMuZ2FtZS5pbnB1dC5tYXhQb2ludGVycyA9IDE7XHJcbiAgICB0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ3ByZWxvYWQnKTtcclxuICB9XHJcblxyXG59Il19
},{}],6:[function(require,module,exports){
//require other components

'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _prefabsHumanJs = require('../prefabs/Human.js');

var _prefabsHumanJs2 = _interopRequireDefault(_prefabsHumanJs);

var _prefabsSkeletonJs = require('../prefabs/Skeleton.js');

var _prefabsSkeletonJs2 = _interopRequireDefault(_prefabsSkeletonJs);

var _prefabsNumberBoxJs = require('../prefabs/NumberBox.js');

var _prefabsNumberBoxJs2 = _interopRequireDefault(_prefabsNumberBoxJs);

var Enemies = (function () {
	function Enemies(game, parentGroup) {
		_classCallCheck(this, Enemies);

		this.game = game;
		this._enemies = this.game.add.group(parentGroup);
	}

	_createClass(Enemies, [{
		key: 'findNearest',
		value: function findNearest(xc, yc) {
			var lowestChild = null;
			var lowestDistance = 10000000;

			this._enemies.forEach(function (child) {
				var distance = Phaser.Math.distance(xc, yc, child.x, child.y);

				if (!lowestChild) {
					lowestChild = child;
				} else {
					if (distance < lowestDistance) {
						lowestChild = child;
						lowestDistance = distance;
					}
				}
			}, this._enemies, true); // what's true
			return lowerChild;
		}
	}]);

	return Enemies;
})();

var Game = (function (_Phaser$State) {
	_inherits(Game, _Phaser$State);

	function Game() {
		_classCallCheck(this, Game);

		//object level properties
		_get(Object.getPrototypeOf(Game.prototype), 'constructor', this).call(this);
		this.playerLife = 10;
		this.money = 100;
		this.spawnTime = 1000;
	}

	_createClass(Game, [{
		key: 'create',
		value: function create() {
			this.mapData = this.game.cache.getJSON('mapdata');
			this.game.physics.startSystem(Phaser.Physics.ARCADE);
			this.game.time.advancedTiming = true;
			this.game.add.sprite(0, 0, "gamebg");
			this.game.plugins.add(new Phaser.Plugin.Isometric(this.game));
			this.game.iso.anchor.setTo(0.5, 0.2);
			this.isoGroup = this.game.add.group();
			this.isoChars = this.game.add.group();
			this.allies = this.game.add.group(this.isoChars);
			this.enemies = new Enemies(this.game, this.isoChars);
			this.arrows = this.game.add.group();
			this.arrows.enableBody = true;
			this.arrows.physicsBodyType = Phaser.Physics.ARCADE;

			//
			// TEST
			//var _human = new Human(this.game, 200, 200);
			//this.allies.add(_human);
			//var _skeleton = new Skeleton(this.game, 300, 200);
			//this.allies.add(_skeleton);

			this.spawnTiles();
		}
	}, {
		key: 'update',
		value: function update() {}
	}, {
		key: 'spawnTiles',
		value: function spawnTiles() {
			var size = 55;
			var mapWidth = this.mapData.tileMap[0].length - 1;
			var mapHeight = this.mapData.tileMap.length - 1;
			this.gameTiles = [];

			var i = 0,
			    tile;
			for (var y = 0; y <= mapHeight; y++) {

				this.gameTiles[y] = [];

				for (var x = 0; x <= mapWidth; x++) {
					var tileNumber = this.mapData.tileMap[y][x];
					var tileName = this.mapData.tileNames[tileNumber];
					tile = this.game.add.isoSprite(x * size, y * size, 0, tileName, 0, this.isoGroup);
					tile.anchor.set(0.5, 0);
					tile.buyable = tileNumber == 0 ? true : false;
					this.gameTiles[y][x] = tile;
				}
			}
		}
	}]);

	return Game;
})(Phaser.State);

exports['default'] = Game;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../prefabs/Human.js":2,"../prefabs/NumberBox.js":3,"../prefabs/Skeleton.js":4}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Preload = (function () {
  function Preload() {
    _classCallCheck(this, Preload);

    this.asset = null;
    this.ready = false;
  }

  _createClass(Preload, [{
    key: 'preload',
    value: function preload() {
      this.load.image('loading_bg', 'assets/images/loading_bg.jpg');
    }
  }, {
    key: 'create',
    value: function create() {

      //background for game
      this.add.sprite(0, 0, "loading_bg");

      this.asset = this.add.sprite(this.game.width / 2, this.game.height / 2, 'preloader');
      this.asset.anchor.setTo(0.5, 0.5);

      this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
      this.load.setPreloadSprite(this.asset);

      //do all your loading here
      this.load.pack('level1', 'assets/assetPack.json', null, this);

      //staaaart load
      this.load.start();
    }
  }, {
    key: 'update',
    value: function update() {

      if (this.ready) {
        this.game.state.start('game');
      }
    }
  }, {
    key: 'onLoadComplete',
    value: function onLoadComplete() {
      this.ready = true;
    }
  }]);

  return Preload;
})();

exports['default'] = Preload;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvc3RhdGVzL1ByZWxvYWQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFxQixPQUFPO0FBRWYsV0FGUSxPQUFPLEdBRVo7MEJBRkssT0FBTzs7QUFHeEIsUUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7QUFDbEIsUUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7R0FDcEI7O2VBTGtCLE9BQU87O1dBT25CLG1CQUFHO0FBQ1IsVUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLDhCQUE4QixDQUFDLENBQUM7S0FDL0Q7OztXQUVLLGtCQUFHOzs7QUFHUCxVQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDOztBQUVuQyxVQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDaEYsVUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQzs7QUFFbEMsVUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDNUQsVUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7OztBQUd2QyxVQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsdUJBQXVCLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDOzs7QUFJOUQsVUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztLQUNuQjs7O1dBRUssa0JBQUc7O0FBRVAsVUFBRyxJQUFJLENBQUMsS0FBSyxFQUFFO0FBQ2IsWUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO09BQy9CO0tBRUY7OztXQUVhLDBCQUFHO0FBQ2YsVUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7S0FDbkI7OztTQXhDa0IsT0FBTzs7O3FCQUFQLE9BQU8iLCJmaWxlIjoiL1VzZXJzL2xlc3NhbmRyby9IYWNraW5nL0pTL0dBTUUvUEhBU0VSL2Jvb2stdHJhdmlzLWZhYXMvVG93ZXJEZWZlbnNlL3NyYy9zdGF0ZXMvUHJlbG9hZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIFByZWxvYWQge1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuYXNzZXQgPSBudWxsO1xyXG4gICAgdGhpcy5yZWFkeSA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgcHJlbG9hZCgpIHtcclxuICAgIHRoaXMubG9hZC5pbWFnZSgnbG9hZGluZ19iZycsICdhc3NldHMvaW1hZ2VzL2xvYWRpbmdfYmcuanBnJyk7XHJcbiAgfVxyXG5cclxuICBjcmVhdGUoKSB7XHJcblxyXG4gICAgLy9iYWNrZ3JvdW5kIGZvciBnYW1lXHJcbiAgICB0aGlzLmFkZC5zcHJpdGUoMCwwLCBcImxvYWRpbmdfYmdcIik7XHJcblxyXG4gICAgdGhpcy5hc3NldCA9IHRoaXMuYWRkLnNwcml0ZSh0aGlzLmdhbWUud2lkdGgvMix0aGlzLmdhbWUuaGVpZ2h0LzIsICdwcmVsb2FkZXInKTtcclxuICAgIHRoaXMuYXNzZXQuYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcclxuXHJcbiAgICB0aGlzLmxvYWQub25Mb2FkQ29tcGxldGUuYWRkT25jZSh0aGlzLm9uTG9hZENvbXBsZXRlLCB0aGlzKTtcclxuICAgIHRoaXMubG9hZC5zZXRQcmVsb2FkU3ByaXRlKHRoaXMuYXNzZXQpO1xyXG5cclxuICAgIC8vZG8gYWxsIHlvdXIgbG9hZGluZyBoZXJlXHJcbiAgICB0aGlzLmxvYWQucGFjaygnbGV2ZWwxJywgJ2Fzc2V0cy9hc3NldFBhY2suanNvbicsIG51bGwsIHRoaXMpO1xyXG5cclxuXHJcbiAgICAvL3N0YWFhYXJ0IGxvYWRcclxuICAgIHRoaXMubG9hZC5zdGFydCgpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKCkge1xyXG5cclxuICAgIGlmKHRoaXMucmVhZHkpIHtcclxuICAgICAgdGhpcy5nYW1lLnN0YXRlLnN0YXJ0KCdnYW1lJyk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbiAgb25Mb2FkQ29tcGxldGUoKSB7XHJcbiAgICB0aGlzLnJlYWR5ID0gdHJ1ZTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
