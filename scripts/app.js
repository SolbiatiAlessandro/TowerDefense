(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _statesBootJs = require("./states/Boot.js");

var _statesBootJs2 = _interopRequireDefault(_statesBootJs);

var _statesPreloadJs = require("./states/Preload.js");

var _statesPreloadJs2 = _interopRequireDefault(_statesPreloadJs);

var _statesGameJs = require("./states/Game.js");

var _statesGameJs2 = _interopRequireDefault(_statesGameJs);

var _statesGameOverJs = require("./states/GameOver.js");

var _statesGameOverJs2 = _interopRequireDefault(_statesGameOverJs);

var game;

window.onload = function () {
  game = new Phaser.Game(800, 600, Phaser.AUTO, 'game');
  game.state.add('boot', _statesBootJs2["default"]);
  game.state.add('preload', _statesPreloadJs2["default"]);
  game.state.add('game', _statesGameJs2["default"]);
  game.state.add('gameover', _statesGameOverJs2["default"]);
  game.state.start('boot');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvYXBwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7NEJBRWlCLGtCQUFrQjs7OzsrQkFDZixxQkFBcUI7Ozs7NEJBQ3hCLGtCQUFrQjs7OztnQ0FDZCxzQkFBc0I7Ozs7QUFMM0MsSUFBSSxJQUFJLENBQUM7O0FBUVQsTUFBTSxDQUFDLE1BQU0sR0FBRyxZQUFZO0FBQzFCLE1BQUksR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3RELE1BQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sNEJBQU8sQ0FBQztBQUM3QixNQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLCtCQUFVLENBQUM7QUFDbkMsTUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSw0QkFBTyxDQUFDO0FBQzdCLE1BQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQVUsZ0NBQVcsQ0FBQztBQUNyQyxNQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUMxQixDQUFDIiwiZmlsZSI6Ii9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGdhbWU7XHJcblxyXG5pbXBvcnQgQm9vdCBmcm9tIFwiLi9zdGF0ZXMvQm9vdC5qc1wiO1xyXG5pbXBvcnQgUHJlbG9hZCBmcm9tIFwiLi9zdGF0ZXMvUHJlbG9hZC5qc1wiO1xyXG5pbXBvcnQgR2FtZSBmcm9tIFwiLi9zdGF0ZXMvR2FtZS5qc1wiO1xyXG5pbXBvcnQgR2FtZU92ZXIgZnJvbSBcIi4vc3RhdGVzL0dhbWVPdmVyLmpzXCI7XHJcblxyXG5cclxud2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICBnYW1lID0gbmV3IFBoYXNlci5HYW1lKDgwMCwgNjAwLCBQaGFzZXIuQVVUTywgJ2dhbWUnKTtcclxuICBnYW1lLnN0YXRlLmFkZCgnYm9vdCcsIEJvb3QpO1xyXG4gIGdhbWUuc3RhdGUuYWRkKCdwcmVsb2FkJywgUHJlbG9hZCk7XHJcbiAgZ2FtZS5zdGF0ZS5hZGQoJ2dhbWUnLCBHYW1lKTtcclxuICBnYW1lLnN0YXRlLmFkZCgnZ2FtZW92ZXInLCBHYW1lT3Zlcik7XHJcbiAgZ2FtZS5zdGF0ZS5zdGFydCgnYm9vdCcpO1xyXG59O1xyXG4iXX0=
},{"./states/Boot.js":5,"./states/Game.js":6,"./states/GameOver.js":7,"./states/Preload.js":8}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Human = (function (_Phaser$Plugin$Isometric$IsoSprite) {
	_inherits(Human, _Phaser$Plugin$Isometric$IsoSprite);

	function Human(game, x, y, enemies, arrows) {
		_classCallCheck(this, Human);

		_get(Object.getPrototypeOf(Human.prototype), 'constructor', this).call(this, game, x, y, 0, 'human', 0); // what are this params? the second is a iso

		this.animations.add('idle', [10, 11]);
		this.animations.play('idle', 2, true);

		this.anchor.setTo(.5, .5);
		this.enemies = enemies;
		this.arrows = arrows;

		this.shotInterval = 400;
		this.shotTime = this.game.time.now + this.shotInterval;
	}

	_createClass(Human, [{
		key: 'update',
		value: function update() {
			if (this.game.time.now > this.shotTime) {
				this.target = this.enemies.findNearest(this.x, this.y);

				if (this.target) {
					var arrow = this.arrows.getFirstDead();
					if (!arrow) arrow = this.arrows.create(0, 0, 'arrow');
					arrow.revive();
					arrow.x = this.x;
					arrow.y = this.y;
					arrow.lifespan = 4000;

					arrow.rotation = this.game.physics.arcade.moveToObject(arrow, this.target, 120);

					this.shotTime = this.game.time.now + this.shotInterval;
				}
			}
		}
	}]);

	return Human;
})(Phaser.Plugin.Isometric.IsoSprite);

exports['default'] = Human;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvcHJlZmFicy9IdW1hbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztJQUFxQixLQUFLO1dBQUwsS0FBSzs7QUFFZCxVQUZTLEtBQUssQ0FFYixJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFDO3dCQUZwQixLQUFLOztBQUd4Qiw2QkFIbUIsS0FBSyw2Q0FHbEIsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUU7O0FBRWpDLE1BQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3RDLE1BQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7O0FBRXRDLE1BQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUMxQixNQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztBQUN2QixNQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQzs7QUFFckIsTUFBSSxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUM7QUFDeEIsTUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztFQUN2RDs7Y0FkbUIsS0FBSzs7U0FnQm5CLGtCQUFFO0FBQ1AsT0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBQztBQUNyQyxRQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDOztBQUV2RCxRQUFHLElBQUksQ0FBQyxNQUFNLEVBQUM7QUFDZCxTQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQ3ZDLFNBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDckQsVUFBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ2YsVUFBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ2pCLFVBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNqQixVQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQzs7QUFFdEIsVUFBSyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUNyRCxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQzs7QUFFMUIsU0FBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztLQUN2RDtJQUNEO0dBQ0Q7OztRQWxDbUIsS0FBSztHQUFTLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVM7O3FCQUEvQyxLQUFLIiwiZmlsZSI6Ii9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvcHJlZmFicy9IdW1hbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIEh1bWFuIGV4dGVuZHMgUGhhc2VyLlBsdWdpbi5Jc29tZXRyaWMuSXNvU3ByaXRlIHtcblxuXHRjb25zdHJ1Y3RvcihnYW1lLCB4LCB5LCBlbmVtaWVzLCBhcnJvd3Mpe1xuXHRcdHN1cGVyKGdhbWUsIHgsIHksIDAsICdodW1hbicsIDApOyAvLyB3aGF0IGFyZSB0aGlzIHBhcmFtcz8gdGhlIHNlY29uZCBpcyBhIGlzb1xuXG5cdFx0dGhpcy5hbmltYXRpb25zLmFkZCgnaWRsZScsIFsxMCwgMTFdKTtcblx0XHR0aGlzLmFuaW1hdGlvbnMucGxheSgnaWRsZScsIDIsIHRydWUpO1xuXG5cdFx0dGhpcy5hbmNob3Iuc2V0VG8oLjUsIC41KTtcblx0XHR0aGlzLmVuZW1pZXMgPSBlbmVtaWVzO1xuXHRcdHRoaXMuYXJyb3dzID0gYXJyb3dzO1xuXG5cdFx0dGhpcy5zaG90SW50ZXJ2YWwgPSA0MDA7XG5cdFx0dGhpcy5zaG90VGltZSA9IHRoaXMuZ2FtZS50aW1lLm5vdyArIHRoaXMuc2hvdEludGVydmFsO1xuXHR9XG5cblx0dXBkYXRlKCl7XG5cdFx0aWYodGhpcy5nYW1lLnRpbWUubm93ID4gdGhpcy5zaG90VGltZSl7XG5cdFx0XHR0aGlzLnRhcmdldCA9IHRoaXMuZW5lbWllcy5maW5kTmVhcmVzdCh0aGlzLngsIHRoaXMueSk7XG5cblx0XHRcdGlmKHRoaXMudGFyZ2V0KXtcblx0XHRcdFx0dmFyIGFycm93ID0gdGhpcy5hcnJvd3MuZ2V0Rmlyc3REZWFkKCk7XG5cdFx0XHRcdGlmKCFhcnJvdykgYXJyb3cgPSB0aGlzLmFycm93cy5jcmVhdGUoMCwgMCwgJ2Fycm93Jyk7XG5cdFx0XHRcdGFycm93LnJldml2ZSgpO1xuXHRcdFx0XHRhcnJvdy54ID0gdGhpcy54O1xuXHRcdFx0XHRhcnJvdy55ID0gdGhpcy55O1xuXHRcdFx0XHRhcnJvdy5saWZlc3BhbiA9IDQwMDA7XG5cblx0XHRcdFx0YXJyb3cucm90YXRpb24gPSB0aGlzLmdhbWUucGh5c2ljcy5hcmNhZGUubW92ZVRvT2JqZWN0KFxuXHRcdFx0XHRcdGFycm93LCB0aGlzLnRhcmdldCwgMTIwKTtcblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMuc2hvdFRpbWUgPSB0aGlzLmdhbWUudGltZS5ub3cgKyB0aGlzLnNob3RJbnRlcnZhbDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cbiJdfQ==
},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NumberBox = (function (_Phaser$Group) {
	_inherits(NumberBox, _Phaser$Group);

	function NumberBox(game, bgasset, val, x, y, parent) {
		_classCallCheck(this, NumberBox);

		_get(Object.getPrototypeOf(NumberBox.prototype), "constructor", this).call(this, game, parent);
		this.create(x, y, bgasset);
		var style = {
			font: "30px arial",
			align: "center",
			fill: "#fff"
		};
		this.txtValue = new Phaser.Text(this.game, x + 35, y + 45, val.toString(), style);
		this.txtValue.anchor.setTo(.5, .5);
		this.add(this.txtValue);
	}

	_createClass(NumberBox, [{
		key: "setValue",
		value: function setValue(val) {
			this.txtValue.text = val.toString();
		}
	}]);

	return NumberBox;
})(Phaser.Group);

exports["default"] = NumberBox;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvcHJlZmFicy9OdW1iZXJCb3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7SUFBcUIsU0FBUztXQUFULFNBQVM7O0FBQ2xCLFVBRFMsU0FBUyxDQUNqQixJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBQzt3QkFEekIsU0FBUzs7QUFFNUIsNkJBRm1CLFNBQVMsNkNBRXRCLElBQUksRUFBRSxNQUFNLEVBQUU7QUFDcEIsTUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzNCLE1BQUksS0FBSyxHQUFHO0FBQ1gsT0FBSSxFQUFFLFlBQVk7QUFDbEIsUUFBSyxFQUFFLFFBQVE7QUFDZixPQUFJLEVBQUUsTUFBTTtHQUNaLENBQUM7QUFDRixNQUFJLENBQUMsUUFBUSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FDOUIsSUFBSSxDQUFDLElBQUksRUFDVCxDQUFDLEdBQUcsRUFBRSxFQUNOLENBQUMsR0FBRyxFQUFFLEVBQ04sR0FBRyxDQUFDLFFBQVEsRUFBRSxFQUNkLEtBQUssQ0FDTCxDQUFDO0FBQ0YsTUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBQyxFQUFFLENBQUMsQ0FBQztBQUNsQyxNQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztFQUN4Qjs7Y0FsQm1CLFNBQVM7O1NBb0JyQixrQkFBQyxHQUFHLEVBQUM7QUFDWixPQUFJLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7R0FDcEM7OztRQXRCbUIsU0FBUztHQUFTLE1BQU0sQ0FBQyxLQUFLOztxQkFBOUIsU0FBUyIsImZpbGUiOiIvVXNlcnMvbGVzc2FuZHJvL0hhY2tpbmcvSlMvR0FNRS9QSEFTRVIvYm9vay10cmF2aXMtZmFhcy9Ub3dlckRlZmVuc2Uvc3JjL3ByZWZhYnMvTnVtYmVyQm94LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTnVtYmVyQm94IGV4dGVuZHMgUGhhc2VyLkdyb3VwIHtcblx0Y29uc3RydWN0b3IoZ2FtZSwgYmdhc3NldCwgdmFsLCB4LCB5LCBwYXJlbnQpe1xuXHRcdHN1cGVyKGdhbWUsIHBhcmVudCk7XG5cdFx0dGhpcy5jcmVhdGUoeCwgeSwgYmdhc3NldCk7XG5cdFx0dmFyIHN0eWxlID0ge1xuXHRcdFx0Zm9udDogXCIzMHB4IGFyaWFsXCIsXG5cdFx0XHRhbGlnbjogXCJjZW50ZXJcIixcblx0XHRcdGZpbGw6IFwiI2ZmZlwiXG5cdFx0fTtcblx0XHR0aGlzLnR4dFZhbHVlID0gbmV3IFBoYXNlci5UZXh0KFxuXHRcdFx0dGhpcy5nYW1lLFxuXHRcdFx0eCArIDM1LFxuXHRcdFx0eSArIDQ1LFxuXHRcdFx0dmFsLnRvU3RyaW5nKCksXG5cdFx0XHRzdHlsZVxuXHRcdCk7XG5cdFx0dGhpcy50eHRWYWx1ZS5hbmNob3Iuc2V0VG8oLjUsLjUpO1xuXHRcdHRoaXMuYWRkKHRoaXMudHh0VmFsdWUpO1xuXHR9XG5cblx0c2V0VmFsdWUodmFsKXtcblx0XHR0aGlzLnR4dFZhbHVlLnRleHQgPSB2YWwudG9TdHJpbmcoKTtcblx0fVxufVxuIl19
},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Skeleton = (function (_Phaser$Plugin$Isometric$IsoSprite) {
	_inherits(Skeleton, _Phaser$Plugin$Isometric$IsoSprite);

	function Skeleton(game, x, y, frame) {
		_classCallCheck(this, Skeleton);

		_get(Object.getPrototypeOf(Skeleton.prototype), 'constructor', this).call(this, game, x, y, 0, 'skeleton', frame);

		this.walkAnim = this.animations.add('walk', [10, 11]);
		this.animations.add('hurt', [12]);
		this.animations.add('attack', [13, 14, 13, 14, 14, 13, 14]);

		this.animations.play('walk', 2, true);

		this.anchor.setTo(.5, .5);

		this.game.physics.enable(this, Phaser.Physics.ARCADE);

		this.path, this.pathPosition;

		this.health = 5;
		this.worth = 20;

		this.pathFinished = new Phaser.Signal();
	}

	_createClass(Skeleton, [{
		key: 'damage',
		value: function damage(value) {
			this.health -= value;
			if (this.health <= 0) {
				this.kill();
			}
		}
	}, {
		key: 'setPath',
		value: function setPath(path) {
			this.path = path;
			this.pathPosition = 0;
		}
	}, {
		key: 'advanceTile',
		value: function advanceTile() {
			this.pathPosition += 1;

			if (this.pathPosition < this.path.length) {
				//tween
				if (this.path[this.pathPosition].x > this.isoX) {
					this.scale.x = 1;
				} else {
					this.scale.x = -1;
				}

				this.walkMotion = this.game.add.tween(this).to({
					isoX: this.path[this.pathPosition].x,
					isoY: this.path[this.pathPosition].y
				}, 2000, Phaser.Easing.Linear.None, true);
				this.walkMotion.onComplete.add(this.advanceTile, this);
			} else {
				this.animations.play("attack", 2);
				this.animations.currentAnim.onComplete.addOnce(this.attackOver, this);
			}
		}
	}, {
		key: 'attackOver',
		value: function attackOver() {
			this.pathFinished.dispatch(this);
		}
	}]);

	return Skeleton;
})(Phaser.Plugin.Isometric.IsoSprite);

exports['default'] = Skeleton;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvcHJlZmFicy9Ta2VsZXRvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztJQUFxQixRQUFRO1dBQVIsUUFBUTs7QUFDakIsVUFEUyxRQUFRLENBQ2hCLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBQzt3QkFEVixRQUFROztBQUUzQiw2QkFGbUIsUUFBUSw2Q0FFckIsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUU7O0FBRXhDLE1BQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDckQsTUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNsQyxNQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDOztBQUV0RCxNQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDOztBQUV0QyxNQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7O0FBRTFCLE1BQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQzs7QUFFdEQsTUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDOztBQUU3QixNQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztBQUNoQixNQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQzs7QUFFaEIsTUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztFQUN4Qzs7Y0FwQm1CLFFBQVE7O1NBc0J0QixnQkFBQyxLQUFLLEVBQUM7QUFDWixPQUFJLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQztBQUNyQixPQUFJLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFDO0FBQ3BCLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNaO0dBQ0Q7OztTQUVNLGlCQUFDLElBQUksRUFBQztBQUNaLE9BQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ2pCLE9BQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDO0dBQ3RCOzs7U0FFVSx1QkFBRTtBQUNaLE9BQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxDQUFDOztBQUV2QixPQUFHLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUM7O0FBRXZDLFFBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUM7QUFDN0MsU0FBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ2pCLE1BQU07QUFDTixTQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUNsQjs7QUFFRCxRQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDN0MsU0FBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7QUFDcEMsU0FBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7S0FDcEMsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzNDLFFBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3ZELE1BQU07QUFDTixRQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbEMsUUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3RFO0dBQ0Q7OztTQUVTLHNCQUFFO0FBQ1gsT0FBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDakM7OztRQTFEbUIsUUFBUTtHQUFTLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVM7O3FCQUFsRCxRQUFRIiwiZmlsZSI6Ii9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvcHJlZmFicy9Ta2VsZXRvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNrZWxldG9uIGV4dGVuZHMgUGhhc2VyLlBsdWdpbi5Jc29tZXRyaWMuSXNvU3ByaXRle1xuXHRjb25zdHJ1Y3RvcihnYW1lLCB4LCB5LCBmcmFtZSl7XG5cdFx0c3VwZXIoZ2FtZSwgeCwgeSwgMCwgJ3NrZWxldG9uJywgZnJhbWUpO1xuXG5cdFx0dGhpcy53YWxrQW5pbSA9IHRoaXMuYW5pbWF0aW9ucy5hZGQoJ3dhbGsnLCBbMTAsMTFdKTtcblx0XHR0aGlzLmFuaW1hdGlvbnMuYWRkKCdodXJ0JywgWzEyXSk7XG5cdFx0dGhpcy5hbmltYXRpb25zLmFkZCgnYXR0YWNrJywgWzEzLDE0LDEzLDE0LDE0LDEzLDE0XSk7XG5cblx0XHR0aGlzLmFuaW1hdGlvbnMucGxheSgnd2FsaycsIDIsIHRydWUpO1xuXG5cdFx0dGhpcy5hbmNob3Iuc2V0VG8oLjUsIC41KTtcblxuXHRcdHRoaXMuZ2FtZS5waHlzaWNzLmVuYWJsZSh0aGlzLCBQaGFzZXIuUGh5c2ljcy5BUkNBREUpO1xuXG5cdFx0dGhpcy5wYXRoLCB0aGlzLnBhdGhQb3NpdGlvbjtcblxuXHRcdHRoaXMuaGVhbHRoID0gNTtcblx0XHR0aGlzLndvcnRoID0gMjA7XG5cblx0XHR0aGlzLnBhdGhGaW5pc2hlZCA9IG5ldyBQaGFzZXIuU2lnbmFsKCk7XG5cdH1cblxuXHRkYW1hZ2UodmFsdWUpe1xuXHRcdHRoaXMuaGVhbHRoIC09IHZhbHVlO1xuXHRcdGlmICh0aGlzLmhlYWx0aCA8PSAwKXtcblx0XHRcdHRoaXMua2lsbCgpO1xuXHRcdH1cblx0fVxuXG5cdHNldFBhdGgocGF0aCl7XG5cdFx0dGhpcy5wYXRoID0gcGF0aDtcblx0XHR0aGlzLnBhdGhQb3NpdGlvbiA9IDA7XG5cdH1cblxuXHRhZHZhbmNlVGlsZSgpe1xuXHRcdHRoaXMucGF0aFBvc2l0aW9uICs9IDE7XG5cblx0XHRpZih0aGlzLnBhdGhQb3NpdGlvbiA8IHRoaXMucGF0aC5sZW5ndGgpe1xuXHRcdFx0Ly90d2VlblxuXHRcdFx0aWYodGhpcy5wYXRoW3RoaXMucGF0aFBvc2l0aW9uXS54ID4gdGhpcy5pc29YKXtcblx0XHRcdFx0dGhpcy5zY2FsZS54ID0gMTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuc2NhbGUueCA9IC0xO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLndhbGtNb3Rpb24gPSB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXMpLnRvKHtcblx0XHRcdFx0XHRpc29YOiB0aGlzLnBhdGhbdGhpcy5wYXRoUG9zaXRpb25dLngsXG5cdFx0XHRcdFx0aXNvWTogdGhpcy5wYXRoW3RoaXMucGF0aFBvc2l0aW9uXS55LFxuXHRcdFx0XHR9LFx0MjAwMCwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSwgdHJ1ZSk7XG5cdFx0XHR0aGlzLndhbGtNb3Rpb24ub25Db21wbGV0ZS5hZGQodGhpcy5hZHZhbmNlVGlsZSwgdGhpcyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuYW5pbWF0aW9ucy5wbGF5KFwiYXR0YWNrXCIsIDIpO1xuXHRcdFx0dGhpcy5hbmltYXRpb25zLmN1cnJlbnRBbmltLm9uQ29tcGxldGUuYWRkT25jZSh0aGlzLmF0dGFja092ZXIsIHRoaXMpO1xuXHRcdH1cblx0fVxuXG5cdGF0dGFja092ZXIoKXtcblx0XHR0aGlzLnBhdGhGaW5pc2hlZC5kaXNwYXRjaCh0aGlzKTtcblx0fVxufVxuIl19
},{}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Boot = (function () {
  function Boot() {
    _classCallCheck(this, Boot);
  }

  _createClass(Boot, [{
    key: 'preload',
    value: function preload() {
      this.load.image('preloader', 'assets/images/loading_bar.png');
    }
  }, {
    key: 'create',
    value: function create() {
      this.game.input.maxPointers = 1;
      this.game.state.start('preload');
    }
  }]);

  return Boot;
})();

exports['default'] = Boot;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvc3RhdGVzL0Jvb3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFxQixJQUFJO1dBQUosSUFBSTswQkFBSixJQUFJOzs7ZUFBSixJQUFJOztXQUVoQixtQkFBRztBQUNSLFVBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSwrQkFBK0IsQ0FBQyxDQUFDO0tBQy9EOzs7V0FFSyxrQkFBRztBQUNQLFVBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7QUFDaEMsVUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQ2xDOzs7U0FUa0IsSUFBSTs7O3FCQUFKLElBQUkiLCJmaWxlIjoiL1VzZXJzL2xlc3NhbmRyby9IYWNraW5nL0pTL0dBTUUvUEhBU0VSL2Jvb2stdHJhdmlzLWZhYXMvVG93ZXJEZWZlbnNlL3NyYy9zdGF0ZXMvQm9vdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvb3Qge1xyXG5cclxuICBwcmVsb2FkKCkge1xyXG4gICAgdGhpcy5sb2FkLmltYWdlKCdwcmVsb2FkZXInLCAnYXNzZXRzL2ltYWdlcy9sb2FkaW5nX2Jhci5wbmcnKTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZSgpIHtcclxuICAgIHRoaXMuZ2FtZS5pbnB1dC5tYXhQb2ludGVycyA9IDE7XHJcbiAgICB0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ3ByZWxvYWQnKTtcclxuICB9XHJcblxyXG59Il19
},{}],6:[function(require,module,exports){
//require other components

'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _prefabsHumanJs = require('../prefabs/Human.js');

var _prefabsHumanJs2 = _interopRequireDefault(_prefabsHumanJs);

var _prefabsSkeletonJs = require('../prefabs/Skeleton.js');

var _prefabsSkeletonJs2 = _interopRequireDefault(_prefabsSkeletonJs);

var _prefabsNumberBoxJs = require('../prefabs/NumberBox.js');

var _prefabsNumberBoxJs2 = _interopRequireDefault(_prefabsNumberBoxJs);

var Enemies = (function () {
	function Enemies(game, parentGroup) {
		_classCallCheck(this, Enemies);

		this.game = game;
		this._enemies = this.game.add.group(parentGroup);
	}

	_createClass(Enemies, [{
		key: 'findNearest',
		value: function findNearest(xc, yc) {
			var lowestChild = null;
			var lowestDistance = 10000000;

			this._enemies.forEach(function (child) {
				var distance = Phaser.Math.distance(xc, yc, child.x, child.y);

				if (!lowestChild) {
					lowestChild = child;
				} else {
					if (distance < lowestDistance) {
						lowestChild = child;
						lowestDistance = distance;
					}
				}
			}, this._enemies, true); // what's true
			return lowestChild;
		}
	}, {
		key: 'add',
		value: function add(obj) {
			this._enemies.add(obj);
		}
	}]);

	return Enemies;
})();

var Game = (function (_Phaser$State) {
	_inherits(Game, _Phaser$State);

	function Game() {
		_classCallCheck(this, Game);

		//object level properties
		_get(Object.getPrototypeOf(Game.prototype), 'constructor', this).call(this);
		this.playerLife = 10;
		this.money = 500;
		this.spawnTime = 1000;
	}

	_createClass(Game, [{
		key: 'create',
		value: function create() {
			this.mapData = this.game.cache.getJSON('mapdata');
			this.game.physics.startSystem(Phaser.Physics.ARCADE);
			this.game.time.advancedTiming = true;
			this.game.add.sprite(0, 0, "gamebg");
			this.game.plugins.add(new Phaser.Plugin.Isometric(this.game));
			this.game.iso.anchor.setTo(0.5, 0.2);
			this.isoGroup = this.game.add.group();
			this.isoChars = this.game.add.group();
			this.allies = this.game.add.group(this.isoChars);
			this.enemies = new Enemies(this.game, this.isoChars);
			this.arrows = this.game.add.group();
			this.arrows.enableBody = true;
			this.arrows.physicsBodyType = Phaser.Physics.ARCADE;
			this.healthBox = new _prefabsNumberBoxJs2['default'](this.game, 'healthholder', this.playerLife, 10, 10);
			this.scoreBox = new _prefabsNumberBoxJs2['default'](this.game, 'moneyholder', this.money, 100, 10);

			//
			// TEST
			//var _human = new Human(this.game, 200, 200);
			//this.allies.add(_human);
			//var _skeleton = new Skeleton(this.game, 300, 200);
			//this.allies.add(_skeleton);

			this.spawnTiles();

			this.easystar = new EasyStar.js();
			this.easystar.setGrid(this.mapData.tileMap);
			this.easystar.setAcceptableTiles([1]);
			this.boundFound = this.pathFound.bind(this);
			this.easystar.findPath(1, 0, 0, 4, this.boundFound);

			this.cursorPos = new Phaser.Plugin.Isometric.Point3();
			this.nextSpawn = this.game.time.now + this.spawnTime;
		}
	}, {
		key: 'update',
		value: function update() {
			this.game.iso.unproject(this.game.input.activePointer.position, this.cursorPos);
			this.isoGroup.forEach(this.checkTiles, this, false);
			if (this.game.input.activePointer.isDown && this.selectedTile) {
				// how could this.selectedTile be null?
				if (!this.selectedTile.occupant && this.selectedTile.buyable) {
					if (this.money >= 100) {
						var human = new _prefabsHumanJs2['default'](this.game, this.selectedTile.isoX, this.selectedTile.isoY, this.enemies, this.arrows);
						this.allies.add(human);
						this.selectedTile.occupant = human;
						this.money -= 100;
						this.scoreBox.setValue(this.money);
					}
				}
			}

			this.game.physics.arcade.overlap(this.arrows, this.enemies._enemies, this.arrowHitEnemy, null, this);

			if (this.game.time.now > this.nextSpawn) {
				this.spawnEnemy();
				this.nextSpawn = this.game.time.now + this.spawnTime + 10000;
			}

			this.easystar.calculate();
			this.game.iso.simpleSort(this.enemies._enemies);
		}
	}, {
		key: 'spawnEnemy',
		value: function spawnEnemy() {
			var skel = new _prefabsSkeletonJs2['default'](this.game, this.convertedPath[0].x, this.convertedPath[0].y);
			skel.setPath(this.convertedPath);
			skel.advanceTile();
			skel.pathFinished.addOnce(this.enemyAtGoal, this);
			this.enemies.add(skel);
		}
	}, {
		key: 'enemyAtGoal',
		value: function enemyAtGoal(enemy) {
			enemy.kill();
			this.playerLife -= 1;
			this.healthBox.setValue(this.playerLife);
			if (this.playerLife <= 0) {
				this.gameOver();
			}
		}
	}, {
		key: 'gameOver',
		value: function gameOver() {
			this.game.state.start('gameover');
		}
	}, {
		key: 'arrowHitEnemy',
		value: function arrowHitEnemy(arrow, enemy) {
			arrow.kill();
			enemy.damage(1);
			if (!enemy.alive) {
				this.money += enemy.worth;
				this.scoreBox.setValue(this.money);
			}
		}
	}, {
		key: 'checkTiles',
		value: function checkTiles(tile) {
			var inBounds = tile.isoBounds.containsXY(this.cursorPos.x, this.cursorPos.y);

			if (!tile.selected && inBounds) {
				tile.selected = true;
				tile.tint = 0x86bfda;
				this.game.add.tween(tile).to({ isoZ: 4 }, 200, Phaser.Easing.Quadratic.InOut, true);
				this.selectedTile = tile;
			} else if (tile.selected && !inBounds) {
				tile.selected = false;
				tile.tint = 0xffffff;
				this.game.add.tween(tile).to({ isoZ: 0 }, 200, Phaser.Easing.Quadratic.InOut, true);
			}
		}
	}, {
		key: 'spawnTiles',
		value: function spawnTiles() {
			var size = 55;
			var mapWidth = this.mapData.tileMap[0].length - 1;
			var mapHeight = this.mapData.tileMap.length - 1;
			this.gameTiles = [];

			var i = 0,
			    tile;
			for (var y = 0; y <= mapHeight; y++) {

				this.gameTiles[y] = [];

				for (var x = 0; x <= mapWidth; x++) {
					var tileNumber = this.mapData.tileMap[y][x];
					var tileName = this.mapData.tileNames[tileNumber];
					tile = this.game.add.isoSprite(x * size, y * size, 0, tileName, 0, this.isoGroup);
					tile.anchor.set(0.5, 0);
					tile.buyable = tileNumber == 0 ? true : false;
					this.gameTiles[y][x] = tile;
				}
			}
		}
	}, {
		key: 'pathFound',
		value: function pathFound(path) {
			console.log(path);
			if (path != null) {
				this.convertedPath = [];
				var curPoint;
				for (var i = 0; i < path.length; i++) {
					curPoint = this.gameTiles[path[i].y][path[i].x];
					this.convertedPath.push({ x: curPoint.isoX, y: curPoint.isoY });
				}
			}
		}
	}]);

	return Game;
})(Phaser.State);

exports['default'] = Game;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../prefabs/Human.js":2,"../prefabs/NumberBox.js":3,"../prefabs/Skeleton.js":4}],7:[function(require,module,exports){

//require other components

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GameOver = (function (_Phaser$State) {
  _inherits(GameOver, _Phaser$State);

  function GameOver() {
    _classCallCheck(this, GameOver);

    //object level properties
    _get(Object.getPrototypeOf(GameOver.prototype), "constructor", this).call(this);
  }

  _createClass(GameOver, [{
    key: "create",
    value: function create() {
      this.add.text(this.game.width / 2, this.game.height / 2, "GAME OVER (press space to play again)", { font: "30px Arial", align: "center", fill: "#fff" });
    }
  }, {
    key: "update",
    value: function update() {
      if (this.game.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR)) {
        this.game.state.start('game');
      }
    }
  }]);

  return GameOver;
})(Phaser.State);

exports["default"] = GameOver;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvc3RhdGVzL0dhbWVPdmVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBR3FCLFFBQVE7WUFBUixRQUFROztBQUVoQixXQUZRLFFBQVEsR0FFYjswQkFGSyxRQUFROzs7QUFJekIsK0JBSmlCLFFBQVEsNkNBSWpCO0dBQ1Q7O2VBTGtCLFFBQVE7O1dBT3JCLGtCQUFHO0FBQ1IsVUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSx1Q0FBdUMsRUFBRSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztLQUN6Sjs7O1dBRUssa0JBQUc7QUFDUixVQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQ2pDLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDM0IsWUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO09BQzlCO0tBQ0Q7OztTQWhCa0IsUUFBUTtHQUFTLE1BQU0sQ0FBQyxLQUFLOztxQkFBN0IsUUFBUSIsImZpbGUiOiIvVXNlcnMvbGVzc2FuZHJvL0hhY2tpbmcvSlMvR0FNRS9QSEFTRVIvYm9vay10cmF2aXMtZmFhcy9Ub3dlckRlZmVuc2Uvc3JjL3N0YXRlcy9HYW1lT3Zlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLy9yZXF1aXJlIG90aGVyIGNvbXBvbmVudHNcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZU92ZXIgZXh0ZW5kcyBQaGFzZXIuU3RhdGUge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIC8vb2JqZWN0IGxldmVsIHByb3BlcnRpZXNcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgY3JlYXRlKCkge1xuXHQgIHRoaXMuYWRkLnRleHQodGhpcy5nYW1lLndpZHRoIC8gMiwgdGhpcy5nYW1lLmhlaWdodCAvIDIsIFwiR0FNRSBPVkVSIChwcmVzcyBzcGFjZSB0byBwbGF5IGFnYWluKVwiLCB7IGZvbnQ6IFwiMzBweCBBcmlhbFwiLCBhbGlnbjogXCJjZW50ZXJcIiwgZmlsbDogXCIjZmZmXCIgfSk7XG4gIH1cblxuICB1cGRhdGUoKSB7XG5cdCAgaWYodGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmlzRG93bihcblx0XHQgIFBoYXNlci5LZXlib2FyZC5TUEFDRUJBUikpIHtcblx0XHQgIHRoaXMuZ2FtZS5zdGF0ZS5zdGFydCgnZ2FtZScpO1xuXHQgIH1cbiAgfVxuXG5cbn1cbiJdfQ==
},{}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Preload = (function () {
  function Preload() {
    _classCallCheck(this, Preload);

    this.asset = null;
    this.ready = false;
  }

  _createClass(Preload, [{
    key: 'preload',
    value: function preload() {
      this.load.image('loading_bg', 'assets/images/loading_bg.jpg');
    }
  }, {
    key: 'create',
    value: function create() {

      //background for game
      this.add.sprite(0, 0, "loading_bg");

      this.asset = this.add.sprite(this.game.width / 2, this.game.height / 2, 'preloader');
      this.asset.anchor.setTo(0.5, 0.5);

      this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
      this.load.setPreloadSprite(this.asset);

      //do all your loading here
      this.load.pack('level1', 'assets/assetPack.json', null, this);

      //staaaart load
      this.load.start();
    }
  }, {
    key: 'update',
    value: function update() {

      if (this.ready) {
        this.game.state.start('game');
      }
    }
  }, {
    key: 'onLoadComplete',
    value: function onLoadComplete() {
      this.ready = true;
    }
  }]);

  return Preload;
})();

exports['default'] = Preload;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvc3RhdGVzL1ByZWxvYWQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFxQixPQUFPO0FBRWYsV0FGUSxPQUFPLEdBRVo7MEJBRkssT0FBTzs7QUFHeEIsUUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7QUFDbEIsUUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7R0FDcEI7O2VBTGtCLE9BQU87O1dBT25CLG1CQUFHO0FBQ1IsVUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLDhCQUE4QixDQUFDLENBQUM7S0FDL0Q7OztXQUVLLGtCQUFHOzs7QUFHUCxVQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDOztBQUVuQyxVQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDaEYsVUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQzs7QUFFbEMsVUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDNUQsVUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7OztBQUd2QyxVQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsdUJBQXVCLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDOzs7QUFJOUQsVUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztLQUNuQjs7O1dBRUssa0JBQUc7O0FBRVAsVUFBRyxJQUFJLENBQUMsS0FBSyxFQUFFO0FBQ2IsWUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO09BQy9CO0tBRUY7OztXQUVhLDBCQUFHO0FBQ2YsVUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7S0FDbkI7OztTQXhDa0IsT0FBTzs7O3FCQUFQLE9BQU8iLCJmaWxlIjoiL1VzZXJzL2xlc3NhbmRyby9IYWNraW5nL0pTL0dBTUUvUEhBU0VSL2Jvb2stdHJhdmlzLWZhYXMvVG93ZXJEZWZlbnNlL3NyYy9zdGF0ZXMvUHJlbG9hZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIFByZWxvYWQge1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuYXNzZXQgPSBudWxsO1xyXG4gICAgdGhpcy5yZWFkeSA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgcHJlbG9hZCgpIHtcclxuICAgIHRoaXMubG9hZC5pbWFnZSgnbG9hZGluZ19iZycsICdhc3NldHMvaW1hZ2VzL2xvYWRpbmdfYmcuanBnJyk7XHJcbiAgfVxyXG5cclxuICBjcmVhdGUoKSB7XHJcblxyXG4gICAgLy9iYWNrZ3JvdW5kIGZvciBnYW1lXHJcbiAgICB0aGlzLmFkZC5zcHJpdGUoMCwwLCBcImxvYWRpbmdfYmdcIik7XHJcblxyXG4gICAgdGhpcy5hc3NldCA9IHRoaXMuYWRkLnNwcml0ZSh0aGlzLmdhbWUud2lkdGgvMix0aGlzLmdhbWUuaGVpZ2h0LzIsICdwcmVsb2FkZXInKTtcclxuICAgIHRoaXMuYXNzZXQuYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcclxuXHJcbiAgICB0aGlzLmxvYWQub25Mb2FkQ29tcGxldGUuYWRkT25jZSh0aGlzLm9uTG9hZENvbXBsZXRlLCB0aGlzKTtcclxuICAgIHRoaXMubG9hZC5zZXRQcmVsb2FkU3ByaXRlKHRoaXMuYXNzZXQpO1xyXG5cclxuICAgIC8vZG8gYWxsIHlvdXIgbG9hZGluZyBoZXJlXHJcbiAgICB0aGlzLmxvYWQucGFjaygnbGV2ZWwxJywgJ2Fzc2V0cy9hc3NldFBhY2suanNvbicsIG51bGwsIHRoaXMpO1xyXG5cclxuXHJcbiAgICAvL3N0YWFhYXJ0IGxvYWRcclxuICAgIHRoaXMubG9hZC5zdGFydCgpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKCkge1xyXG5cclxuICAgIGlmKHRoaXMucmVhZHkpIHtcclxuICAgICAgdGhpcy5nYW1lLnN0YXRlLnN0YXJ0KCdnYW1lJyk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbiAgb25Mb2FkQ29tcGxldGUoKSB7XHJcbiAgICB0aGlzLnJlYWR5ID0gdHJ1ZTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
