(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _statesBootJs = require("./states/Boot.js");

var _statesBootJs2 = _interopRequireDefault(_statesBootJs);

var _statesPreloadJs = require("./states/Preload.js");

var _statesPreloadJs2 = _interopRequireDefault(_statesPreloadJs);

var _statesGameJs = require("./states/Game.js");

var _statesGameJs2 = _interopRequireDefault(_statesGameJs);

var _statesGameOverJs = require("./states/GameOver.js");

var _statesGameOverJs2 = _interopRequireDefault(_statesGameOverJs);

var _statesVictoryJs = require("./states/Victory.js");

var _statesVictoryJs2 = _interopRequireDefault(_statesVictoryJs);

var _statesMenuJs = require("./states/Menu.js");

var _statesMenuJs2 = _interopRequireDefault(_statesMenuJs);

var game;

window.onload = function () {
  game = new Phaser.Game(800, 600, Phaser.AUTO, 'game');
  game.state.add('boot', _statesBootJs2["default"]);
  game.state.add('preload', _statesPreloadJs2["default"]);
  game.state.add('game', _statesGameJs2["default"]);
  game.state.add('gameover', _statesGameOverJs2["default"]);
  game.state.add('victory', _statesVictoryJs2["default"]);
  game.state.add('menu', _statesMenuJs2["default"]);
  game.state.start('boot');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL0FsZXhFeGFtcGxlR2FtZXMvVG93ZXJEZWZlbnNlL3NyYy9hcHAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs0QkFFaUIsa0JBQWtCOzs7OytCQUNmLHFCQUFxQjs7Ozs0QkFDeEIsa0JBQWtCOzs7O2dDQUNkLHNCQUFzQjs7OzsrQkFDdkIscUJBQXFCOzs7OzRCQUN4QixrQkFBa0I7Ozs7QUFQbkMsSUFBSSxJQUFJLENBQUM7O0FBVVQsTUFBTSxDQUFDLE1BQU0sR0FBRyxZQUFZO0FBQzFCLE1BQUksR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3RELE1BQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sNEJBQU8sQ0FBQztBQUM3QixNQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLCtCQUFVLENBQUM7QUFDbkMsTUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSw0QkFBTyxDQUFDO0FBQzdCLE1BQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQVUsZ0NBQVcsQ0FBQztBQUNyQyxNQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLCtCQUFVLENBQUM7QUFDbkMsTUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSw0QkFBTyxDQUFDO0FBQzdCLE1BQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQzFCLENBQUMiLCJmaWxlIjoiL1VzZXJzL2xlc3NhbmRyby9IYWNraW5nL0pTL0dBTUUvUEhBU0VSL2Jvb2stdHJhdmlzLWZhYXMvQWxleEV4YW1wbGVHYW1lcy9Ub3dlckRlZmVuc2Uvc3JjL2FwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnYW1lO1xyXG5cclxuaW1wb3J0IEJvb3QgZnJvbSBcIi4vc3RhdGVzL0Jvb3QuanNcIjtcclxuaW1wb3J0IFByZWxvYWQgZnJvbSBcIi4vc3RhdGVzL1ByZWxvYWQuanNcIjtcclxuaW1wb3J0IEdhbWUgZnJvbSBcIi4vc3RhdGVzL0dhbWUuanNcIjtcclxuaW1wb3J0IEdhbWVPdmVyIGZyb20gXCIuL3N0YXRlcy9HYW1lT3Zlci5qc1wiO1xyXG5pbXBvcnQgVmljdG9yeSBmcm9tIFwiLi9zdGF0ZXMvVmljdG9yeS5qc1wiO1xyXG5pbXBvcnQgTWVudSBmcm9tIFwiLi9zdGF0ZXMvTWVudS5qc1wiO1xyXG5cclxuXHJcbndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgZ2FtZSA9IG5ldyBQaGFzZXIuR2FtZSg4MDAsIDYwMCwgUGhhc2VyLkFVVE8sICdnYW1lJyk7XHJcbiAgZ2FtZS5zdGF0ZS5hZGQoJ2Jvb3QnLCBCb290KTtcclxuICBnYW1lLnN0YXRlLmFkZCgncHJlbG9hZCcsIFByZWxvYWQpO1xyXG4gIGdhbWUuc3RhdGUuYWRkKCdnYW1lJywgR2FtZSk7XHJcbiAgZ2FtZS5zdGF0ZS5hZGQoJ2dhbWVvdmVyJywgR2FtZU92ZXIpO1xyXG4gIGdhbWUuc3RhdGUuYWRkKCd2aWN0b3J5JywgVmljdG9yeSk7XHJcbiAgZ2FtZS5zdGF0ZS5hZGQoJ21lbnUnLCBNZW51KTtcclxuICBnYW1lLnN0YXRlLnN0YXJ0KCdib290Jyk7XHJcbn07XHJcbiJdfQ==
},{"./states/Boot.js":5,"./states/Game.js":6,"./states/GameOver.js":7,"./states/Menu.js":8,"./states/Preload.js":9,"./states/Victory.js":10}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Human = (function (_Phaser$Plugin$Isometric$IsoSprite) {
	_inherits(Human, _Phaser$Plugin$Isometric$IsoSprite);

	function Human(game, x, y, enemies, arrows) {
		_classCallCheck(this, Human);

		_get(Object.getPrototypeOf(Human.prototype), 'constructor', this).call(this, game, x, y, 0, 'human', 0); // what are this params? the second is a iso

		this.animations.add('idle', [10, 11]);
		this.animations.play('idle', 2, true);

		this.anchor.setTo(.5, .5);
		this.enemies = enemies;
		this.arrows = arrows;

		this.shotInterval = 1000;
		this.shotTime = this.game.time.now + this.shotInterval;
	}

	_createClass(Human, [{
		key: 'update',
		value: function update() {
			if (this.game.time.now > this.shotTime) {
				this.target = this.enemies.findNearest(this.x, this.y);

				if (this.target) {
					var arrow = this.arrows.getFirstDead();
					if (!arrow) arrow = this.arrows.create(0, 0, 'arrow');
					arrow.revive();
					arrow.x = this.x;
					arrow.y = this.y;
					arrow.lifespan = 4000;

					arrow.rotation = this.game.physics.arcade.moveToObject(arrow, this.target, 120);

					this.shotTime = this.game.time.now + this.shotInterval;
				}
			}
		}
	}]);

	return Human;
})(Phaser.Plugin.Isometric.IsoSprite);

exports['default'] = Human;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL0FsZXhFeGFtcGxlR2FtZXMvVG93ZXJEZWZlbnNlL3NyYy9wcmVmYWJzL0h1bWFuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0lBQXFCLEtBQUs7V0FBTCxLQUFLOztBQUVkLFVBRlMsS0FBSyxDQUViLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUM7d0JBRnBCLEtBQUs7O0FBR3hCLDZCQUhtQixLQUFLLDZDQUdsQixJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRTs7QUFFakMsTUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDdEMsTUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQzs7QUFFdEMsTUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQzFCLE1BQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0FBQ3ZCLE1BQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDOztBQUVyQixNQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztBQUN6QixNQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO0VBQ3ZEOztjQWRtQixLQUFLOztTQWdCbkIsa0JBQUU7QUFDUCxPQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFDO0FBQ3JDLFFBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7O0FBRXZELFFBQUcsSUFBSSxDQUFDLE1BQU0sRUFBQztBQUNkLFNBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDdkMsU0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNyRCxVQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDZixVQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDakIsVUFBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ2pCLFVBQUssQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDOztBQUV0QixVQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQ3JELEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDOztBQUUxQixTQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO0tBQ3ZEO0lBQ0Q7R0FDRDs7O1FBbENtQixLQUFLO0dBQVMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUzs7cUJBQS9DLEtBQUsiLCJmaWxlIjoiL1VzZXJzL2xlc3NhbmRyby9IYWNraW5nL0pTL0dBTUUvUEhBU0VSL2Jvb2stdHJhdmlzLWZhYXMvQWxleEV4YW1wbGVHYW1lcy9Ub3dlckRlZmVuc2Uvc3JjL3ByZWZhYnMvSHVtYW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBIdW1hbiBleHRlbmRzIFBoYXNlci5QbHVnaW4uSXNvbWV0cmljLklzb1Nwcml0ZSB7XG5cblx0Y29uc3RydWN0b3IoZ2FtZSwgeCwgeSwgZW5lbWllcywgYXJyb3dzKXtcblx0XHRzdXBlcihnYW1lLCB4LCB5LCAwLCAnaHVtYW4nLCAwKTsgLy8gd2hhdCBhcmUgdGhpcyBwYXJhbXM/IHRoZSBzZWNvbmQgaXMgYSBpc29cblxuXHRcdHRoaXMuYW5pbWF0aW9ucy5hZGQoJ2lkbGUnLCBbMTAsIDExXSk7XG5cdFx0dGhpcy5hbmltYXRpb25zLnBsYXkoJ2lkbGUnLCAyLCB0cnVlKTtcblxuXHRcdHRoaXMuYW5jaG9yLnNldFRvKC41LCAuNSk7XG5cdFx0dGhpcy5lbmVtaWVzID0gZW5lbWllcztcblx0XHR0aGlzLmFycm93cyA9IGFycm93cztcblxuXHRcdHRoaXMuc2hvdEludGVydmFsID0gMTAwMDtcblx0XHR0aGlzLnNob3RUaW1lID0gdGhpcy5nYW1lLnRpbWUubm93ICsgdGhpcy5zaG90SW50ZXJ2YWw7XG5cdH1cblxuXHR1cGRhdGUoKXtcblx0XHRpZih0aGlzLmdhbWUudGltZS5ub3cgPiB0aGlzLnNob3RUaW1lKXtcblx0XHRcdHRoaXMudGFyZ2V0ID0gdGhpcy5lbmVtaWVzLmZpbmROZWFyZXN0KHRoaXMueCwgdGhpcy55KTtcblxuXHRcdFx0aWYodGhpcy50YXJnZXQpe1xuXHRcdFx0XHR2YXIgYXJyb3cgPSB0aGlzLmFycm93cy5nZXRGaXJzdERlYWQoKTtcblx0XHRcdFx0aWYoIWFycm93KSBhcnJvdyA9IHRoaXMuYXJyb3dzLmNyZWF0ZSgwLCAwLCAnYXJyb3cnKTtcblx0XHRcdFx0YXJyb3cucmV2aXZlKCk7XG5cdFx0XHRcdGFycm93LnggPSB0aGlzLng7XG5cdFx0XHRcdGFycm93LnkgPSB0aGlzLnk7XG5cdFx0XHRcdGFycm93LmxpZmVzcGFuID0gNDAwMDtcblxuXHRcdFx0XHRhcnJvdy5yb3RhdGlvbiA9IHRoaXMuZ2FtZS5waHlzaWNzLmFyY2FkZS5tb3ZlVG9PYmplY3QoXG5cdFx0XHRcdFx0YXJyb3csIHRoaXMudGFyZ2V0LCAxMjApO1xuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5zaG90VGltZSA9IHRoaXMuZ2FtZS50aW1lLm5vdyArIHRoaXMuc2hvdEludGVydmFsO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuIl19
},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NumberBox = (function (_Phaser$Group) {
	_inherits(NumberBox, _Phaser$Group);

	function NumberBox(game, bgasset, val, x, y, parent) {
		_classCallCheck(this, NumberBox);

		_get(Object.getPrototypeOf(NumberBox.prototype), "constructor", this).call(this, game, parent);
		this.create(x, y, bgasset);
		var style = {
			font: "30px arial",
			align: "center",
			fill: "#fff"
		};
		this.txtValue = new Phaser.Text(this.game, x + 35, y + 45, val.toString(), style);
		this.txtValue.anchor.setTo(.5, .5);
		this.add(this.txtValue);
	}

	_createClass(NumberBox, [{
		key: "setValue",
		value: function setValue(val) {
			this.txtValue.text = val.toString();
		}
	}]);

	return NumberBox;
})(Phaser.Group);

exports["default"] = NumberBox;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL0FsZXhFeGFtcGxlR2FtZXMvVG93ZXJEZWZlbnNlL3NyYy9wcmVmYWJzL051bWJlckJveC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztJQUFxQixTQUFTO1dBQVQsU0FBUzs7QUFDbEIsVUFEUyxTQUFTLENBQ2pCLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFDO3dCQUR6QixTQUFTOztBQUU1Qiw2QkFGbUIsU0FBUyw2Q0FFdEIsSUFBSSxFQUFFLE1BQU0sRUFBRTtBQUNwQixNQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDM0IsTUFBSSxLQUFLLEdBQUc7QUFDWCxPQUFJLEVBQUUsWUFBWTtBQUNsQixRQUFLLEVBQUUsUUFBUTtBQUNmLE9BQUksRUFBRSxNQUFNO0dBQ1osQ0FBQztBQUNGLE1BQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUM5QixJQUFJLENBQUMsSUFBSSxFQUNULENBQUMsR0FBRyxFQUFFLEVBQ04sQ0FBQyxHQUFHLEVBQUUsRUFDTixHQUFHLENBQUMsUUFBUSxFQUFFLEVBQ2QsS0FBSyxDQUNMLENBQUM7QUFDRixNQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xDLE1BQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0VBQ3hCOztjQWxCbUIsU0FBUzs7U0FvQnJCLGtCQUFDLEdBQUcsRUFBQztBQUNaLE9BQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztHQUNwQzs7O1FBdEJtQixTQUFTO0dBQVMsTUFBTSxDQUFDLEtBQUs7O3FCQUE5QixTQUFTIiwiZmlsZSI6Ii9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL0FsZXhFeGFtcGxlR2FtZXMvVG93ZXJEZWZlbnNlL3NyYy9wcmVmYWJzL051bWJlckJveC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIE51bWJlckJveCBleHRlbmRzIFBoYXNlci5Hcm91cCB7XG5cdGNvbnN0cnVjdG9yKGdhbWUsIGJnYXNzZXQsIHZhbCwgeCwgeSwgcGFyZW50KXtcblx0XHRzdXBlcihnYW1lLCBwYXJlbnQpO1xuXHRcdHRoaXMuY3JlYXRlKHgsIHksIGJnYXNzZXQpO1xuXHRcdHZhciBzdHlsZSA9IHtcblx0XHRcdGZvbnQ6IFwiMzBweCBhcmlhbFwiLFxuXHRcdFx0YWxpZ246IFwiY2VudGVyXCIsXG5cdFx0XHRmaWxsOiBcIiNmZmZcIlxuXHRcdH07XG5cdFx0dGhpcy50eHRWYWx1ZSA9IG5ldyBQaGFzZXIuVGV4dChcblx0XHRcdHRoaXMuZ2FtZSxcblx0XHRcdHggKyAzNSxcblx0XHRcdHkgKyA0NSxcblx0XHRcdHZhbC50b1N0cmluZygpLFxuXHRcdFx0c3R5bGVcblx0XHQpO1xuXHRcdHRoaXMudHh0VmFsdWUuYW5jaG9yLnNldFRvKC41LC41KTtcblx0XHR0aGlzLmFkZCh0aGlzLnR4dFZhbHVlKTtcblx0fVxuXG5cdHNldFZhbHVlKHZhbCl7XG5cdFx0dGhpcy50eHRWYWx1ZS50ZXh0ID0gdmFsLnRvU3RyaW5nKCk7XG5cdH1cbn1cbiJdfQ==
},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Skeleton = (function (_Phaser$Plugin$Isometric$IsoSprite) {
	_inherits(Skeleton, _Phaser$Plugin$Isometric$IsoSprite);

	function Skeleton(game, x, y, frame) {
		_classCallCheck(this, Skeleton);

		_get(Object.getPrototypeOf(Skeleton.prototype), 'constructor', this).call(this, game, x, y, 0, 'skeleton', frame);

		this.walkAnim = this.animations.add('walk', [10, 11]);
		this.animations.add('hurt', [12]);
		this.animations.add('attack', [13, 14, 13, 14, 14, 13, 14]);

		this.animations.play('walk', 2, true);

		this.anchor.setTo(.5, .5);

		this.game.physics.enable(this, Phaser.Physics.ARCADE);

		this.path, this.pathPosition;

		this.health = 5;
		this.worth = 20;
		this.speed = 1000 + Math.random() * 3000;

		this.pathFinished = new Phaser.Signal();
	}

	/*
 damage(value){
 	this.health -= value;
 	if (this.health <= 0){
 		this.kill();
 	}
 }*/

	_createClass(Skeleton, [{
		key: 'setPath',
		value: function setPath(path) {
			this.path = path;
			this.pathPosition = 0;
		}
	}, {
		key: 'advanceTile',
		value: function advanceTile() {
			this.pathPosition += 1;

			if (this.pathPosition < this.path.length) {
				//tween
				if (this.path[this.pathPosition].x > this.isoX) {
					this.scale.x = 1;
				} else {
					this.scale.x = -1;
				}

				this.walkMotion = this.game.add.tween(this).to({
					isoX: this.path[this.pathPosition].x,
					isoY: this.path[this.pathPosition].y
				}, this.speed, Phaser.Easing.Linear.None, true);
				this.walkMotion.onComplete.add(this.advanceTile, this);
			} else {
				this.animations.play("attack", 2);
				this.animations.currentAnim.onComplete.addOnce(this.attackOver, this);
			}
		}
	}, {
		key: 'attackOver',
		value: function attackOver() {
			this.pathFinished.dispatch(this);
		}
	}]);

	return Skeleton;
})(Phaser.Plugin.Isometric.IsoSprite);

exports['default'] = Skeleton;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL0FsZXhFeGFtcGxlR2FtZXMvVG93ZXJEZWZlbnNlL3NyYy9wcmVmYWJzL1NrZWxldG9uLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0lBQXFCLFFBQVE7V0FBUixRQUFROztBQUNqQixVQURTLFFBQVEsQ0FDaEIsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFDO3dCQURWLFFBQVE7O0FBRTNCLDZCQUZtQixRQUFRLDZDQUVyQixJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRTs7QUFFeEMsTUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNyRCxNQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLE1BQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7O0FBRXRELE1BQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7O0FBRXRDLE1BQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQzs7QUFFMUIsTUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztBQUV0RCxNQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUM7O0FBRTdCLE1BQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBQ2hCLE1BQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLE1BQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUM7O0FBRXpDLE1BQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7RUFDeEM7Ozs7Ozs7Ozs7Y0FyQm1CLFFBQVE7O1NBK0JyQixpQkFBQyxJQUFJLEVBQUM7QUFDWixPQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztBQUNqQixPQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQztHQUN0Qjs7O1NBRVUsdUJBQUU7QUFDWixPQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsQ0FBQzs7QUFFdkIsT0FBRyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFDOztBQUV2QyxRQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFDO0FBQzdDLFNBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNqQixNQUFNO0FBQ04sU0FBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDbEI7O0FBRUQsUUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQzdDLFNBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0FBQ3BDLFNBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0tBQ3BDLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDakQsUUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdkQsTUFBTTtBQUNOLFFBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNsQyxRQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEU7R0FDRDs7O1NBRVMsc0JBQUU7QUFDWCxPQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUNqQzs7O1FBNURtQixRQUFRO0dBQVMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUzs7cUJBQWxELFFBQVEiLCJmaWxlIjoiL1VzZXJzL2xlc3NhbmRyby9IYWNraW5nL0pTL0dBTUUvUEhBU0VSL2Jvb2stdHJhdmlzLWZhYXMvQWxleEV4YW1wbGVHYW1lcy9Ub3dlckRlZmVuc2Uvc3JjL3ByZWZhYnMvU2tlbGV0b24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBTa2VsZXRvbiBleHRlbmRzIFBoYXNlci5QbHVnaW4uSXNvbWV0cmljLklzb1Nwcml0ZXtcblx0Y29uc3RydWN0b3IoZ2FtZSwgeCwgeSwgZnJhbWUpe1xuXHRcdHN1cGVyKGdhbWUsIHgsIHksIDAsICdza2VsZXRvbicsIGZyYW1lKTtcblxuXHRcdHRoaXMud2Fsa0FuaW0gPSB0aGlzLmFuaW1hdGlvbnMuYWRkKCd3YWxrJywgWzEwLDExXSk7XG5cdFx0dGhpcy5hbmltYXRpb25zLmFkZCgnaHVydCcsIFsxMl0pO1xuXHRcdHRoaXMuYW5pbWF0aW9ucy5hZGQoJ2F0dGFjaycsIFsxMywxNCwxMywxNCwxNCwxMywxNF0pO1xuXG5cdFx0dGhpcy5hbmltYXRpb25zLnBsYXkoJ3dhbGsnLCAyLCB0cnVlKTtcblxuXHRcdHRoaXMuYW5jaG9yLnNldFRvKC41LCAuNSk7XG5cblx0XHR0aGlzLmdhbWUucGh5c2ljcy5lbmFibGUodGhpcywgUGhhc2VyLlBoeXNpY3MuQVJDQURFKTtcblxuXHRcdHRoaXMucGF0aCwgdGhpcy5wYXRoUG9zaXRpb247XG5cblx0XHR0aGlzLmhlYWx0aCA9IDU7XG5cdFx0dGhpcy53b3J0aCA9IDIwO1xuXHRcdHRoaXMuc3BlZWQgPSAxMDAwICsgTWF0aC5yYW5kb20oKSAqIDMwMDA7XG5cblx0XHR0aGlzLnBhdGhGaW5pc2hlZCA9IG5ldyBQaGFzZXIuU2lnbmFsKCk7XG5cdH1cblxuXHQvKlxuXHRkYW1hZ2UodmFsdWUpe1xuXHRcdHRoaXMuaGVhbHRoIC09IHZhbHVlO1xuXHRcdGlmICh0aGlzLmhlYWx0aCA8PSAwKXtcblx0XHRcdHRoaXMua2lsbCgpO1xuXHRcdH1cblx0fSovXG5cblx0c2V0UGF0aChwYXRoKXtcblx0XHR0aGlzLnBhdGggPSBwYXRoO1xuXHRcdHRoaXMucGF0aFBvc2l0aW9uID0gMDtcblx0fVxuXG5cdGFkdmFuY2VUaWxlKCl7XG5cdFx0dGhpcy5wYXRoUG9zaXRpb24gKz0gMTtcblxuXHRcdGlmKHRoaXMucGF0aFBvc2l0aW9uIDwgdGhpcy5wYXRoLmxlbmd0aCl7XG5cdFx0XHQvL3R3ZWVuXG5cdFx0XHRpZih0aGlzLnBhdGhbdGhpcy5wYXRoUG9zaXRpb25dLnggPiB0aGlzLmlzb1gpe1xuXHRcdFx0XHR0aGlzLnNjYWxlLnggPSAxO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5zY2FsZS54ID0gLTE7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMud2Fsa01vdGlvbiA9IHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcykudG8oe1xuXHRcdFx0XHRcdGlzb1g6IHRoaXMucGF0aFt0aGlzLnBhdGhQb3NpdGlvbl0ueCxcblx0XHRcdFx0XHRpc29ZOiB0aGlzLnBhdGhbdGhpcy5wYXRoUG9zaXRpb25dLnksXG5cdFx0XHRcdH0sXHR0aGlzLnNwZWVkLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLCB0cnVlKTtcblx0XHRcdHRoaXMud2Fsa01vdGlvbi5vbkNvbXBsZXRlLmFkZCh0aGlzLmFkdmFuY2VUaWxlLCB0aGlzKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5hbmltYXRpb25zLnBsYXkoXCJhdHRhY2tcIiwgMik7XG5cdFx0XHR0aGlzLmFuaW1hdGlvbnMuY3VycmVudEFuaW0ub25Db21wbGV0ZS5hZGRPbmNlKHRoaXMuYXR0YWNrT3ZlciwgdGhpcyk7XG5cdFx0fVxuXHR9XG5cblx0YXR0YWNrT3Zlcigpe1xuXHRcdHRoaXMucGF0aEZpbmlzaGVkLmRpc3BhdGNoKHRoaXMpO1xuXHR9XG59XG4iXX0=
},{}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Boot = (function () {
  function Boot() {
    _classCallCheck(this, Boot);
  }

  _createClass(Boot, [{
    key: 'preload',
    value: function preload() {
      this.load.image('preloader', 'assets/images/loading_bar.png');
    }
  }, {
    key: 'create',
    value: function create() {
      this.game.input.maxPointers = 1;
      this.game.state.start('preload');
    }
  }]);

  return Boot;
})();

exports['default'] = Boot;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL0FsZXhFeGFtcGxlR2FtZXMvVG93ZXJEZWZlbnNlL3NyYy9zdGF0ZXMvQm9vdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0lBQXFCLElBQUk7V0FBSixJQUFJOzBCQUFKLElBQUk7OztlQUFKLElBQUk7O1dBRWhCLG1CQUFHO0FBQ1IsVUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLCtCQUErQixDQUFDLENBQUM7S0FDL0Q7OztXQUVLLGtCQUFHO0FBQ1AsVUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztBQUNoQyxVQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDbEM7OztTQVRrQixJQUFJOzs7cUJBQUosSUFBSSIsImZpbGUiOiIvVXNlcnMvbGVzc2FuZHJvL0hhY2tpbmcvSlMvR0FNRS9QSEFTRVIvYm9vay10cmF2aXMtZmFhcy9BbGV4RXhhbXBsZUdhbWVzL1Rvd2VyRGVmZW5zZS9zcmMvc3RhdGVzL0Jvb3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBCb290IHtcclxuXHJcbiAgcHJlbG9hZCgpIHtcclxuICAgIHRoaXMubG9hZC5pbWFnZSgncHJlbG9hZGVyJywgJ2Fzc2V0cy9pbWFnZXMvbG9hZGluZ19iYXIucG5nJyk7XHJcbiAgfVxyXG5cclxuICBjcmVhdGUoKSB7XHJcbiAgICB0aGlzLmdhbWUuaW5wdXQubWF4UG9pbnRlcnMgPSAxO1xyXG4gICAgdGhpcy5nYW1lLnN0YXRlLnN0YXJ0KCdwcmVsb2FkJyk7XHJcbiAgfVxyXG5cclxufSJdfQ==
},{}],6:[function(require,module,exports){
//require other components

'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _prefabsHumanJs = require('../prefabs/Human.js');

var _prefabsHumanJs2 = _interopRequireDefault(_prefabsHumanJs);

var _prefabsSkeletonJs = require('../prefabs/Skeleton.js');

var _prefabsSkeletonJs2 = _interopRequireDefault(_prefabsSkeletonJs);

var _prefabsNumberBoxJs = require('../prefabs/NumberBox.js');

var _prefabsNumberBoxJs2 = _interopRequireDefault(_prefabsNumberBoxJs);

var Enemies = (function () {
	function Enemies(game, parentGroup) {
		_classCallCheck(this, Enemies);

		this.game = game;
		this._enemies = this.game.add.group(parentGroup);
	}

	_createClass(Enemies, [{
		key: 'findNearest',
		value: function findNearest(xc, yc) {
			var lowestChild = null;
			var lowestDistance = 10000000;

			this._enemies.forEach(function (child) {
				var distance = Phaser.Math.distance(xc, yc, child.x, child.y);

				if (!lowestChild) {
					lowestChild = child;
				} else {
					if (distance < lowestDistance) {
						lowestChild = child;
						lowestDistance = distance;
					}
				}
			}, this._enemies, true); // what's true
			return lowestChild;
		}
	}, {
		key: 'add',
		value: function add(obj) {
			this._enemies.add(obj);
		}
	}]);

	return Enemies;
})();

var Game = (function (_Phaser$State) {
	_inherits(Game, _Phaser$State);

	function Game() {
		_classCallCheck(this, Game);

		//object level properties
		_get(Object.getPrototypeOf(Game.prototype), 'constructor', this).call(this);
	}

	_createClass(Game, [{
		key: 'create',
		value: function create() {
			this.playerLife = 10;
			this.humans = 0;
			this.money = 50;
			this.spawnTime = 2000;
			this.mapData = this.game.cache.getJSON('mapdata');
			this.game.physics.startSystem(Phaser.Physics.ARCADE);
			this.game.time.advancedTiming = true;
			this.game.add.sprite(0, 0, "gamebg");
			this.game.plugins.add(new Phaser.Plugin.Isometric(this.game));
			this.game.iso.anchor.setTo(0.5, 0.2);
			this.isoGroup = this.game.add.group();
			this.isoChars = this.game.add.group();
			this.allies = this.game.add.group(this.isoChars);
			this.enemies = new Enemies(this.game, this.isoChars);
			this.arrows = this.game.add.group();
			this.arrows.enableBody = true;
			this.arrows.physicsBodyType = Phaser.Physics.ARCADE;
			this.healthBox = new _prefabsNumberBoxJs2['default'](this.game, 'healthholder', this.playerLife, 10, 10);
			this.scoreBox = new _prefabsNumberBoxJs2['default'](this.game, 'moneyholder', this.money, 100, 10);

			//
			// TEST
			//var _human = new Human(this.game, 200, 200);
			//this.allies.add(_human);
			//var _skeleton = new Skeleton(this.game, 300, 200);
			//this.allies.add(_skeleton);

			this.spawnTiles();

			this.easystar = new EasyStar.js();
			this.easystar.setGrid(this.mapData.tileMap);
			this.easystar.setAcceptableTiles([1]);
			this.boundFound = this.pathFound.bind(this);
			this.easystar.findPath(1, 0, 0, 4, this.boundFound);

			this.cursorPos = new Phaser.Plugin.Isometric.Point3();
			this.nextSpawn = this.game.time.now + this.spawnTime;
		}
	}, {
		key: 'update',
		value: function update() {
			this.game.iso.unproject(this.game.input.activePointer.position, this.cursorPos);
			this.isoGroup.forEach(this.checkTiles, this, false);
			if (this.game.input.activePointer.isDown && this.selectedTile) {
				// how could this.selectedTile be null?
				if (!this.selectedTile.occupant && this.selectedTile.buyable) {
					if (this.money >= 50) {
						var human = new _prefabsHumanJs2['default'](this.game, this.selectedTile.isoX, this.selectedTile.isoY, this.enemies, this.arrows);
						this.allies.add(human);
						this.selectedTile.occupant = human;
						this.money -= 50;
						this.scoreBox.setValue(this.money);
						this.humans += 1;
						if (this.humans == 16) {
							this.game.state.start('victory');
						}
					}
				}
			}

			this.game.physics.arcade.overlap(this.arrows, this.enemies._enemies, this.arrowHitEnemy, null, this);

			if (this.game.time.now > this.nextSpawn) {
				this.spawnEnemy();
				this.nextSpawn = this.game.time.now + this.spawnTime + Math.random() * this.spawnTime;
			}

			this.easystar.calculate();
			this.game.iso.simpleSort(this.enemies._enemies);
		}
	}, {
		key: 'spawnEnemy',
		value: function spawnEnemy() {
			var skel = new _prefabsSkeletonJs2['default'](this.game, this.convertedPath[0].x, this.convertedPath[0].y);
			skel.setPath(this.convertedPath);
			skel.advanceTile();
			skel.pathFinished.addOnce(this.enemyAtGoal, this);
			this.enemies.add(skel);
		}
	}, {
		key: 'enemyAtGoal',
		value: function enemyAtGoal(enemy) {
			enemy.kill();
			this.playerLife -= 1;
			this.healthBox.setValue(this.playerLife);
			if (this.playerLife <= 0) {
				this.gameOver();
			}
		}
	}, {
		key: 'gameOver',
		value: function gameOver() {
			this.game.state.start('gameover');
		}
	}, {
		key: 'arrowHitEnemy',
		value: function arrowHitEnemy(arrow, enemy) {
			arrow.kill();
			enemy.damage(1);
			if (!enemy.alive) {
				this.money += enemy.worth;
				this.scoreBox.setValue(this.money);
				this.spawnTime = Math.max(0, this.spawnTime - 100);
			}
		}
	}, {
		key: 'checkTiles',
		value: function checkTiles(tile) {
			var inBounds = tile.isoBounds.containsXY(this.cursorPos.x, this.cursorPos.y);

			if (!tile.selected && inBounds) {
				tile.selected = true;
				tile.tint = 0x86bfda;
				this.game.add.tween(tile).to({ isoZ: 4 }, 200, Phaser.Easing.Quadratic.InOut, true);
				this.selectedTile = tile;
			} else if (tile.selected && !inBounds) {
				tile.selected = false;
				tile.tint = 0xffffff;
				this.game.add.tween(tile).to({ isoZ: 0 }, 200, Phaser.Easing.Quadratic.InOut, true);
			}
		}
	}, {
		key: 'spawnTiles',
		value: function spawnTiles() {
			var size = 55;
			var mapWidth = this.mapData.tileMap[0].length - 1;
			var mapHeight = this.mapData.tileMap.length - 1;
			this.gameTiles = [];

			var i = 0,
			    tile;
			for (var y = 0; y <= mapHeight; y++) {

				this.gameTiles[y] = [];

				for (var x = 0; x <= mapWidth; x++) {
					var tileNumber = this.mapData.tileMap[y][x];
					var tileName = this.mapData.tileNames[tileNumber];
					tile = this.game.add.isoSprite(x * size, y * size, 0, tileName, 0, this.isoGroup);
					tile.anchor.set(0.5, 0);
					tile.buyable = tileNumber == 0 ? true : false;
					this.gameTiles[y][x] = tile;
				}
			}
		}
	}, {
		key: 'pathFound',
		value: function pathFound(path) {
			console.log(path);
			if (path != null) {
				this.convertedPath = [];
				var curPoint;
				for (var i = 0; i < path.length; i++) {
					curPoint = this.gameTiles[path[i].y][path[i].x];
					this.convertedPath.push({ x: curPoint.isoX, y: curPoint.isoY });
				}
			}
		}
	}]);

	return Game;
})(Phaser.State);

exports['default'] = Game;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../prefabs/Human.js":2,"../prefabs/NumberBox.js":3,"../prefabs/Skeleton.js":4}],7:[function(require,module,exports){

//require other components

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GameOver = (function (_Phaser$State) {
  _inherits(GameOver, _Phaser$State);

  function GameOver() {
    _classCallCheck(this, GameOver);

    //object level properties
    _get(Object.getPrototypeOf(GameOver.prototype), "constructor", this).call(this);
  }

  _createClass(GameOver, [{
    key: "create",
    value: function create() {
      this.add.text(this.game.width / 2, this.game.height / 2, "GAME OVER (press space to play again)", { font: "30px Arial", align: "center", fill: "#fff" });
    }
  }, {
    key: "update",
    value: function update() {
      if (this.game.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR)) {
        this.game.state.start('game');
      }
    }
  }]);

  return GameOver;
})(Phaser.State);

exports["default"] = GameOver;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL0FsZXhFeGFtcGxlR2FtZXMvVG93ZXJEZWZlbnNlL3NyYy9zdGF0ZXMvR2FtZU92ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFHcUIsUUFBUTtZQUFSLFFBQVE7O0FBRWhCLFdBRlEsUUFBUSxHQUViOzBCQUZLLFFBQVE7OztBQUl6QiwrQkFKaUIsUUFBUSw2Q0FJakI7R0FDVDs7ZUFMa0IsUUFBUTs7V0FPckIsa0JBQUc7QUFDUixVQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLHVDQUF1QyxFQUFFLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0tBQ3pKOzs7V0FFSyxrQkFBRztBQUNSLFVBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FDakMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUMzQixZQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7T0FDOUI7S0FDRDs7O1NBaEJrQixRQUFRO0dBQVMsTUFBTSxDQUFDLEtBQUs7O3FCQUE3QixRQUFRIiwiZmlsZSI6Ii9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL0FsZXhFeGFtcGxlR2FtZXMvVG93ZXJEZWZlbnNlL3NyYy9zdGF0ZXMvR2FtZU92ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8vcmVxdWlyZSBvdGhlciBjb21wb25lbnRzXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVPdmVyIGV4dGVuZHMgUGhhc2VyLlN0YXRlIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvL29iamVjdCBsZXZlbCBwcm9wZXJ0aWVzXG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGNyZWF0ZSgpIHtcblx0ICB0aGlzLmFkZC50ZXh0KHRoaXMuZ2FtZS53aWR0aCAvIDIsIHRoaXMuZ2FtZS5oZWlnaHQgLyAyLCBcIkdBTUUgT1ZFUiAocHJlc3Mgc3BhY2UgdG8gcGxheSBhZ2FpbilcIiwgeyBmb250OiBcIjMwcHggQXJpYWxcIiwgYWxpZ246IFwiY2VudGVyXCIsIGZpbGw6IFwiI2ZmZlwiIH0pO1xuICB9XG5cbiAgdXBkYXRlKCkge1xuXHQgIGlmKHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5pc0Rvd24oXG5cdFx0ICBQaGFzZXIuS2V5Ym9hcmQuU1BBQ0VCQVIpKSB7XG5cdFx0ICB0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ2dhbWUnKTtcblx0ICB9XG4gIH1cblxuXG59XG4iXX0=
},{}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Menu = (function () {
  function Menu() {
    _classCallCheck(this, Menu);
  }

  _createClass(Menu, [{
    key: "preload",
    value: function preload() {}
  }, {
    key: "create",
    value: function create() {
      this.game.add.sprite(0, 0, "gamebg");
      this.title = this.game.add.sprite(this.game.width / 2, 200, "title");
      this.title.anchor.setTo(.5, .5);
      this.btnPlay = this.game.add.sprite(this.game.width / 2, 300, "btnBegin");
      this.btnPlay.anchor.setTo(.5, .5);
      this.btnPlay.alpha = 0;

      this.game.add.tween(this.btnPlay).to({ alpha: 1 }, 1000, Phaser.Easing.Quadratic.InOut, true, 0, 1000, true);

      this.game.input.onDown.addOnce(this.switchState, this);
    }
  }, {
    key: "switchState",
    value: function switchState() {
      this.game.state.start("game");
    }
  }]);

  return Menu;
})();

exports["default"] = Menu;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL0FsZXhFeGFtcGxlR2FtZXMvVG93ZXJEZWZlbnNlL3NyYy9zdGF0ZXMvTWVudS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0lBQXFCLElBQUk7V0FBSixJQUFJOzBCQUFKLElBQUk7OztlQUFKLElBQUk7O1dBRWhCLG1CQUFHLEVBRVQ7OztXQUVLLGtCQUFHO0FBQ1IsVUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDcEMsVUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUMsQ0FBQyxFQUFDLEdBQUcsRUFBQyxPQUFPLENBQUMsQ0FBQztBQUNqRSxVQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hDLFVBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFDLENBQUMsRUFBQyxHQUFHLEVBQUMsVUFBVSxDQUFDLENBQUM7QUFDdEUsVUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsQyxVQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7O0FBRXZCLFVBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7O0FBRTlHLFVBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUN2RDs7O1dBRVUsdUJBQUc7QUFDYixVQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDOUI7OztTQXJCa0IsSUFBSTs7O3FCQUFKLElBQUkiLCJmaWxlIjoiL1VzZXJzL2xlc3NhbmRyby9IYWNraW5nL0pTL0dBTUUvUEhBU0VSL2Jvb2stdHJhdmlzLWZhYXMvQWxleEV4YW1wbGVHYW1lcy9Ub3dlckRlZmVuc2Uvc3JjL3N0YXRlcy9NZW51LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVudSB7XG5cbiAgcHJlbG9hZCgpIHtcblxuICB9XG5cbiAgY3JlYXRlKCkge1xuICBcdHRoaXMuZ2FtZS5hZGQuc3ByaXRlKDAsMCwgXCJnYW1lYmdcIik7XG4gIFx0dGhpcy50aXRsZSA9IHRoaXMuZ2FtZS5hZGQuc3ByaXRlKHRoaXMuZ2FtZS53aWR0aC8yLDIwMCxcInRpdGxlXCIpO1xuICBcdHRoaXMudGl0bGUuYW5jaG9yLnNldFRvKC41LCAuNSk7XG4gIFx0dGhpcy5idG5QbGF5ID0gdGhpcy5nYW1lLmFkZC5zcHJpdGUodGhpcy5nYW1lLndpZHRoLzIsMzAwLFwiYnRuQmVnaW5cIik7XG4gIFx0dGhpcy5idG5QbGF5LmFuY2hvci5zZXRUbyguNSwgLjUpO1xuICBcdHRoaXMuYnRuUGxheS5hbHBoYSA9IDA7XG5cbiAgXHR0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXMuYnRuUGxheSkudG8oIHsgYWxwaGE6IDEgfSwgMTAwMCwgUGhhc2VyLkVhc2luZy5RdWFkcmF0aWMuSW5PdXQsIHRydWUsIDAsIDEwMDAsIHRydWUpO1xuXG4gIFx0dGhpcy5nYW1lLmlucHV0Lm9uRG93bi5hZGRPbmNlKHRoaXMuc3dpdGNoU3RhdGUsIHRoaXMpO1xuICB9XG5cbiAgc3dpdGNoU3RhdGUoKSB7XG4gIFx0dGhpcy5nYW1lLnN0YXRlLnN0YXJ0KFwiZ2FtZVwiKTtcbiAgfVxuXG59XG4iXX0=
},{}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Preload = (function () {
  function Preload() {
    _classCallCheck(this, Preload);

    this.asset = null;
    this.ready = false;
  }

  _createClass(Preload, [{
    key: 'preload',
    value: function preload() {
      this.load.image('loading_bg', 'assets/images/loading_bg.jpg');
    }
  }, {
    key: 'create',
    value: function create() {

      //background for game
      this.add.sprite(0, 0, "loading_bg");

      this.asset = this.add.sprite(this.game.width / 2, this.game.height / 2, 'preloader');
      this.asset.anchor.setTo(0.5, 0.5);

      this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
      this.load.setPreloadSprite(this.asset);

      //do all your loading here
      this.load.pack('level1', 'assets/assetPack.json', null, this);

      //staaaart load
      this.load.start();
    }
  }, {
    key: 'update',
    value: function update() {

      if (this.ready) {
        this.game.state.start('menu');
      }
    }
  }, {
    key: 'onLoadComplete',
    value: function onLoadComplete() {
      this.ready = true;
    }
  }]);

  return Preload;
})();

exports['default'] = Preload;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL0FsZXhFeGFtcGxlR2FtZXMvVG93ZXJEZWZlbnNlL3NyYy9zdGF0ZXMvUHJlbG9hZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0lBQXFCLE9BQU87QUFFZixXQUZRLE9BQU8sR0FFWjswQkFGSyxPQUFPOztBQUd4QixRQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztBQUNsQixRQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztHQUNwQjs7ZUFMa0IsT0FBTzs7V0FPbkIsbUJBQUc7QUFDUixVQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsOEJBQThCLENBQUMsQ0FBQztLQUMvRDs7O1dBRUssa0JBQUc7OztBQUdQLFVBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUM7O0FBRW5DLFVBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUNoRixVQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDOztBQUVsQyxVQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM1RCxVQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzs7O0FBR3ZDLFVBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSx1QkFBdUIsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7OztBQUk5RCxVQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0tBQ25COzs7V0FFSyxrQkFBRzs7QUFFUCxVQUFHLElBQUksQ0FBQyxLQUFLLEVBQUU7QUFDYixZQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7T0FDL0I7S0FFRjs7O1dBRWEsMEJBQUc7QUFDZixVQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztLQUNuQjs7O1NBeENrQixPQUFPOzs7cUJBQVAsT0FBTyIsImZpbGUiOiIvVXNlcnMvbGVzc2FuZHJvL0hhY2tpbmcvSlMvR0FNRS9QSEFTRVIvYm9vay10cmF2aXMtZmFhcy9BbGV4RXhhbXBsZUdhbWVzL1Rvd2VyRGVmZW5zZS9zcmMvc3RhdGVzL1ByZWxvYWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBQcmVsb2FkIHtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmFzc2V0ID0gbnVsbDtcclxuICAgIHRoaXMucmVhZHkgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIHByZWxvYWQoKSB7XHJcbiAgICB0aGlzLmxvYWQuaW1hZ2UoJ2xvYWRpbmdfYmcnLCAnYXNzZXRzL2ltYWdlcy9sb2FkaW5nX2JnLmpwZycpO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlKCkge1xyXG5cclxuICAgIC8vYmFja2dyb3VuZCBmb3IgZ2FtZVxyXG4gICAgdGhpcy5hZGQuc3ByaXRlKDAsMCwgXCJsb2FkaW5nX2JnXCIpO1xyXG5cclxuICAgIHRoaXMuYXNzZXQgPSB0aGlzLmFkZC5zcHJpdGUodGhpcy5nYW1lLndpZHRoLzIsdGhpcy5nYW1lLmhlaWdodC8yLCAncHJlbG9hZGVyJyk7XHJcbiAgICB0aGlzLmFzc2V0LmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XHJcblxyXG4gICAgdGhpcy5sb2FkLm9uTG9hZENvbXBsZXRlLmFkZE9uY2UodGhpcy5vbkxvYWRDb21wbGV0ZSwgdGhpcyk7XHJcbiAgICB0aGlzLmxvYWQuc2V0UHJlbG9hZFNwcml0ZSh0aGlzLmFzc2V0KTtcclxuXHJcbiAgICAvL2RvIGFsbCB5b3VyIGxvYWRpbmcgaGVyZVxyXG4gICAgdGhpcy5sb2FkLnBhY2soJ2xldmVsMScsICdhc3NldHMvYXNzZXRQYWNrLmpzb24nLCBudWxsLCB0aGlzKTtcclxuXHJcblxyXG4gICAgLy9zdGFhYWFydCBsb2FkXHJcbiAgICB0aGlzLmxvYWQuc3RhcnQoKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZSgpIHtcclxuXHJcbiAgICBpZih0aGlzLnJlYWR5KSB7XHJcbiAgICAgIHRoaXMuZ2FtZS5zdGF0ZS5zdGFydCgnbWVudScpO1xyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG4gIG9uTG9hZENvbXBsZXRlKCkge1xyXG4gICAgdGhpcy5yZWFkeSA9IHRydWU7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=
},{}],10:[function(require,module,exports){

//require other components

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GameOver = (function (_Phaser$State) {
  _inherits(GameOver, _Phaser$State);

  function GameOver() {
    _classCallCheck(this, GameOver);

    //object level properties
    _get(Object.getPrototypeOf(GameOver.prototype), "constructor", this).call(this);
  }

  _createClass(GameOver, [{
    key: "create",
    value: function create() {
      this.add.text(this.game.width / 2, this.game.height / 2, "YOU WON THE GAME!! (press space to play again)", { font: "30px Arial", align: "center", fill: "#fff" });
    }
  }, {
    key: "update",
    value: function update() {
      if (this.game.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR)) {
        this.game.state.start('game');
      }
    }
  }]);

  return GameOver;
})(Phaser.State);

exports["default"] = GameOver;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL0FsZXhFeGFtcGxlR2FtZXMvVG93ZXJEZWZlbnNlL3NyYy9zdGF0ZXMvVmljdG9yeS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztJQUdxQixRQUFRO1lBQVIsUUFBUTs7QUFFaEIsV0FGUSxRQUFRLEdBRWI7MEJBRkssUUFBUTs7O0FBSXpCLCtCQUppQixRQUFRLDZDQUlqQjtHQUNUOztlQUxrQixRQUFROztXQU9yQixrQkFBRztBQUNSLFVBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsZ0RBQWdELEVBQUUsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7S0FDbEs7OztXQUVLLGtCQUFHO0FBQ1IsVUFBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUNqQyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFO0FBQzNCLFlBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztPQUM5QjtLQUNEOzs7U0FoQmtCLFFBQVE7R0FBUyxNQUFNLENBQUMsS0FBSzs7cUJBQTdCLFFBQVEiLCJmaWxlIjoiL1VzZXJzL2xlc3NhbmRyby9IYWNraW5nL0pTL0dBTUUvUEhBU0VSL2Jvb2stdHJhdmlzLWZhYXMvQWxleEV4YW1wbGVHYW1lcy9Ub3dlckRlZmVuc2Uvc3JjL3N0YXRlcy9WaWN0b3J5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vL3JlcXVpcmUgb3RoZXIgY29tcG9uZW50c1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lT3ZlciBleHRlbmRzIFBoYXNlci5TdGF0ZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy9vYmplY3QgbGV2ZWwgcHJvcGVydGllc1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBjcmVhdGUoKSB7XG5cdCAgdGhpcy5hZGQudGV4dCh0aGlzLmdhbWUud2lkdGggLyAyLCB0aGlzLmdhbWUuaGVpZ2h0IC8gMiwgXCJZT1UgV09OIFRIRSBHQU1FISEgKHByZXNzIHNwYWNlIHRvIHBsYXkgYWdhaW4pXCIsIHsgZm9udDogXCIzMHB4IEFyaWFsXCIsIGFsaWduOiBcImNlbnRlclwiLCBmaWxsOiBcIiNmZmZcIiB9KTtcbiAgfVxuXG4gIHVwZGF0ZSgpIHtcblx0ICBpZih0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuaXNEb3duKFxuXHRcdCAgUGhhc2VyLktleWJvYXJkLlNQQUNFQkFSKSkge1xuXHRcdCAgdGhpcy5nYW1lLnN0YXRlLnN0YXJ0KCdnYW1lJyk7XG5cdCAgfVxuICB9XG5cblxufVxuIl19
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
