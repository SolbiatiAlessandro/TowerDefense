(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _statesBootJs = require("./states/Boot.js");

var _statesBootJs2 = _interopRequireDefault(_statesBootJs);

var _statesPreloadJs = require("./states/Preload.js");

var _statesPreloadJs2 = _interopRequireDefault(_statesPreloadJs);

var _statesGameJs = require("./states/Game.js");

var _statesGameJs2 = _interopRequireDefault(_statesGameJs);

var _statesGameOverJs = require("./states/GameOver.js");

var _statesGameOverJs2 = _interopRequireDefault(_statesGameOverJs);

var _statesVictoryJs = require("./states/Victory.js");

var _statesVictoryJs2 = _interopRequireDefault(_statesVictoryJs);

var game;

window.onload = function () {
  game = new Phaser.Game(800, 600, Phaser.AUTO, 'game');
  game.state.add('boot', _statesBootJs2["default"]);
  game.state.add('preload', _statesPreloadJs2["default"]);
  game.state.add('game', _statesGameJs2["default"]);
  game.state.add('gameover', _statesGameOverJs2["default"]);
  game.state.add('victory', _statesVictoryJs2["default"]);
  game.state.start('boot');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvYXBwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7NEJBRWlCLGtCQUFrQjs7OzsrQkFDZixxQkFBcUI7Ozs7NEJBQ3hCLGtCQUFrQjs7OztnQ0FDZCxzQkFBc0I7Ozs7K0JBQ3ZCLHFCQUFxQjs7OztBQU56QyxJQUFJLElBQUksQ0FBQzs7QUFTVCxNQUFNLENBQUMsTUFBTSxHQUFHLFlBQVk7QUFDMUIsTUFBSSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDdEQsTUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSw0QkFBTyxDQUFDO0FBQzdCLE1BQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsK0JBQVUsQ0FBQztBQUNuQyxNQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLDRCQUFPLENBQUM7QUFDN0IsTUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBVSxnQ0FBVyxDQUFDO0FBQ3JDLE1BQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsK0JBQVUsQ0FBQztBQUNuQyxNQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUMxQixDQUFDIiwiZmlsZSI6Ii9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGdhbWU7XHJcblxyXG5pbXBvcnQgQm9vdCBmcm9tIFwiLi9zdGF0ZXMvQm9vdC5qc1wiO1xyXG5pbXBvcnQgUHJlbG9hZCBmcm9tIFwiLi9zdGF0ZXMvUHJlbG9hZC5qc1wiO1xyXG5pbXBvcnQgR2FtZSBmcm9tIFwiLi9zdGF0ZXMvR2FtZS5qc1wiO1xyXG5pbXBvcnQgR2FtZU92ZXIgZnJvbSBcIi4vc3RhdGVzL0dhbWVPdmVyLmpzXCI7XHJcbmltcG9ydCBWaWN0b3J5IGZyb20gXCIuL3N0YXRlcy9WaWN0b3J5LmpzXCI7XHJcblxyXG5cclxud2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICBnYW1lID0gbmV3IFBoYXNlci5HYW1lKDgwMCwgNjAwLCBQaGFzZXIuQVVUTywgJ2dhbWUnKTtcclxuICBnYW1lLnN0YXRlLmFkZCgnYm9vdCcsIEJvb3QpO1xyXG4gIGdhbWUuc3RhdGUuYWRkKCdwcmVsb2FkJywgUHJlbG9hZCk7XHJcbiAgZ2FtZS5zdGF0ZS5hZGQoJ2dhbWUnLCBHYW1lKTtcclxuICBnYW1lLnN0YXRlLmFkZCgnZ2FtZW92ZXInLCBHYW1lT3Zlcik7XHJcbiAgZ2FtZS5zdGF0ZS5hZGQoJ3ZpY3RvcnknLCBWaWN0b3J5KTtcclxuICBnYW1lLnN0YXRlLnN0YXJ0KCdib290Jyk7XHJcbn07XHJcbiJdfQ==
},{"./states/Boot.js":5,"./states/Game.js":6,"./states/GameOver.js":7,"./states/Preload.js":8,"./states/Victory.js":9}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Human = (function (_Phaser$Plugin$Isometric$IsoSprite) {
	_inherits(Human, _Phaser$Plugin$Isometric$IsoSprite);

	function Human(game, x, y, enemies, arrows) {
		_classCallCheck(this, Human);

		_get(Object.getPrototypeOf(Human.prototype), 'constructor', this).call(this, game, x, y, 0, 'human', 0); // what are this params? the second is a iso

		this.animations.add('idle', [10, 11]);
		this.animations.play('idle', 2, true);

		this.anchor.setTo(.5, .5);
		this.enemies = enemies;
		this.arrows = arrows;

		this.shotInterval = 1000;
		this.shotTime = this.game.time.now + this.shotInterval;
	}

	_createClass(Human, [{
		key: 'update',
		value: function update() {
			if (this.game.time.now > this.shotTime) {
				this.target = this.enemies.findNearest(this.x, this.y);

				if (this.target) {
					var arrow = this.arrows.getFirstDead();
					if (!arrow) arrow = this.arrows.create(0, 0, 'arrow');
					arrow.revive();
					arrow.x = this.x;
					arrow.y = this.y;
					arrow.lifespan = 4000;

					arrow.rotation = this.game.physics.arcade.moveToObject(arrow, this.target, 120);

					this.shotTime = this.game.time.now + this.shotInterval;
				}
			}
		}
	}]);

	return Human;
})(Phaser.Plugin.Isometric.IsoSprite);

exports['default'] = Human;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvcHJlZmFicy9IdW1hbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztJQUFxQixLQUFLO1dBQUwsS0FBSzs7QUFFZCxVQUZTLEtBQUssQ0FFYixJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFDO3dCQUZwQixLQUFLOztBQUd4Qiw2QkFIbUIsS0FBSyw2Q0FHbEIsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUU7O0FBRWpDLE1BQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3RDLE1BQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7O0FBRXRDLE1BQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUMxQixNQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztBQUN2QixNQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQzs7QUFFckIsTUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7QUFDekIsTUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztFQUN2RDs7Y0FkbUIsS0FBSzs7U0FnQm5CLGtCQUFFO0FBQ1AsT0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBQztBQUNyQyxRQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDOztBQUV2RCxRQUFHLElBQUksQ0FBQyxNQUFNLEVBQUM7QUFDZCxTQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQ3ZDLFNBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDckQsVUFBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ2YsVUFBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ2pCLFVBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNqQixVQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQzs7QUFFdEIsVUFBSyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUNyRCxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQzs7QUFFMUIsU0FBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztLQUN2RDtJQUNEO0dBQ0Q7OztRQWxDbUIsS0FBSztHQUFTLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVM7O3FCQUEvQyxLQUFLIiwiZmlsZSI6Ii9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvcHJlZmFicy9IdW1hbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIEh1bWFuIGV4dGVuZHMgUGhhc2VyLlBsdWdpbi5Jc29tZXRyaWMuSXNvU3ByaXRlIHtcblxuXHRjb25zdHJ1Y3RvcihnYW1lLCB4LCB5LCBlbmVtaWVzLCBhcnJvd3Mpe1xuXHRcdHN1cGVyKGdhbWUsIHgsIHksIDAsICdodW1hbicsIDApOyAvLyB3aGF0IGFyZSB0aGlzIHBhcmFtcz8gdGhlIHNlY29uZCBpcyBhIGlzb1xuXG5cdFx0dGhpcy5hbmltYXRpb25zLmFkZCgnaWRsZScsIFsxMCwgMTFdKTtcblx0XHR0aGlzLmFuaW1hdGlvbnMucGxheSgnaWRsZScsIDIsIHRydWUpO1xuXG5cdFx0dGhpcy5hbmNob3Iuc2V0VG8oLjUsIC41KTtcblx0XHR0aGlzLmVuZW1pZXMgPSBlbmVtaWVzO1xuXHRcdHRoaXMuYXJyb3dzID0gYXJyb3dzO1xuXG5cdFx0dGhpcy5zaG90SW50ZXJ2YWwgPSAxMDAwO1xuXHRcdHRoaXMuc2hvdFRpbWUgPSB0aGlzLmdhbWUudGltZS5ub3cgKyB0aGlzLnNob3RJbnRlcnZhbDtcblx0fVxuXG5cdHVwZGF0ZSgpe1xuXHRcdGlmKHRoaXMuZ2FtZS50aW1lLm5vdyA+IHRoaXMuc2hvdFRpbWUpe1xuXHRcdFx0dGhpcy50YXJnZXQgPSB0aGlzLmVuZW1pZXMuZmluZE5lYXJlc3QodGhpcy54LCB0aGlzLnkpO1xuXG5cdFx0XHRpZih0aGlzLnRhcmdldCl7XG5cdFx0XHRcdHZhciBhcnJvdyA9IHRoaXMuYXJyb3dzLmdldEZpcnN0RGVhZCgpO1xuXHRcdFx0XHRpZighYXJyb3cpIGFycm93ID0gdGhpcy5hcnJvd3MuY3JlYXRlKDAsIDAsICdhcnJvdycpO1xuXHRcdFx0XHRhcnJvdy5yZXZpdmUoKTtcblx0XHRcdFx0YXJyb3cueCA9IHRoaXMueDtcblx0XHRcdFx0YXJyb3cueSA9IHRoaXMueTtcblx0XHRcdFx0YXJyb3cubGlmZXNwYW4gPSA0MDAwO1xuXG5cdFx0XHRcdGFycm93LnJvdGF0aW9uID0gdGhpcy5nYW1lLnBoeXNpY3MuYXJjYWRlLm1vdmVUb09iamVjdChcblx0XHRcdFx0XHRhcnJvdywgdGhpcy50YXJnZXQsIDEyMCk7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLnNob3RUaW1lID0gdGhpcy5nYW1lLnRpbWUubm93ICsgdGhpcy5zaG90SW50ZXJ2YWw7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG4iXX0=
},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NumberBox = (function (_Phaser$Group) {
	_inherits(NumberBox, _Phaser$Group);

	function NumberBox(game, bgasset, val, x, y, parent) {
		_classCallCheck(this, NumberBox);

		_get(Object.getPrototypeOf(NumberBox.prototype), "constructor", this).call(this, game, parent);
		this.create(x, y, bgasset);
		var style = {
			font: "30px arial",
			align: "center",
			fill: "#fff"
		};
		this.txtValue = new Phaser.Text(this.game, x + 35, y + 45, val.toString(), style);
		this.txtValue.anchor.setTo(.5, .5);
		this.add(this.txtValue);
	}

	_createClass(NumberBox, [{
		key: "setValue",
		value: function setValue(val) {
			this.txtValue.text = val.toString();
		}
	}]);

	return NumberBox;
})(Phaser.Group);

exports["default"] = NumberBox;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvcHJlZmFicy9OdW1iZXJCb3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7SUFBcUIsU0FBUztXQUFULFNBQVM7O0FBQ2xCLFVBRFMsU0FBUyxDQUNqQixJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBQzt3QkFEekIsU0FBUzs7QUFFNUIsNkJBRm1CLFNBQVMsNkNBRXRCLElBQUksRUFBRSxNQUFNLEVBQUU7QUFDcEIsTUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzNCLE1BQUksS0FBSyxHQUFHO0FBQ1gsT0FBSSxFQUFFLFlBQVk7QUFDbEIsUUFBSyxFQUFFLFFBQVE7QUFDZixPQUFJLEVBQUUsTUFBTTtHQUNaLENBQUM7QUFDRixNQUFJLENBQUMsUUFBUSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FDOUIsSUFBSSxDQUFDLElBQUksRUFDVCxDQUFDLEdBQUcsRUFBRSxFQUNOLENBQUMsR0FBRyxFQUFFLEVBQ04sR0FBRyxDQUFDLFFBQVEsRUFBRSxFQUNkLEtBQUssQ0FDTCxDQUFDO0FBQ0YsTUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBQyxFQUFFLENBQUMsQ0FBQztBQUNsQyxNQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztFQUN4Qjs7Y0FsQm1CLFNBQVM7O1NBb0JyQixrQkFBQyxHQUFHLEVBQUM7QUFDWixPQUFJLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7R0FDcEM7OztRQXRCbUIsU0FBUztHQUFTLE1BQU0sQ0FBQyxLQUFLOztxQkFBOUIsU0FBUyIsImZpbGUiOiIvVXNlcnMvbGVzc2FuZHJvL0hhY2tpbmcvSlMvR0FNRS9QSEFTRVIvYm9vay10cmF2aXMtZmFhcy9Ub3dlckRlZmVuc2Uvc3JjL3ByZWZhYnMvTnVtYmVyQm94LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTnVtYmVyQm94IGV4dGVuZHMgUGhhc2VyLkdyb3VwIHtcblx0Y29uc3RydWN0b3IoZ2FtZSwgYmdhc3NldCwgdmFsLCB4LCB5LCBwYXJlbnQpe1xuXHRcdHN1cGVyKGdhbWUsIHBhcmVudCk7XG5cdFx0dGhpcy5jcmVhdGUoeCwgeSwgYmdhc3NldCk7XG5cdFx0dmFyIHN0eWxlID0ge1xuXHRcdFx0Zm9udDogXCIzMHB4IGFyaWFsXCIsXG5cdFx0XHRhbGlnbjogXCJjZW50ZXJcIixcblx0XHRcdGZpbGw6IFwiI2ZmZlwiXG5cdFx0fTtcblx0XHR0aGlzLnR4dFZhbHVlID0gbmV3IFBoYXNlci5UZXh0KFxuXHRcdFx0dGhpcy5nYW1lLFxuXHRcdFx0eCArIDM1LFxuXHRcdFx0eSArIDQ1LFxuXHRcdFx0dmFsLnRvU3RyaW5nKCksXG5cdFx0XHRzdHlsZVxuXHRcdCk7XG5cdFx0dGhpcy50eHRWYWx1ZS5hbmNob3Iuc2V0VG8oLjUsLjUpO1xuXHRcdHRoaXMuYWRkKHRoaXMudHh0VmFsdWUpO1xuXHR9XG5cblx0c2V0VmFsdWUodmFsKXtcblx0XHR0aGlzLnR4dFZhbHVlLnRleHQgPSB2YWwudG9TdHJpbmcoKTtcblx0fVxufVxuIl19
},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Skeleton = (function (_Phaser$Plugin$Isometric$IsoSprite) {
	_inherits(Skeleton, _Phaser$Plugin$Isometric$IsoSprite);

	function Skeleton(game, x, y, frame) {
		_classCallCheck(this, Skeleton);

		_get(Object.getPrototypeOf(Skeleton.prototype), 'constructor', this).call(this, game, x, y, 0, 'skeleton', frame);

		this.walkAnim = this.animations.add('walk', [10, 11]);
		this.animations.add('hurt', [12]);
		this.animations.add('attack', [13, 14, 13, 14, 14, 13, 14]);

		this.animations.play('walk', 2, true);

		this.anchor.setTo(.5, .5);

		this.game.physics.enable(this, Phaser.Physics.ARCADE);

		this.path, this.pathPosition;

		this.health = 5;
		this.worth = 20;
		this.speed = 1000 + Math.random() * 3000;

		this.pathFinished = new Phaser.Signal();
	}

	/*
 damage(value){
 	this.health -= value;
 	if (this.health <= 0){
 		this.kill();
 	}
 }*/

	_createClass(Skeleton, [{
		key: 'setPath',
		value: function setPath(path) {
			this.path = path;
			this.pathPosition = 0;
		}
	}, {
		key: 'advanceTile',
		value: function advanceTile() {
			this.pathPosition += 1;

			if (this.pathPosition < this.path.length) {
				//tween
				if (this.path[this.pathPosition].x > this.isoX) {
					this.scale.x = 1;
				} else {
					this.scale.x = -1;
				}

				this.walkMotion = this.game.add.tween(this).to({
					isoX: this.path[this.pathPosition].x,
					isoY: this.path[this.pathPosition].y
				}, this.speed, Phaser.Easing.Linear.None, true);
				this.walkMotion.onComplete.add(this.advanceTile, this);
			} else {
				this.animations.play("attack", 2);
				this.animations.currentAnim.onComplete.addOnce(this.attackOver, this);
			}
		}
	}, {
		key: 'attackOver',
		value: function attackOver() {
			this.pathFinished.dispatch(this);
		}
	}]);

	return Skeleton;
})(Phaser.Plugin.Isometric.IsoSprite);

exports['default'] = Skeleton;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvcHJlZmFicy9Ta2VsZXRvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztJQUFxQixRQUFRO1dBQVIsUUFBUTs7QUFDakIsVUFEUyxRQUFRLENBQ2hCLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBQzt3QkFEVixRQUFROztBQUUzQiw2QkFGbUIsUUFBUSw2Q0FFckIsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUU7O0FBRXhDLE1BQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDckQsTUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNsQyxNQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDOztBQUV0RCxNQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDOztBQUV0QyxNQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7O0FBRTFCLE1BQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQzs7QUFFdEQsTUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDOztBQUU3QixNQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztBQUNoQixNQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUNoQixNQUFJLENBQUMsS0FBSyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDOztBQUV6QyxNQUFJLENBQUMsWUFBWSxHQUFHLElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0VBQ3hDOzs7Ozs7Ozs7O2NBckJtQixRQUFROztTQStCckIsaUJBQUMsSUFBSSxFQUFDO0FBQ1osT0FBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7QUFDakIsT0FBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUM7R0FDdEI7OztTQUVVLHVCQUFFO0FBQ1osT0FBSSxDQUFDLFlBQVksSUFBSSxDQUFDLENBQUM7O0FBRXZCLE9BQUcsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBQzs7QUFFdkMsUUFBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBQztBQUM3QyxTQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDakIsTUFBTTtBQUNOLFNBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ2xCOztBQUVELFFBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUM3QyxTQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztBQUNwQyxTQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztLQUNwQyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2pELFFBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3ZELE1BQU07QUFDTixRQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbEMsUUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3RFO0dBQ0Q7OztTQUVTLHNCQUFFO0FBQ1gsT0FBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDakM7OztRQTVEbUIsUUFBUTtHQUFTLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVM7O3FCQUFsRCxRQUFRIiwiZmlsZSI6Ii9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvcHJlZmFicy9Ta2VsZXRvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNrZWxldG9uIGV4dGVuZHMgUGhhc2VyLlBsdWdpbi5Jc29tZXRyaWMuSXNvU3ByaXRle1xuXHRjb25zdHJ1Y3RvcihnYW1lLCB4LCB5LCBmcmFtZSl7XG5cdFx0c3VwZXIoZ2FtZSwgeCwgeSwgMCwgJ3NrZWxldG9uJywgZnJhbWUpO1xuXG5cdFx0dGhpcy53YWxrQW5pbSA9IHRoaXMuYW5pbWF0aW9ucy5hZGQoJ3dhbGsnLCBbMTAsMTFdKTtcblx0XHR0aGlzLmFuaW1hdGlvbnMuYWRkKCdodXJ0JywgWzEyXSk7XG5cdFx0dGhpcy5hbmltYXRpb25zLmFkZCgnYXR0YWNrJywgWzEzLDE0LDEzLDE0LDE0LDEzLDE0XSk7XG5cblx0XHR0aGlzLmFuaW1hdGlvbnMucGxheSgnd2FsaycsIDIsIHRydWUpO1xuXG5cdFx0dGhpcy5hbmNob3Iuc2V0VG8oLjUsIC41KTtcblxuXHRcdHRoaXMuZ2FtZS5waHlzaWNzLmVuYWJsZSh0aGlzLCBQaGFzZXIuUGh5c2ljcy5BUkNBREUpO1xuXG5cdFx0dGhpcy5wYXRoLCB0aGlzLnBhdGhQb3NpdGlvbjtcblxuXHRcdHRoaXMuaGVhbHRoID0gNTtcblx0XHR0aGlzLndvcnRoID0gMjA7XG5cdFx0dGhpcy5zcGVlZCA9IDEwMDAgKyBNYXRoLnJhbmRvbSgpICogMzAwMDtcblxuXHRcdHRoaXMucGF0aEZpbmlzaGVkID0gbmV3IFBoYXNlci5TaWduYWwoKTtcblx0fVxuXG5cdC8qXG5cdGRhbWFnZSh2YWx1ZSl7XG5cdFx0dGhpcy5oZWFsdGggLT0gdmFsdWU7XG5cdFx0aWYgKHRoaXMuaGVhbHRoIDw9IDApe1xuXHRcdFx0dGhpcy5raWxsKCk7XG5cdFx0fVxuXHR9Ki9cblxuXHRzZXRQYXRoKHBhdGgpe1xuXHRcdHRoaXMucGF0aCA9IHBhdGg7XG5cdFx0dGhpcy5wYXRoUG9zaXRpb24gPSAwO1xuXHR9XG5cblx0YWR2YW5jZVRpbGUoKXtcblx0XHR0aGlzLnBhdGhQb3NpdGlvbiArPSAxO1xuXG5cdFx0aWYodGhpcy5wYXRoUG9zaXRpb24gPCB0aGlzLnBhdGgubGVuZ3RoKXtcblx0XHRcdC8vdHdlZW5cblx0XHRcdGlmKHRoaXMucGF0aFt0aGlzLnBhdGhQb3NpdGlvbl0ueCA+IHRoaXMuaXNvWCl7XG5cdFx0XHRcdHRoaXMuc2NhbGUueCA9IDE7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLnNjYWxlLnggPSAtMTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy53YWxrTW90aW9uID0gdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzKS50byh7XG5cdFx0XHRcdFx0aXNvWDogdGhpcy5wYXRoW3RoaXMucGF0aFBvc2l0aW9uXS54LFxuXHRcdFx0XHRcdGlzb1k6IHRoaXMucGF0aFt0aGlzLnBhdGhQb3NpdGlvbl0ueSxcblx0XHRcdFx0fSxcdHRoaXMuc3BlZWQsIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsIHRydWUpO1xuXHRcdFx0dGhpcy53YWxrTW90aW9uLm9uQ29tcGxldGUuYWRkKHRoaXMuYWR2YW5jZVRpbGUsIHRoaXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmFuaW1hdGlvbnMucGxheShcImF0dGFja1wiLCAyKTtcblx0XHRcdHRoaXMuYW5pbWF0aW9ucy5jdXJyZW50QW5pbS5vbkNvbXBsZXRlLmFkZE9uY2UodGhpcy5hdHRhY2tPdmVyLCB0aGlzKTtcblx0XHR9XG5cdH1cblxuXHRhdHRhY2tPdmVyKCl7XG5cdFx0dGhpcy5wYXRoRmluaXNoZWQuZGlzcGF0Y2godGhpcyk7XG5cdH1cbn1cbiJdfQ==
},{}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Boot = (function () {
  function Boot() {
    _classCallCheck(this, Boot);
  }

  _createClass(Boot, [{
    key: 'preload',
    value: function preload() {
      this.load.image('preloader', 'assets/images/loading_bar.png');
    }
  }, {
    key: 'create',
    value: function create() {
      this.game.input.maxPointers = 1;
      this.game.state.start('preload');
    }
  }]);

  return Boot;
})();

exports['default'] = Boot;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvc3RhdGVzL0Jvb3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFxQixJQUFJO1dBQUosSUFBSTswQkFBSixJQUFJOzs7ZUFBSixJQUFJOztXQUVoQixtQkFBRztBQUNSLFVBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSwrQkFBK0IsQ0FBQyxDQUFDO0tBQy9EOzs7V0FFSyxrQkFBRztBQUNQLFVBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7QUFDaEMsVUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQ2xDOzs7U0FUa0IsSUFBSTs7O3FCQUFKLElBQUkiLCJmaWxlIjoiL1VzZXJzL2xlc3NhbmRyby9IYWNraW5nL0pTL0dBTUUvUEhBU0VSL2Jvb2stdHJhdmlzLWZhYXMvVG93ZXJEZWZlbnNlL3NyYy9zdGF0ZXMvQm9vdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvb3Qge1xyXG5cclxuICBwcmVsb2FkKCkge1xyXG4gICAgdGhpcy5sb2FkLmltYWdlKCdwcmVsb2FkZXInLCAnYXNzZXRzL2ltYWdlcy9sb2FkaW5nX2Jhci5wbmcnKTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZSgpIHtcclxuICAgIHRoaXMuZ2FtZS5pbnB1dC5tYXhQb2ludGVycyA9IDE7XHJcbiAgICB0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ3ByZWxvYWQnKTtcclxuICB9XHJcblxyXG59Il19
},{}],6:[function(require,module,exports){
//require other components

'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _prefabsHumanJs = require('../prefabs/Human.js');

var _prefabsHumanJs2 = _interopRequireDefault(_prefabsHumanJs);

var _prefabsSkeletonJs = require('../prefabs/Skeleton.js');

var _prefabsSkeletonJs2 = _interopRequireDefault(_prefabsSkeletonJs);

var _prefabsNumberBoxJs = require('../prefabs/NumberBox.js');

var _prefabsNumberBoxJs2 = _interopRequireDefault(_prefabsNumberBoxJs);

var Enemies = (function () {
	function Enemies(game, parentGroup) {
		_classCallCheck(this, Enemies);

		this.game = game;
		this._enemies = this.game.add.group(parentGroup);
	}

	_createClass(Enemies, [{
		key: 'findNearest',
		value: function findNearest(xc, yc) {
			var lowestChild = null;
			var lowestDistance = 10000000;

			this._enemies.forEach(function (child) {
				var distance = Phaser.Math.distance(xc, yc, child.x, child.y);

				if (!lowestChild) {
					lowestChild = child;
				} else {
					if (distance < lowestDistance) {
						lowestChild = child;
						lowestDistance = distance;
					}
				}
			}, this._enemies, true); // what's true
			return lowestChild;
		}
	}, {
		key: 'add',
		value: function add(obj) {
			this._enemies.add(obj);
		}
	}]);

	return Enemies;
})();

var Game = (function (_Phaser$State) {
	_inherits(Game, _Phaser$State);

	function Game() {
		_classCallCheck(this, Game);

		//object level properties
		_get(Object.getPrototypeOf(Game.prototype), 'constructor', this).call(this);
	}

	_createClass(Game, [{
		key: 'create',
		value: function create() {
			this.playerLife = 10;
			this.humans = 0;
			this.money = 50;
			this.spawnTime = 2000;
			this.mapData = this.game.cache.getJSON('mapdata');
			this.game.physics.startSystem(Phaser.Physics.ARCADE);
			this.game.time.advancedTiming = true;
			this.game.add.sprite(0, 0, "gamebg");
			this.game.plugins.add(new Phaser.Plugin.Isometric(this.game));
			this.game.iso.anchor.setTo(0.5, 0.2);
			this.isoGroup = this.game.add.group();
			this.isoChars = this.game.add.group();
			this.allies = this.game.add.group(this.isoChars);
			this.enemies = new Enemies(this.game, this.isoChars);
			this.arrows = this.game.add.group();
			this.arrows.enableBody = true;
			this.arrows.physicsBodyType = Phaser.Physics.ARCADE;
			this.healthBox = new _prefabsNumberBoxJs2['default'](this.game, 'healthholder', this.playerLife, 10, 10);
			this.scoreBox = new _prefabsNumberBoxJs2['default'](this.game, 'moneyholder', this.money, 100, 10);

			//
			// TEST
			//var _human = new Human(this.game, 200, 200);
			//this.allies.add(_human);
			//var _skeleton = new Skeleton(this.game, 300, 200);
			//this.allies.add(_skeleton);

			this.spawnTiles();

			this.easystar = new EasyStar.js();
			this.easystar.setGrid(this.mapData.tileMap);
			this.easystar.setAcceptableTiles([1]);
			this.boundFound = this.pathFound.bind(this);
			this.easystar.findPath(1, 0, 0, 4, this.boundFound);

			this.cursorPos = new Phaser.Plugin.Isometric.Point3();
			this.nextSpawn = this.game.time.now + this.spawnTime;
		}
	}, {
		key: 'update',
		value: function update() {
			this.game.iso.unproject(this.game.input.activePointer.position, this.cursorPos);
			this.isoGroup.forEach(this.checkTiles, this, false);
			if (this.game.input.activePointer.isDown && this.selectedTile) {
				// how could this.selectedTile be null?
				if (!this.selectedTile.occupant && this.selectedTile.buyable) {
					if (this.money >= 50) {
						var human = new _prefabsHumanJs2['default'](this.game, this.selectedTile.isoX, this.selectedTile.isoY, this.enemies, this.arrows);
						this.allies.add(human);
						this.selectedTile.occupant = human;
						this.money -= 50;
						this.scoreBox.setValue(this.money);
						this.humans += 1;
						if (this.humans == 16) {
							this.game.state.start('victory');
						}
					}
				}
			}

			this.game.physics.arcade.overlap(this.arrows, this.enemies._enemies, this.arrowHitEnemy, null, this);

			if (this.game.time.now > this.nextSpawn) {
				this.spawnEnemy();
				this.nextSpawn = this.game.time.now + this.spawnTime + Math.random() * this.spawnTime;
			}

			this.easystar.calculate();
			this.game.iso.simpleSort(this.enemies._enemies);
		}
	}, {
		key: 'spawnEnemy',
		value: function spawnEnemy() {
			var skel = new _prefabsSkeletonJs2['default'](this.game, this.convertedPath[0].x, this.convertedPath[0].y);
			skel.setPath(this.convertedPath);
			skel.advanceTile();
			skel.pathFinished.addOnce(this.enemyAtGoal, this);
			this.enemies.add(skel);
		}
	}, {
		key: 'enemyAtGoal',
		value: function enemyAtGoal(enemy) {
			enemy.kill();
			this.playerLife -= 1;
			this.healthBox.setValue(this.playerLife);
			if (this.playerLife <= 0) {
				this.gameOver();
			}
		}
	}, {
		key: 'gameOver',
		value: function gameOver() {
			this.game.state.start('gameover');
		}
	}, {
		key: 'arrowHitEnemy',
		value: function arrowHitEnemy(arrow, enemy) {
			arrow.kill();
			enemy.damage(1);
			if (!enemy.alive) {
				this.money += enemy.worth;
				this.scoreBox.setValue(this.money);
				this.spawnTime = Math.max(0, this.spawnTime - 100);
			}
		}
	}, {
		key: 'checkTiles',
		value: function checkTiles(tile) {
			var inBounds = tile.isoBounds.containsXY(this.cursorPos.x, this.cursorPos.y);

			if (!tile.selected && inBounds) {
				tile.selected = true;
				tile.tint = 0x86bfda;
				this.game.add.tween(tile).to({ isoZ: 4 }, 200, Phaser.Easing.Quadratic.InOut, true);
				this.selectedTile = tile;
			} else if (tile.selected && !inBounds) {
				tile.selected = false;
				tile.tint = 0xffffff;
				this.game.add.tween(tile).to({ isoZ: 0 }, 200, Phaser.Easing.Quadratic.InOut, true);
			}
		}
	}, {
		key: 'spawnTiles',
		value: function spawnTiles() {
			var size = 55;
			var mapWidth = this.mapData.tileMap[0].length - 1;
			var mapHeight = this.mapData.tileMap.length - 1;
			this.gameTiles = [];

			var i = 0,
			    tile;
			for (var y = 0; y <= mapHeight; y++) {

				this.gameTiles[y] = [];

				for (var x = 0; x <= mapWidth; x++) {
					var tileNumber = this.mapData.tileMap[y][x];
					var tileName = this.mapData.tileNames[tileNumber];
					tile = this.game.add.isoSprite(x * size, y * size, 0, tileName, 0, this.isoGroup);
					tile.anchor.set(0.5, 0);
					tile.buyable = tileNumber == 0 ? true : false;
					this.gameTiles[y][x] = tile;
				}
			}
		}
	}, {
		key: 'pathFound',
		value: function pathFound(path) {
			console.log(path);
			if (path != null) {
				this.convertedPath = [];
				var curPoint;
				for (var i = 0; i < path.length; i++) {
					curPoint = this.gameTiles[path[i].y][path[i].x];
					this.convertedPath.push({ x: curPoint.isoX, y: curPoint.isoY });
				}
			}
		}
	}]);

	return Game;
})(Phaser.State);

exports['default'] = Game;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../prefabs/Human.js":2,"../prefabs/NumberBox.js":3,"../prefabs/Skeleton.js":4}],7:[function(require,module,exports){

//require other components

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GameOver = (function (_Phaser$State) {
  _inherits(GameOver, _Phaser$State);

  function GameOver() {
    _classCallCheck(this, GameOver);

    //object level properties
    _get(Object.getPrototypeOf(GameOver.prototype), "constructor", this).call(this);
  }

  _createClass(GameOver, [{
    key: "create",
    value: function create() {
      this.add.text(this.game.width / 2, this.game.height / 2, "GAME OVER (press space to play again)", { font: "30px Arial", align: "center", fill: "#fff" });
    }
  }, {
    key: "update",
    value: function update() {
      if (this.game.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR)) {
        this.game.state.start('game');
      }
    }
  }]);

  return GameOver;
})(Phaser.State);

exports["default"] = GameOver;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvc3RhdGVzL0dhbWVPdmVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBR3FCLFFBQVE7WUFBUixRQUFROztBQUVoQixXQUZRLFFBQVEsR0FFYjswQkFGSyxRQUFROzs7QUFJekIsK0JBSmlCLFFBQVEsNkNBSWpCO0dBQ1Q7O2VBTGtCLFFBQVE7O1dBT3JCLGtCQUFHO0FBQ1IsVUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSx1Q0FBdUMsRUFBRSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztLQUN6Sjs7O1dBRUssa0JBQUc7QUFDUixVQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQ2pDLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDM0IsWUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO09BQzlCO0tBQ0Q7OztTQWhCa0IsUUFBUTtHQUFTLE1BQU0sQ0FBQyxLQUFLOztxQkFBN0IsUUFBUSIsImZpbGUiOiIvVXNlcnMvbGVzc2FuZHJvL0hhY2tpbmcvSlMvR0FNRS9QSEFTRVIvYm9vay10cmF2aXMtZmFhcy9Ub3dlckRlZmVuc2Uvc3JjL3N0YXRlcy9HYW1lT3Zlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLy9yZXF1aXJlIG90aGVyIGNvbXBvbmVudHNcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZU92ZXIgZXh0ZW5kcyBQaGFzZXIuU3RhdGUge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIC8vb2JqZWN0IGxldmVsIHByb3BlcnRpZXNcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgY3JlYXRlKCkge1xuXHQgIHRoaXMuYWRkLnRleHQodGhpcy5nYW1lLndpZHRoIC8gMiwgdGhpcy5nYW1lLmhlaWdodCAvIDIsIFwiR0FNRSBPVkVSIChwcmVzcyBzcGFjZSB0byBwbGF5IGFnYWluKVwiLCB7IGZvbnQ6IFwiMzBweCBBcmlhbFwiLCBhbGlnbjogXCJjZW50ZXJcIiwgZmlsbDogXCIjZmZmXCIgfSk7XG4gIH1cblxuICB1cGRhdGUoKSB7XG5cdCAgaWYodGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmlzRG93bihcblx0XHQgIFBoYXNlci5LZXlib2FyZC5TUEFDRUJBUikpIHtcblx0XHQgIHRoaXMuZ2FtZS5zdGF0ZS5zdGFydCgnZ2FtZScpO1xuXHQgIH1cbiAgfVxuXG5cbn1cbiJdfQ==
},{}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Preload = (function () {
  function Preload() {
    _classCallCheck(this, Preload);

    this.asset = null;
    this.ready = false;
  }

  _createClass(Preload, [{
    key: 'preload',
    value: function preload() {
      this.load.image('loading_bg', 'assets/images/loading_bg.jpg');
    }
  }, {
    key: 'create',
    value: function create() {

      //background for game
      this.add.sprite(0, 0, "loading_bg");

      this.asset = this.add.sprite(this.game.width / 2, this.game.height / 2, 'preloader');
      this.asset.anchor.setTo(0.5, 0.5);

      this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
      this.load.setPreloadSprite(this.asset);

      //do all your loading here
      this.load.pack('level1', 'assets/assetPack.json', null, this);

      //staaaart load
      this.load.start();
    }
  }, {
    key: 'update',
    value: function update() {

      if (this.ready) {
        this.game.state.start('game');
      }
    }
  }, {
    key: 'onLoadComplete',
    value: function onLoadComplete() {
      this.ready = true;
    }
  }]);

  return Preload;
})();

exports['default'] = Preload;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvc3RhdGVzL1ByZWxvYWQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFxQixPQUFPO0FBRWYsV0FGUSxPQUFPLEdBRVo7MEJBRkssT0FBTzs7QUFHeEIsUUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7QUFDbEIsUUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7R0FDcEI7O2VBTGtCLE9BQU87O1dBT25CLG1CQUFHO0FBQ1IsVUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLDhCQUE4QixDQUFDLENBQUM7S0FDL0Q7OztXQUVLLGtCQUFHOzs7QUFHUCxVQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDOztBQUVuQyxVQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDaEYsVUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQzs7QUFFbEMsVUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDNUQsVUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7OztBQUd2QyxVQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsdUJBQXVCLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDOzs7QUFJOUQsVUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztLQUNuQjs7O1dBRUssa0JBQUc7O0FBRVAsVUFBRyxJQUFJLENBQUMsS0FBSyxFQUFFO0FBQ2IsWUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO09BQy9CO0tBRUY7OztXQUVhLDBCQUFHO0FBQ2YsVUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7S0FDbkI7OztTQXhDa0IsT0FBTzs7O3FCQUFQLE9BQU8iLCJmaWxlIjoiL1VzZXJzL2xlc3NhbmRyby9IYWNraW5nL0pTL0dBTUUvUEhBU0VSL2Jvb2stdHJhdmlzLWZhYXMvVG93ZXJEZWZlbnNlL3NyYy9zdGF0ZXMvUHJlbG9hZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIFByZWxvYWQge1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuYXNzZXQgPSBudWxsO1xyXG4gICAgdGhpcy5yZWFkeSA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgcHJlbG9hZCgpIHtcclxuICAgIHRoaXMubG9hZC5pbWFnZSgnbG9hZGluZ19iZycsICdhc3NldHMvaW1hZ2VzL2xvYWRpbmdfYmcuanBnJyk7XHJcbiAgfVxyXG5cclxuICBjcmVhdGUoKSB7XHJcblxyXG4gICAgLy9iYWNrZ3JvdW5kIGZvciBnYW1lXHJcbiAgICB0aGlzLmFkZC5zcHJpdGUoMCwwLCBcImxvYWRpbmdfYmdcIik7XHJcblxyXG4gICAgdGhpcy5hc3NldCA9IHRoaXMuYWRkLnNwcml0ZSh0aGlzLmdhbWUud2lkdGgvMix0aGlzLmdhbWUuaGVpZ2h0LzIsICdwcmVsb2FkZXInKTtcclxuICAgIHRoaXMuYXNzZXQuYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcclxuXHJcbiAgICB0aGlzLmxvYWQub25Mb2FkQ29tcGxldGUuYWRkT25jZSh0aGlzLm9uTG9hZENvbXBsZXRlLCB0aGlzKTtcclxuICAgIHRoaXMubG9hZC5zZXRQcmVsb2FkU3ByaXRlKHRoaXMuYXNzZXQpO1xyXG5cclxuICAgIC8vZG8gYWxsIHlvdXIgbG9hZGluZyBoZXJlXHJcbiAgICB0aGlzLmxvYWQucGFjaygnbGV2ZWwxJywgJ2Fzc2V0cy9hc3NldFBhY2suanNvbicsIG51bGwsIHRoaXMpO1xyXG5cclxuXHJcbiAgICAvL3N0YWFhYXJ0IGxvYWRcclxuICAgIHRoaXMubG9hZC5zdGFydCgpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKCkge1xyXG5cclxuICAgIGlmKHRoaXMucmVhZHkpIHtcclxuICAgICAgdGhpcy5nYW1lLnN0YXRlLnN0YXJ0KCdnYW1lJyk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbiAgb25Mb2FkQ29tcGxldGUoKSB7XHJcbiAgICB0aGlzLnJlYWR5ID0gdHJ1ZTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==
},{}],9:[function(require,module,exports){

//require other components

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GameOver = (function (_Phaser$State) {
  _inherits(GameOver, _Phaser$State);

  function GameOver() {
    _classCallCheck(this, GameOver);

    //object level properties
    _get(Object.getPrototypeOf(GameOver.prototype), "constructor", this).call(this);
  }

  _createClass(GameOver, [{
    key: "create",
    value: function create() {
      this.add.text(this.game.width / 2, this.game.height / 2, "YOU WON THE GAME!! (press space to play again)", { font: "30px Arial", align: "center", fill: "#fff" });
    }
  }, {
    key: "update",
    value: function update() {
      if (this.game.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR)) {
        this.game.state.start('game');
      }
    }
  }]);

  return GameOver;
})(Phaser.State);

exports["default"] = GameOver;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvc3RhdGVzL1ZpY3RvcnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFHcUIsUUFBUTtZQUFSLFFBQVE7O0FBRWhCLFdBRlEsUUFBUSxHQUViOzBCQUZLLFFBQVE7OztBQUl6QiwrQkFKaUIsUUFBUSw2Q0FJakI7R0FDVDs7ZUFMa0IsUUFBUTs7V0FPckIsa0JBQUc7QUFDUixVQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLGdEQUFnRCxFQUFFLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0tBQ2xLOzs7V0FFSyxrQkFBRztBQUNSLFVBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FDakMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUMzQixZQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7T0FDOUI7S0FDRDs7O1NBaEJrQixRQUFRO0dBQVMsTUFBTSxDQUFDLEtBQUs7O3FCQUE3QixRQUFRIiwiZmlsZSI6Ii9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Rvd2VyRGVmZW5zZS9zcmMvc3RhdGVzL1ZpY3RvcnkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8vcmVxdWlyZSBvdGhlciBjb21wb25lbnRzXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVPdmVyIGV4dGVuZHMgUGhhc2VyLlN0YXRlIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvL29iamVjdCBsZXZlbCBwcm9wZXJ0aWVzXG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGNyZWF0ZSgpIHtcblx0ICB0aGlzLmFkZC50ZXh0KHRoaXMuZ2FtZS53aWR0aCAvIDIsIHRoaXMuZ2FtZS5oZWlnaHQgLyAyLCBcIllPVSBXT04gVEhFIEdBTUUhISAocHJlc3Mgc3BhY2UgdG8gcGxheSBhZ2FpbilcIiwgeyBmb250OiBcIjMwcHggQXJpYWxcIiwgYWxpZ246IFwiY2VudGVyXCIsIGZpbGw6IFwiI2ZmZlwiIH0pO1xuICB9XG5cbiAgdXBkYXRlKCkge1xuXHQgIGlmKHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5pc0Rvd24oXG5cdFx0ICBQaGFzZXIuS2V5Ym9hcmQuU1BBQ0VCQVIpKSB7XG5cdFx0ICB0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ2dhbWUnKTtcblx0ICB9XG4gIH1cblxuXG59XG4iXX0=
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvYXBwLmpzIiwic3JjL3ByZWZhYnMvSHVtYW4uanMiLCJzcmMvcHJlZmFicy9OdW1iZXJCb3guanMiLCJzcmMvcHJlZmFicy9Ta2VsZXRvbi5qcyIsInNyYy9zdGF0ZXMvQm9vdC5qcyIsInNyYy9zdGF0ZXMvR2FtZS5qcyIsInNyYy9zdGF0ZXMvR2FtZU92ZXIuanMiLCJzcmMvc3RhdGVzL1ByZWxvYWQuanMiLCJzcmMvc3RhdGVzL1ZpY3RvcnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdFBBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbnZhciBfc3RhdGVzQm9vdEpzID0gcmVxdWlyZShcIi4vc3RhdGVzL0Jvb3QuanNcIik7XG5cbnZhciBfc3RhdGVzQm9vdEpzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0YXRlc0Jvb3RKcyk7XG5cbnZhciBfc3RhdGVzUHJlbG9hZEpzID0gcmVxdWlyZShcIi4vc3RhdGVzL1ByZWxvYWQuanNcIik7XG5cbnZhciBfc3RhdGVzUHJlbG9hZEpzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0YXRlc1ByZWxvYWRKcyk7XG5cbnZhciBfc3RhdGVzR2FtZUpzID0gcmVxdWlyZShcIi4vc3RhdGVzL0dhbWUuanNcIik7XG5cbnZhciBfc3RhdGVzR2FtZUpzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0YXRlc0dhbWVKcyk7XG5cbnZhciBfc3RhdGVzR2FtZU92ZXJKcyA9IHJlcXVpcmUoXCIuL3N0YXRlcy9HYW1lT3Zlci5qc1wiKTtcblxudmFyIF9zdGF0ZXNHYW1lT3ZlckpzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0YXRlc0dhbWVPdmVySnMpO1xuXG52YXIgX3N0YXRlc1ZpY3RvcnlKcyA9IHJlcXVpcmUoXCIuL3N0YXRlcy9WaWN0b3J5LmpzXCIpO1xuXG52YXIgX3N0YXRlc1ZpY3RvcnlKczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdGF0ZXNWaWN0b3J5SnMpO1xuXG52YXIgZ2FtZTtcblxud2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgZ2FtZSA9IG5ldyBQaGFzZXIuR2FtZSg4MDAsIDYwMCwgUGhhc2VyLkFVVE8sICdnYW1lJyk7XG4gIGdhbWUuc3RhdGUuYWRkKCdib290JywgX3N0YXRlc0Jvb3RKczJbXCJkZWZhdWx0XCJdKTtcbiAgZ2FtZS5zdGF0ZS5hZGQoJ3ByZWxvYWQnLCBfc3RhdGVzUHJlbG9hZEpzMltcImRlZmF1bHRcIl0pO1xuICBnYW1lLnN0YXRlLmFkZCgnZ2FtZScsIF9zdGF0ZXNHYW1lSnMyW1wiZGVmYXVsdFwiXSk7XG4gIGdhbWUuc3RhdGUuYWRkKCdnYW1lb3ZlcicsIF9zdGF0ZXNHYW1lT3ZlckpzMltcImRlZmF1bHRcIl0pO1xuICBnYW1lLnN0YXRlLmFkZCgndmljdG9yeScsIF9zdGF0ZXNWaWN0b3J5SnMyW1wiZGVmYXVsdFwiXSk7XG4gIGdhbWUuc3RhdGUuc3RhcnQoJ2Jvb3QnKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXNaWE56WVc1a2NtOHZTR0ZqYTJsdVp5OUtVeTlIUVUxRkwxQklRVk5GVWk5aWIyOXJMWFJ5WVhacGN5MW1ZV0Z6TDFSdmQyVnlSR1ZtWlc1elpTOXpjbU12WVhCd0xtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3TkVKQlJXbENMR3RDUVVGclFqczdPenNyUWtGRFppeHhRa0ZCY1VJN096czdORUpCUTNoQ0xHdENRVUZyUWpzN096dG5RMEZEWkN4elFrRkJjMEk3T3pzN0swSkJRM1pDTEhGQ1FVRnhRanM3T3p0QlFVNTZReXhKUVVGSkxFbEJRVWtzUTBGQlF6czdRVUZUVkN4TlFVRk5MRU5CUVVNc1RVRkJUU3hIUVVGSExGbEJRVms3UVVGRE1VSXNUVUZCU1N4SFFVRkhMRWxCUVVrc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVXNSMEZCUnl4RlFVRkZMRTFCUVUwc1EwRkJReXhKUVVGSkxFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTTdRVUZEZEVRc1RVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNUVUZCVFN3MFFrRkJUeXhEUVVGRE8wRkJRemRDTEUxQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExGTkJRVk1zSzBKQlFWVXNRMEZCUXp0QlFVTnVReXhOUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4TlFVRk5MRFJDUVVGUExFTkJRVU03UVVGRE4wSXNUVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zVlVGQlZTeG5RMEZCVnl4RFFVRkRPMEZCUTNKRExFMUJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRk5CUVZNc0swSkJRVlVzUTBGQlF6dEJRVU51UXl4TlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0RFFVTXhRaXhEUVVGRElpd2labWxzWlNJNklpOVZjMlZ5Y3k5c1pYTnpZVzVrY204dlNHRmphMmx1Wnk5S1V5OUhRVTFGTDFCSVFWTkZVaTlpYjI5ckxYUnlZWFpwY3kxbVlXRnpMMVJ2ZDJWeVJHVm1aVzV6WlM5emNtTXZZWEJ3TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUdkaGJXVTdYSEpjYmx4eVhHNXBiWEJ2Y25RZ1FtOXZkQ0JtY205dElGd2lMaTl6ZEdGMFpYTXZRbTl2ZEM1cWMxd2lPMXh5WEc1cGJYQnZjblFnVUhKbGJHOWhaQ0JtY205dElGd2lMaTl6ZEdGMFpYTXZVSEpsYkc5aFpDNXFjMXdpTzF4eVhHNXBiWEJ2Y25RZ1IyRnRaU0JtY205dElGd2lMaTl6ZEdGMFpYTXZSMkZ0WlM1cWMxd2lPMXh5WEc1cGJYQnZjblFnUjJGdFpVOTJaWElnWm5KdmJTQmNJaTR2YzNSaGRHVnpMMGRoYldWUGRtVnlMbXB6WENJN1hISmNibWx0Y0c5eWRDQldhV04wYjNKNUlHWnliMjBnWENJdUwzTjBZWFJsY3k5V2FXTjBiM0o1TG1welhDSTdYSEpjYmx4eVhHNWNjbHh1ZDJsdVpHOTNMbTl1Ykc5aFpDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0JuWVcxbElEMGdibVYzSUZCb1lYTmxjaTVIWVcxbEtEZ3dNQ3dnTmpBd0xDQlFhR0Z6WlhJdVFWVlVUeXdnSjJkaGJXVW5LVHRjY2x4dUlDQm5ZVzFsTG5OMFlYUmxMbUZrWkNnblltOXZkQ2NzSUVKdmIzUXBPMXh5WEc0Z0lHZGhiV1V1YzNSaGRHVXVZV1JrS0Nkd2NtVnNiMkZrSnl3Z1VISmxiRzloWkNrN1hISmNiaUFnWjJGdFpTNXpkR0YwWlM1aFpHUW9KMmRoYldVbkxDQkhZVzFsS1R0Y2NseHVJQ0JuWVcxbExuTjBZWFJsTG1Ga1pDZ25aMkZ0Wlc5MlpYSW5MQ0JIWVcxbFQzWmxjaWs3WEhKY2JpQWdaMkZ0WlM1emRHRjBaUzVoWkdRb0ozWnBZM1J2Y25rbkxDQldhV04wYjNKNUtUdGNjbHh1SUNCbllXMWxMbk4wWVhSbExuTjBZWEowS0NkaWIyOTBKeWs3WEhKY2JuMDdYSEpjYmlKZGZRPT0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0dmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChfeCwgX3gyLCBfeDMpIHsgdmFyIF9hZ2FpbiA9IHRydWU7IF9mdW5jdGlvbjogd2hpbGUgKF9hZ2FpbikgeyB2YXIgb2JqZWN0ID0gX3gsIHByb3BlcnR5ID0gX3gyLCByZWNlaXZlciA9IF94MzsgX2FnYWluID0gZmFsc2U7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyBfeCA9IHBhcmVudDsgX3gyID0gcHJvcGVydHk7IF94MyA9IHJlY2VpdmVyOyBfYWdhaW4gPSB0cnVlOyBkZXNjID0gcGFyZW50ID0gdW5kZWZpbmVkOyBjb250aW51ZSBfZnVuY3Rpb247IH0gfSBlbHNlIGlmICgndmFsdWUnIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgSHVtYW4gPSAoZnVuY3Rpb24gKF9QaGFzZXIkUGx1Z2luJElzb21ldHJpYyRJc29TcHJpdGUpIHtcblx0X2luaGVyaXRzKEh1bWFuLCBfUGhhc2VyJFBsdWdpbiRJc29tZXRyaWMkSXNvU3ByaXRlKTtcblxuXHRmdW5jdGlvbiBIdW1hbihnYW1lLCB4LCB5LCBlbmVtaWVzLCBhcnJvd3MpIHtcblx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgSHVtYW4pO1xuXG5cdFx0X2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoSHVtYW4ucHJvdG90eXBlKSwgJ2NvbnN0cnVjdG9yJywgdGhpcykuY2FsbCh0aGlzLCBnYW1lLCB4LCB5LCAwLCAnaHVtYW4nLCAwKTsgLy8gd2hhdCBhcmUgdGhpcyBwYXJhbXM/IHRoZSBzZWNvbmQgaXMgYSBpc29cblxuXHRcdHRoaXMuYW5pbWF0aW9ucy5hZGQoJ2lkbGUnLCBbMTAsIDExXSk7XG5cdFx0dGhpcy5hbmltYXRpb25zLnBsYXkoJ2lkbGUnLCAyLCB0cnVlKTtcblxuXHRcdHRoaXMuYW5jaG9yLnNldFRvKC41LCAuNSk7XG5cdFx0dGhpcy5lbmVtaWVzID0gZW5lbWllcztcblx0XHR0aGlzLmFycm93cyA9IGFycm93cztcblxuXHRcdHRoaXMuc2hvdEludGVydmFsID0gMTAwMDtcblx0XHR0aGlzLnNob3RUaW1lID0gdGhpcy5nYW1lLnRpbWUubm93ICsgdGhpcy5zaG90SW50ZXJ2YWw7XG5cdH1cblxuXHRfY3JlYXRlQ2xhc3MoSHVtYW4sIFt7XG5cdFx0a2V5OiAndXBkYXRlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKCkge1xuXHRcdFx0aWYgKHRoaXMuZ2FtZS50aW1lLm5vdyA+IHRoaXMuc2hvdFRpbWUpIHtcblx0XHRcdFx0dGhpcy50YXJnZXQgPSB0aGlzLmVuZW1pZXMuZmluZE5lYXJlc3QodGhpcy54LCB0aGlzLnkpO1xuXG5cdFx0XHRcdGlmICh0aGlzLnRhcmdldCkge1xuXHRcdFx0XHRcdHZhciBhcnJvdyA9IHRoaXMuYXJyb3dzLmdldEZpcnN0RGVhZCgpO1xuXHRcdFx0XHRcdGlmICghYXJyb3cpIGFycm93ID0gdGhpcy5hcnJvd3MuY3JlYXRlKDAsIDAsICdhcnJvdycpO1xuXHRcdFx0XHRcdGFycm93LnJldml2ZSgpO1xuXHRcdFx0XHRcdGFycm93LnggPSB0aGlzLng7XG5cdFx0XHRcdFx0YXJyb3cueSA9IHRoaXMueTtcblx0XHRcdFx0XHRhcnJvdy5saWZlc3BhbiA9IDQwMDA7XG5cblx0XHRcdFx0XHRhcnJvdy5yb3RhdGlvbiA9IHRoaXMuZ2FtZS5waHlzaWNzLmFyY2FkZS5tb3ZlVG9PYmplY3QoYXJyb3csIHRoaXMudGFyZ2V0LCAxMjApO1xuXG5cdFx0XHRcdFx0dGhpcy5zaG90VGltZSA9IHRoaXMuZ2FtZS50aW1lLm5vdyArIHRoaXMuc2hvdEludGVydmFsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XSk7XG5cblx0cmV0dXJuIEh1bWFuO1xufSkoUGhhc2VyLlBsdWdpbi5Jc29tZXRyaWMuSXNvU3ByaXRlKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gSHVtYW47XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5c1pYTnpZVzVrY204dlNHRmphMmx1Wnk5S1V5OUhRVTFGTDFCSVFWTkZVaTlpYjI5ckxYUnlZWFpwY3kxbVlXRnpMMVJ2ZDJWeVJHVm1aVzV6WlM5emNtTXZjSEpsWm1GaWN5OUlkVzFoYmk1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3pzN096czdPenRKUVVGeFFpeExRVUZMTzFkQlFVd3NTMEZCU3pzN1FVRkZaQ3hWUVVaVExFdEJRVXNzUTBGRllpeEpRVUZKTEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hQUVVGUExFVkJRVVVzVFVGQlRTeEZRVUZETzNkQ1FVWndRaXhMUVVGTE96dEJRVWQ0UWl3MlFrRkliVUlzUzBGQlN5dzJRMEZIYkVJc1NVRkJTU3hGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRTlCUVU4c1JVRkJSU3hEUVVGRExFVkJRVVU3TzBGQlJXcERMRTFCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUjBGQlJ5eERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzBGQlEzUkRMRTFCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03TzBGQlJYUkRMRTFCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEVWQlFVVXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJRenRCUVVNeFFpeE5RVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRTlCUVU4c1EwRkJRenRCUVVOMlFpeE5RVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRTFCUVUwc1EwRkJRenM3UVVGRmNrSXNUVUZCU1N4RFFVRkRMRmxCUVZrc1IwRkJSeXhKUVVGSkxFTkJRVU03UVVGRGVrSXNUVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRWRCUVVjc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF6dEZRVU4yUkRzN1kwRmtiVUlzUzBGQlN6czdVMEZuUW01Q0xHdENRVUZGTzBGQlExQXNUMEZCUnl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVkQlFVY3NTVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkJRenRCUVVOeVF5eFJRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZET3p0QlFVVjJSQ3hSUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVTTdRVUZEWkN4VFFVRkpMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEZsQlFWa3NSVUZCUlN4RFFVRkRPMEZCUTNaRExGTkJRVWNzUTBGQlF5eExRVUZMTEVWQlFVVXNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU03UVVGRGNrUXNWVUZCU3l4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRE8wRkJRMllzVlVGQlN5eERRVUZETEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRMnBDTEZWQlFVc3NRMEZCUXl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU5xUWl4VlFVRkxMRU5CUVVNc1VVRkJVU3hIUVVGSExFbEJRVWtzUTBGQlF6czdRVUZGZEVJc1ZVRkJTeXhEUVVGRExGRkJRVkVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhOUVVGTkxFTkJRVU1zV1VGQldTeERRVU55UkN4TFFVRkxMRVZCUVVVc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXpzN1FVRkZNVUlzVTBGQlNTeERRVUZETEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVkQlFVY3NTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJRenRMUVVOMlJEdEpRVU5FTzBkQlEwUTdPenRSUVd4RGJVSXNTMEZCU3p0SFFVRlRMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEZOQlFWTTdPM0ZDUVVFdlF5eExRVUZMSWl3aVptbHNaU0k2SWk5VmMyVnljeTlzWlhOellXNWtjbTh2U0dGamEybHVaeTlLVXk5SFFVMUZMMUJJUVZORlVpOWliMjlyTFhSeVlYWnBjeTFtWVdGekwxUnZkMlZ5UkdWbVpXNXpaUzl6Y21NdmNISmxabUZpY3k5SWRXMWhiaTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRWgxYldGdUlHVjRkR1Z1WkhNZ1VHaGhjMlZ5TGxCc2RXZHBiaTVKYzI5dFpYUnlhV011U1hOdlUzQnlhWFJsSUh0Y2JseHVYSFJqYjI1emRISjFZM1J2Y2lobllXMWxMQ0I0TENCNUxDQmxibVZ0YVdWekxDQmhjbkp2ZDNNcGUxeHVYSFJjZEhOMWNHVnlLR2RoYldVc0lIZ3NJSGtzSURBc0lDZG9kVzFoYmljc0lEQXBPeUF2THlCM2FHRjBJR0Z5WlNCMGFHbHpJSEJoY21GdGN6OGdkR2hsSUhObFkyOXVaQ0JwY3lCaElHbHpiMXh1WEc1Y2RGeDBkR2hwY3k1aGJtbHRZWFJwYjI1ekxtRmtaQ2duYVdSc1pTY3NJRnN4TUN3Z01URmRLVHRjYmx4MFhIUjBhR2x6TG1GdWFXMWhkR2x2Ym5NdWNHeGhlU2duYVdSc1pTY3NJRElzSUhSeWRXVXBPMXh1WEc1Y2RGeDBkR2hwY3k1aGJtTm9iM0l1YzJWMFZHOG9MalVzSUM0MUtUdGNibHgwWEhSMGFHbHpMbVZ1WlcxcFpYTWdQU0JsYm1WdGFXVnpPMXh1WEhSY2RIUm9hWE11WVhKeWIzZHpJRDBnWVhKeWIzZHpPMXh1WEc1Y2RGeDBkR2hwY3k1emFHOTBTVzUwWlhKMllXd2dQU0F4TURBd08xeHVYSFJjZEhSb2FYTXVjMmh2ZEZScGJXVWdQU0IwYUdsekxtZGhiV1V1ZEdsdFpTNXViM2NnS3lCMGFHbHpMbk5vYjNSSmJuUmxjblpoYkR0Y2JseDBmVnh1WEc1Y2RIVndaR0YwWlNncGUxeHVYSFJjZEdsbUtIUm9hWE11WjJGdFpTNTBhVzFsTG01dmR5QStJSFJvYVhNdWMyaHZkRlJwYldVcGUxeHVYSFJjZEZ4MGRHaHBjeTUwWVhKblpYUWdQU0IwYUdsekxtVnVaVzFwWlhNdVptbHVaRTVsWVhKbGMzUW9kR2hwY3k1NExDQjBhR2x6TG5rcE8xeHVYRzVjZEZ4MFhIUnBaaWgwYUdsekxuUmhjbWRsZENsN1hHNWNkRngwWEhSY2RIWmhjaUJoY25KdmR5QTlJSFJvYVhNdVlYSnliM2R6TG1kbGRFWnBjbk4wUkdWaFpDZ3BPMXh1WEhSY2RGeDBYSFJwWmlnaFlYSnliM2NwSUdGeWNtOTNJRDBnZEdocGN5NWhjbkp2ZDNNdVkzSmxZWFJsS0RBc0lEQXNJQ2RoY25KdmR5Y3BPMXh1WEhSY2RGeDBYSFJoY25KdmR5NXlaWFpwZG1Vb0tUdGNibHgwWEhSY2RGeDBZWEp5YjNjdWVDQTlJSFJvYVhNdWVEdGNibHgwWEhSY2RGeDBZWEp5YjNjdWVTQTlJSFJvYVhNdWVUdGNibHgwWEhSY2RGeDBZWEp5YjNjdWJHbG1aWE53WVc0Z1BTQTBNREF3TzF4dVhHNWNkRngwWEhSY2RHRnljbTkzTG5KdmRHRjBhVzl1SUQwZ2RHaHBjeTVuWVcxbExuQm9lWE5wWTNNdVlYSmpZV1JsTG0xdmRtVlViMDlpYW1WamRDaGNibHgwWEhSY2RGeDBYSFJoY25KdmR5d2dkR2hwY3k1MFlYSm5aWFFzSURFeU1DazdYRzVjZEZ4MFhIUmNkRnh1WEhSY2RGeDBYSFIwYUdsekxuTm9iM1JVYVcxbElEMGdkR2hwY3k1bllXMWxMblJwYldVdWJtOTNJQ3NnZEdocGN5NXphRzkwU1c1MFpYSjJZV3c3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmVnh1WEhSOVhHNTlYRzRpWFgwPSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0dmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KF94LCBfeDIsIF94MykgeyB2YXIgX2FnYWluID0gdHJ1ZTsgX2Z1bmN0aW9uOiB3aGlsZSAoX2FnYWluKSB7IHZhciBvYmplY3QgPSBfeCwgcHJvcGVydHkgPSBfeDIsIHJlY2VpdmVyID0gX3gzOyBfYWdhaW4gPSBmYWxzZTsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IF94ID0gcGFyZW50OyBfeDIgPSBwcm9wZXJ0eTsgX3gzID0gcmVjZWl2ZXI7IF9hZ2FpbiA9IHRydWU7IGRlc2MgPSBwYXJlbnQgPSB1bmRlZmluZWQ7IGNvbnRpbnVlIF9mdW5jdGlvbjsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfSB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIE51bWJlckJveCA9IChmdW5jdGlvbiAoX1BoYXNlciRHcm91cCkge1xuXHRfaW5oZXJpdHMoTnVtYmVyQm94LCBfUGhhc2VyJEdyb3VwKTtcblxuXHRmdW5jdGlvbiBOdW1iZXJCb3goZ2FtZSwgYmdhc3NldCwgdmFsLCB4LCB5LCBwYXJlbnQpIHtcblx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgTnVtYmVyQm94KTtcblxuXHRcdF9nZXQoT2JqZWN0LmdldFByb3RvdHlwZU9mKE51bWJlckJveC5wcm90b3R5cGUpLCBcImNvbnN0cnVjdG9yXCIsIHRoaXMpLmNhbGwodGhpcywgZ2FtZSwgcGFyZW50KTtcblx0XHR0aGlzLmNyZWF0ZSh4LCB5LCBiZ2Fzc2V0KTtcblx0XHR2YXIgc3R5bGUgPSB7XG5cdFx0XHRmb250OiBcIjMwcHggYXJpYWxcIixcblx0XHRcdGFsaWduOiBcImNlbnRlclwiLFxuXHRcdFx0ZmlsbDogXCIjZmZmXCJcblx0XHR9O1xuXHRcdHRoaXMudHh0VmFsdWUgPSBuZXcgUGhhc2VyLlRleHQodGhpcy5nYW1lLCB4ICsgMzUsIHkgKyA0NSwgdmFsLnRvU3RyaW5nKCksIHN0eWxlKTtcblx0XHR0aGlzLnR4dFZhbHVlLmFuY2hvci5zZXRUbyguNSwgLjUpO1xuXHRcdHRoaXMuYWRkKHRoaXMudHh0VmFsdWUpO1xuXHR9XG5cblx0X2NyZWF0ZUNsYXNzKE51bWJlckJveCwgW3tcblx0XHRrZXk6IFwic2V0VmFsdWVcIixcblx0XHR2YWx1ZTogZnVuY3Rpb24gc2V0VmFsdWUodmFsKSB7XG5cdFx0XHR0aGlzLnR4dFZhbHVlLnRleHQgPSB2YWwudG9TdHJpbmcoKTtcblx0XHR9XG5cdH1dKTtcblxuXHRyZXR1cm4gTnVtYmVyQm94O1xufSkoUGhhc2VyLkdyb3VwKTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBOdW1iZXJCb3g7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk5VmMyVnljeTlzWlhOellXNWtjbTh2U0dGamEybHVaeTlLVXk5SFFVMUZMMUJJUVZORlVpOWliMjlyTFhSeVlYWnBjeTFtWVdGekwxUnZkMlZ5UkdWbVpXNXpaUzl6Y21NdmNISmxabUZpY3k5T2RXMWlaWEpDYjNndWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN096czdPenM3U1VGQmNVSXNVMEZCVXp0WFFVRlVMRk5CUVZNN08wRkJRMnhDTEZWQlJGTXNVMEZCVXl4RFFVTnFRaXhKUVVGSkxFVkJRVVVzVDBGQlR5eEZRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFMUJRVTBzUlVGQlF6dDNRa0ZFZWtJc1UwRkJVenM3UVVGRk5VSXNOa0pCUm0xQ0xGTkJRVk1zTmtOQlJYUkNMRWxCUVVrc1JVRkJSU3hOUVVGTkxFVkJRVVU3UVVGRGNFSXNUVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRPMEZCUXpOQ0xFMUJRVWtzUzBGQlN5eEhRVUZITzBGQlExZ3NUMEZCU1N4RlFVRkZMRmxCUVZrN1FVRkRiRUlzVVVGQlN5eEZRVUZGTEZGQlFWRTdRVUZEWml4UFFVRkpMRVZCUVVVc1RVRkJUVHRIUVVOYUxFTkJRVU03UVVGRFJpeE5RVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRWxCUVVrc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGRE9VSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkRWQ3hEUVVGRExFZEJRVWNzUlVGQlJTeEZRVU5PTEVOQlFVTXNSMEZCUnl4RlFVRkZMRVZCUTA0c1IwRkJSeXhEUVVGRExGRkJRVkVzUlVGQlJTeEZRVU5rTEV0QlFVc3NRMEZEVEN4RFFVRkRPMEZCUTBZc1RVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dEJRVU5zUXl4TlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0RlFVTjRRanM3WTBGc1FtMUNMRk5CUVZNN08xTkJiMEp5UWl4clFrRkJReXhIUVVGSExFVkJRVU03UVVGRFdpeFBRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1IwRkJSeXhIUVVGSExFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTTdSMEZEY0VNN096dFJRWFJDYlVJc1UwRkJVenRIUVVGVExFMUJRVTBzUTBGQlF5eExRVUZMT3p0eFFrRkJPVUlzVTBGQlV5SXNJbVpwYkdVaU9pSXZWWE5sY25NdmJHVnpjMkZ1WkhKdkwwaGhZMnRwYm1jdlNsTXZSMEZOUlM5UVNFRlRSVkl2WW05dmF5MTBjbUYyYVhNdFptRmhjeTlVYjNkbGNrUmxabVZ1YzJVdmMzSmpMM0J5WldaaFluTXZUblZ0WW1WeVFtOTRMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdUblZ0WW1WeVFtOTRJR1Y0ZEdWdVpITWdVR2hoYzJWeUxrZHliM1Z3SUh0Y2JseDBZMjl1YzNSeWRXTjBiM0lvWjJGdFpTd2dZbWRoYzNObGRDd2dkbUZzTENCNExDQjVMQ0J3WVhKbGJuUXBlMXh1WEhSY2RITjFjR1Z5S0dkaGJXVXNJSEJoY21WdWRDazdYRzVjZEZ4MGRHaHBjeTVqY21WaGRHVW9lQ3dnZVN3Z1ltZGhjM05sZENrN1hHNWNkRngwZG1GeUlITjBlV3hsSUQwZ2UxeHVYSFJjZEZ4MFptOXVkRG9nWENJek1IQjRJR0Z5YVdGc1hDSXNYRzVjZEZ4MFhIUmhiR2xuYmpvZ1hDSmpaVzUwWlhKY0lpeGNibHgwWEhSY2RHWnBiR3c2SUZ3aUkyWm1abHdpWEc1Y2RGeDBmVHRjYmx4MFhIUjBhR2x6TG5SNGRGWmhiSFZsSUQwZ2JtVjNJRkJvWVhObGNpNVVaWGgwS0Z4dVhIUmNkRngwZEdocGN5NW5ZVzFsTEZ4dVhIUmNkRngwZUNBcklETTFMRnh1WEhSY2RGeDBlU0FySURRMUxGeHVYSFJjZEZ4MGRtRnNMblJ2VTNSeWFXNW5LQ2tzWEc1Y2RGeDBYSFJ6ZEhsc1pWeHVYSFJjZENrN1hHNWNkRngwZEdocGN5NTBlSFJXWVd4MVpTNWhibU5vYjNJdWMyVjBWRzhvTGpVc0xqVXBPMXh1WEhSY2RIUm9hWE11WVdSa0tIUm9hWE11ZEhoMFZtRnNkV1VwTzF4dVhIUjlYRzVjYmx4MGMyVjBWbUZzZFdVb2RtRnNLWHRjYmx4MFhIUjBhR2x6TG5SNGRGWmhiSFZsTG5SbGVIUWdQU0IyWVd3dWRHOVRkSEpwYm1jb0tUdGNibHgwZlZ4dWZWeHVJbDE5IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQoX3gsIF94MiwgX3gzKSB7IHZhciBfYWdhaW4gPSB0cnVlOyBfZnVuY3Rpb246IHdoaWxlIChfYWdhaW4pIHsgdmFyIG9iamVjdCA9IF94LCBwcm9wZXJ0eSA9IF94MiwgcmVjZWl2ZXIgPSBfeDM7IF9hZ2FpbiA9IGZhbHNlOyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgX3ggPSBwYXJlbnQ7IF94MiA9IHByb3BlcnR5OyBfeDMgPSByZWNlaXZlcjsgX2FnYWluID0gdHJ1ZTsgZGVzYyA9IHBhcmVudCA9IHVuZGVmaW5lZDsgY29udGludWUgX2Z1bmN0aW9uOyB9IH0gZWxzZSBpZiAoJ3ZhbHVlJyBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfSB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgJyArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFNrZWxldG9uID0gKGZ1bmN0aW9uIChfUGhhc2VyJFBsdWdpbiRJc29tZXRyaWMkSXNvU3ByaXRlKSB7XG5cdF9pbmhlcml0cyhTa2VsZXRvbiwgX1BoYXNlciRQbHVnaW4kSXNvbWV0cmljJElzb1Nwcml0ZSk7XG5cblx0ZnVuY3Rpb24gU2tlbGV0b24oZ2FtZSwgeCwgeSwgZnJhbWUpIHtcblx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2tlbGV0b24pO1xuXG5cdFx0X2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2tlbGV0b24ucHJvdG90eXBlKSwgJ2NvbnN0cnVjdG9yJywgdGhpcykuY2FsbCh0aGlzLCBnYW1lLCB4LCB5LCAwLCAnc2tlbGV0b24nLCBmcmFtZSk7XG5cblx0XHR0aGlzLndhbGtBbmltID0gdGhpcy5hbmltYXRpb25zLmFkZCgnd2FsaycsIFsxMCwgMTFdKTtcblx0XHR0aGlzLmFuaW1hdGlvbnMuYWRkKCdodXJ0JywgWzEyXSk7XG5cdFx0dGhpcy5hbmltYXRpb25zLmFkZCgnYXR0YWNrJywgWzEzLCAxNCwgMTMsIDE0LCAxNCwgMTMsIDE0XSk7XG5cblx0XHR0aGlzLmFuaW1hdGlvbnMucGxheSgnd2FsaycsIDIsIHRydWUpO1xuXG5cdFx0dGhpcy5hbmNob3Iuc2V0VG8oLjUsIC41KTtcblxuXHRcdHRoaXMuZ2FtZS5waHlzaWNzLmVuYWJsZSh0aGlzLCBQaGFzZXIuUGh5c2ljcy5BUkNBREUpO1xuXG5cdFx0dGhpcy5wYXRoLCB0aGlzLnBhdGhQb3NpdGlvbjtcblxuXHRcdHRoaXMuaGVhbHRoID0gNTtcblx0XHR0aGlzLndvcnRoID0gMjA7XG5cdFx0dGhpcy5zcGVlZCA9IDEwMDAgKyBNYXRoLnJhbmRvbSgpICogMzAwMDtcblxuXHRcdHRoaXMucGF0aEZpbmlzaGVkID0gbmV3IFBoYXNlci5TaWduYWwoKTtcblx0fVxuXG5cdC8qXG4gZGFtYWdlKHZhbHVlKXtcbiBcdHRoaXMuaGVhbHRoIC09IHZhbHVlO1xuIFx0aWYgKHRoaXMuaGVhbHRoIDw9IDApe1xuIFx0XHR0aGlzLmtpbGwoKTtcbiBcdH1cbiB9Ki9cblxuXHRfY3JlYXRlQ2xhc3MoU2tlbGV0b24sIFt7XG5cdFx0a2V5OiAnc2V0UGF0aCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHNldFBhdGgocGF0aCkge1xuXHRcdFx0dGhpcy5wYXRoID0gcGF0aDtcblx0XHRcdHRoaXMucGF0aFBvc2l0aW9uID0gMDtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdhZHZhbmNlVGlsZScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFkdmFuY2VUaWxlKCkge1xuXHRcdFx0dGhpcy5wYXRoUG9zaXRpb24gKz0gMTtcblxuXHRcdFx0aWYgKHRoaXMucGF0aFBvc2l0aW9uIDwgdGhpcy5wYXRoLmxlbmd0aCkge1xuXHRcdFx0XHQvL3R3ZWVuXG5cdFx0XHRcdGlmICh0aGlzLnBhdGhbdGhpcy5wYXRoUG9zaXRpb25dLnggPiB0aGlzLmlzb1gpIHtcblx0XHRcdFx0XHR0aGlzLnNjYWxlLnggPSAxO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuc2NhbGUueCA9IC0xO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy53YWxrTW90aW9uID0gdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzKS50byh7XG5cdFx0XHRcdFx0aXNvWDogdGhpcy5wYXRoW3RoaXMucGF0aFBvc2l0aW9uXS54LFxuXHRcdFx0XHRcdGlzb1k6IHRoaXMucGF0aFt0aGlzLnBhdGhQb3NpdGlvbl0ueVxuXHRcdFx0XHR9LCB0aGlzLnNwZWVkLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLCB0cnVlKTtcblx0XHRcdFx0dGhpcy53YWxrTW90aW9uLm9uQ29tcGxldGUuYWRkKHRoaXMuYWR2YW5jZVRpbGUsIHRoaXMpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5hbmltYXRpb25zLnBsYXkoXCJhdHRhY2tcIiwgMik7XG5cdFx0XHRcdHRoaXMuYW5pbWF0aW9ucy5jdXJyZW50QW5pbS5vbkNvbXBsZXRlLmFkZE9uY2UodGhpcy5hdHRhY2tPdmVyLCB0aGlzKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdhdHRhY2tPdmVyJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXR0YWNrT3ZlcigpIHtcblx0XHRcdHRoaXMucGF0aEZpbmlzaGVkLmRpc3BhdGNoKHRoaXMpO1xuXHRcdH1cblx0fV0pO1xuXG5cdHJldHVybiBTa2VsZXRvbjtcbn0pKFBoYXNlci5QbHVnaW4uSXNvbWV0cmljLklzb1Nwcml0ZSk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFNrZWxldG9uO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXNaWE56WVc1a2NtOHZTR0ZqYTJsdVp5OUtVeTlIUVUxRkwxQklRVk5GVWk5aWIyOXJMWFJ5WVhacGN5MW1ZV0Z6TDFSdmQyVnlSR1ZtWlc1elpTOXpjbU12Y0hKbFptRmljeTlUYTJWc1pYUnZiaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPenM3T3pzN096dEpRVUZ4UWl4UlFVRlJPMWRCUVZJc1VVRkJVVHM3UVVGRGFrSXNWVUZFVXl4UlFVRlJMRU5CUTJoQ0xFbEJRVWtzUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRXRCUVVzc1JVRkJRenQzUWtGRVZpeFJRVUZST3p0QlFVVXpRaXcyUWtGR2JVSXNVVUZCVVN3MlEwRkZja0lzU1VGQlNTeEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxGVkJRVlVzUlVGQlJTeExRVUZMTEVWQlFVVTdPMEZCUlhoRExFMUJRVWtzUTBGQlF5eFJRVUZSTEVkQlFVY3NTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhIUVVGSExFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRGNrUXNUVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhIUVVGSExFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOc1F5eE5RVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWRCUVVjc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE96dEJRVVYwUkN4TlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE96dEJRVVYwUXl4TlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZGTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNN08wRkJSVEZDTEUxQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVWQlFVVXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6czdRVUZGZEVRc1RVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRPenRCUVVVM1FpeE5RVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVOb1FpeE5RVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRVZCUVVVc1EwRkJRenRCUVVOb1FpeE5RVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVkQlFVY3NTVUZCU1N4RFFVRkRPenRCUVVWNlF5eE5RVUZKTEVOQlFVTXNXVUZCV1N4SFFVRkhMRWxCUVVrc1RVRkJUU3hEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETzBWQlEzaERPenM3T3pzN096czdPMk5CY2tKdFFpeFJRVUZST3p0VFFTdENja0lzYVVKQlFVTXNTVUZCU1N4RlFVRkRPMEZCUTFvc1QwRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTTdRVUZEYWtJc1QwRkJTU3hEUVVGRExGbEJRVmtzUjBGQlJ5eERRVUZETEVOQlFVTTdSMEZEZEVJN096dFRRVVZWTEhWQ1FVRkZPMEZCUTFvc1QwRkJTU3hEUVVGRExGbEJRVmtzU1VGQlNTeERRVUZETEVOQlFVTTdPMEZCUlhaQ0xFOUJRVWNzU1VGQlNTeERRVUZETEZsQlFWa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlF6czdRVUZGZGtNc1VVRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUXp0QlFVTTNReXhUUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1MwRkRha0lzVFVGQlRUdEJRVU5PTEZOQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETzB0QlEyeENPenRCUVVWRUxGRkJRVWtzUTBGQlF5eFZRVUZWTEVkQlFVY3NTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJRenRCUVVNM1F5eFRRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTndReXhUUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU1zUTBGQlF6dExRVU53UXl4RlFVRkZMRWxCUVVrc1EwRkJReXhMUVVGTExFVkJRVVVzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzBGQlEycEVMRkZCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVlVGQlZTeERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzBsQlEzWkVMRTFCUVUwN1FVRkRUaXhSUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRGJFTXNVVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhYUVVGWExFTkJRVU1zVlVGQlZTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzBsQlEzUkZPMGRCUTBRN096dFRRVVZUTEhOQ1FVRkZPMEZCUTFnc1QwRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1IwRkRha003T3p0UlFUVkViVUlzVVVGQlVUdEhRVUZUTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExGTkJRVk03TzNGQ1FVRnNSQ3hSUVVGUklpd2labWxzWlNJNklpOVZjMlZ5Y3k5c1pYTnpZVzVrY204dlNHRmphMmx1Wnk5S1V5OUhRVTFGTDFCSVFWTkZVaTlpYjI5ckxYUnlZWFpwY3kxbVlXRnpMMVJ2ZDJWeVJHVm1aVzV6WlM5emNtTXZjSEpsWm1GaWN5OVRhMlZzWlhSdmJpNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklGTnJaV3hsZEc5dUlHVjRkR1Z1WkhNZ1VHaGhjMlZ5TGxCc2RXZHBiaTVKYzI5dFpYUnlhV011U1hOdlUzQnlhWFJsZTF4dVhIUmpiMjV6ZEhKMVkzUnZjaWhuWVcxbExDQjRMQ0I1TENCbWNtRnRaU2w3WEc1Y2RGeDBjM1Z3WlhJb1oyRnRaU3dnZUN3Z2VTd2dNQ3dnSjNOclpXeGxkRzl1Snl3Z1puSmhiV1VwTzF4dVhHNWNkRngwZEdocGN5NTNZV3hyUVc1cGJTQTlJSFJvYVhNdVlXNXBiV0YwYVc5dWN5NWhaR1FvSjNkaGJHc25MQ0JiTVRBc01URmRLVHRjYmx4MFhIUjBhR2x6TG1GdWFXMWhkR2x2Ym5NdVlXUmtLQ2RvZFhKMEp5d2dXekV5WFNrN1hHNWNkRngwZEdocGN5NWhibWx0WVhScGIyNXpMbUZrWkNnbllYUjBZV05ySnl3Z1d6RXpMREUwTERFekxERTBMREUwTERFekxERTBYU2s3WEc1Y2JseDBYSFIwYUdsekxtRnVhVzFoZEdsdmJuTXVjR3hoZVNnbmQyRnNheWNzSURJc0lIUnlkV1VwTzF4dVhHNWNkRngwZEdocGN5NWhibU5vYjNJdWMyVjBWRzhvTGpVc0lDNDFLVHRjYmx4dVhIUmNkSFJvYVhNdVoyRnRaUzV3YUhsemFXTnpMbVZ1WVdKc1pTaDBhR2x6TENCUWFHRnpaWEl1VUdoNWMybGpjeTVCVWtOQlJFVXBPMXh1WEc1Y2RGeDBkR2hwY3k1d1lYUm9MQ0IwYUdsekxuQmhkR2hRYjNOcGRHbHZianRjYmx4dVhIUmNkSFJvYVhNdWFHVmhiSFJvSUQwZ05UdGNibHgwWEhSMGFHbHpMbmR2Y25Sb0lEMGdNakE3WEc1Y2RGeDBkR2hwY3k1emNHVmxaQ0E5SURFd01EQWdLeUJOWVhSb0xuSmhibVJ2YlNncElDb2dNekF3TUR0Y2JseHVYSFJjZEhSb2FYTXVjR0YwYUVacGJtbHphR1ZrSUQwZ2JtVjNJRkJvWVhObGNpNVRhV2R1WVd3b0tUdGNibHgwZlZ4dVhHNWNkQzhxWEc1Y2RHUmhiV0ZuWlNoMllXeDFaU2w3WEc1Y2RGeDBkR2hwY3k1b1pXRnNkR2dnTFQwZ2RtRnNkV1U3WEc1Y2RGeDBhV1lnS0hSb2FYTXVhR1ZoYkhSb0lEdzlJREFwZTF4dVhIUmNkRngwZEdocGN5NXJhV3hzS0NrN1hHNWNkRngwZlZ4dVhIUjlLaTljYmx4dVhIUnpaWFJRWVhSb0tIQmhkR2dwZTF4dVhIUmNkSFJvYVhNdWNHRjBhQ0E5SUhCaGRHZzdYRzVjZEZ4MGRHaHBjeTV3WVhSb1VHOXphWFJwYjI0Z1BTQXdPMXh1WEhSOVhHNWNibHgwWVdSMllXNWpaVlJwYkdVb0tYdGNibHgwWEhSMGFHbHpMbkJoZEdoUWIzTnBkR2x2YmlBclBTQXhPMXh1WEc1Y2RGeDBhV1lvZEdocGN5NXdZWFJvVUc5emFYUnBiMjRnUENCMGFHbHpMbkJoZEdndWJHVnVaM1JvS1h0Y2JseDBYSFJjZEM4dmRIZGxaVzVjYmx4MFhIUmNkR2xtS0hSb2FYTXVjR0YwYUZ0MGFHbHpMbkJoZEdoUWIzTnBkR2x2YmwwdWVDQStJSFJvYVhNdWFYTnZXQ2w3WEc1Y2RGeDBYSFJjZEhSb2FYTXVjMk5oYkdVdWVDQTlJREU3WEc1Y2RGeDBYSFI5SUdWc2MyVWdlMXh1WEhSY2RGeDBYSFIwYUdsekxuTmpZV3hsTG5nZ1BTQXRNVHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwZEdocGN5NTNZV3hyVFc5MGFXOXVJRDBnZEdocGN5NW5ZVzFsTG1Ga1pDNTBkMlZsYmloMGFHbHpLUzUwYnloN1hHNWNkRngwWEhSY2RGeDBhWE52V0RvZ2RHaHBjeTV3WVhSb1czUm9hWE11Y0dGMGFGQnZjMmwwYVc5dVhTNTRMRnh1WEhSY2RGeDBYSFJjZEdsemIxazZJSFJvYVhNdWNHRjBhRnQwYUdsekxuQmhkR2hRYjNOcGRHbHZibDB1ZVN4Y2JseDBYSFJjZEZ4MGZTeGNkSFJvYVhNdWMzQmxaV1FzSUZCb1lYTmxjaTVGWVhOcGJtY3VUR2x1WldGeUxrNXZibVVzSUhSeWRXVXBPMXh1WEhSY2RGeDBkR2hwY3k1M1lXeHJUVzkwYVc5dUxtOXVRMjl0Y0d4bGRHVXVZV1JrS0hSb2FYTXVZV1IyWVc1alpWUnBiR1VzSUhSb2FYTXBPMXh1WEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSMGFHbHpMbUZ1YVcxaGRHbHZibk11Y0d4aGVTaGNJbUYwZEdGamExd2lMQ0F5S1R0Y2JseDBYSFJjZEhSb2FYTXVZVzVwYldGMGFXOXVjeTVqZFhKeVpXNTBRVzVwYlM1dmJrTnZiWEJzWlhSbExtRmtaRTl1WTJVb2RHaHBjeTVoZEhSaFkydFBkbVZ5TENCMGFHbHpLVHRjYmx4MFhIUjlYRzVjZEgxY2JseHVYSFJoZEhSaFkydFBkbVZ5S0NsN1hHNWNkRngwZEdocGN5NXdZWFJvUm1sdWFYTm9aV1F1WkdsemNHRjBZMmdvZEdocGN5azdYRzVjZEgxY2JuMWNiaUpkZlE9PSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG52YXIgQm9vdCA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEJvb3QoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJvb3QpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEJvb3QsIFt7XG4gICAga2V5OiAncHJlbG9hZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByZWxvYWQoKSB7XG4gICAgICB0aGlzLmxvYWQuaW1hZ2UoJ3ByZWxvYWRlcicsICdhc3NldHMvaW1hZ2VzL2xvYWRpbmdfYmFyLnBuZycpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NyZWF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHRoaXMuZ2FtZS5pbnB1dC5tYXhQb2ludGVycyA9IDE7XG4gICAgICB0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ3ByZWxvYWQnKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQm9vdDtcbn0pKCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IEJvb3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5c1pYTnpZVzVrY204dlNHRmphMmx1Wnk5S1V5OUhRVTFGTDFCSVFWTkZVaTlpYjI5ckxYUnlZWFpwY3kxbVlXRnpMMVJ2ZDJWeVJHVm1aVzV6WlM5emNtTXZjM1JoZEdWekwwSnZiM1F1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3p0SlFVRnhRaXhKUVVGSk8xZEJRVW9zU1VGQlNUc3dRa0ZCU2l4SlFVRkpPenM3WlVGQlNpeEpRVUZKT3p0WFFVVm9RaXh0UWtGQlJ6dEJRVU5TTEZWQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGZEJRVmNzUlVGQlJTd3JRa0ZCSzBJc1EwRkJReXhEUVVGRE8wdEJReTlFT3pzN1YwRkZTeXhyUWtGQlJ6dEJRVU5RTEZWQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGZEJRVmNzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEYUVNc1ZVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE8wdEJRMnhET3pzN1UwRlVhMElzU1VGQlNUczdPM0ZDUVVGS0xFbEJRVWtpTENKbWFXeGxJam9pTDFWelpYSnpMMnhsYzNOaGJtUnlieTlJWVdOcmFXNW5MMHBUTDBkQlRVVXZVRWhCVTBWU0wySnZiMnN0ZEhKaGRtbHpMV1poWVhNdlZHOTNaWEpFWldabGJuTmxMM055WXk5emRHRjBaWE12UW05dmRDNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklFSnZiM1FnZTF4eVhHNWNjbHh1SUNCd2NtVnNiMkZrS0NrZ2UxeHlYRzRnSUNBZ2RHaHBjeTVzYjJGa0xtbHRZV2RsS0Nkd2NtVnNiMkZrWlhJbkxDQW5ZWE56WlhSekwybHRZV2RsY3k5c2IyRmthVzVuWDJKaGNpNXdibWNuS1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUdOeVpXRjBaU2dwSUh0Y2NseHVJQ0FnSUhSb2FYTXVaMkZ0WlM1cGJuQjFkQzV0WVhoUWIybHVkR1Z5Y3lBOUlERTdYSEpjYmlBZ0lDQjBhR2x6TG1kaGJXVXVjM1JoZEdVdWMzUmhjblFvSjNCeVpXeHZZV1FuS1R0Y2NseHVJQ0I5WEhKY2JseHlYRzU5SWwxOSIsIi8vcmVxdWlyZSBvdGhlciBjb21wb25lbnRzXG5cbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KF94LCBfeDIsIF94MykgeyB2YXIgX2FnYWluID0gdHJ1ZTsgX2Z1bmN0aW9uOiB3aGlsZSAoX2FnYWluKSB7IHZhciBvYmplY3QgPSBfeCwgcHJvcGVydHkgPSBfeDIsIHJlY2VpdmVyID0gX3gzOyBfYWdhaW4gPSBmYWxzZTsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IF94ID0gcGFyZW50OyBfeDIgPSBwcm9wZXJ0eTsgX3gzID0gcmVjZWl2ZXI7IF9hZ2FpbiA9IHRydWU7IGRlc2MgPSBwYXJlbnQgPSB1bmRlZmluZWQ7IGNvbnRpbnVlIF9mdW5jdGlvbjsgfSB9IGVsc2UgaWYgKCd2YWx1ZScgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH0gfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH1cblxudmFyIF9wcmVmYWJzSHVtYW5KcyA9IHJlcXVpcmUoJy4uL3ByZWZhYnMvSHVtYW4uanMnKTtcblxudmFyIF9wcmVmYWJzSHVtYW5KczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcmVmYWJzSHVtYW5Kcyk7XG5cbnZhciBfcHJlZmFic1NrZWxldG9uSnMgPSByZXF1aXJlKCcuLi9wcmVmYWJzL1NrZWxldG9uLmpzJyk7XG5cbnZhciBfcHJlZmFic1NrZWxldG9uSnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJlZmFic1NrZWxldG9uSnMpO1xuXG52YXIgX3ByZWZhYnNOdW1iZXJCb3hKcyA9IHJlcXVpcmUoJy4uL3ByZWZhYnMvTnVtYmVyQm94LmpzJyk7XG5cbnZhciBfcHJlZmFic051bWJlckJveEpzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ByZWZhYnNOdW1iZXJCb3hKcyk7XG5cbnZhciBFbmVtaWVzID0gKGZ1bmN0aW9uICgpIHtcblx0ZnVuY3Rpb24gRW5lbWllcyhnYW1lLCBwYXJlbnRHcm91cCkge1xuXHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFbmVtaWVzKTtcblxuXHRcdHRoaXMuZ2FtZSA9IGdhbWU7XG5cdFx0dGhpcy5fZW5lbWllcyA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAocGFyZW50R3JvdXApO1xuXHR9XG5cblx0X2NyZWF0ZUNsYXNzKEVuZW1pZXMsIFt7XG5cdFx0a2V5OiAnZmluZE5lYXJlc3QnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBmaW5kTmVhcmVzdCh4YywgeWMpIHtcblx0XHRcdHZhciBsb3dlc3RDaGlsZCA9IG51bGw7XG5cdFx0XHR2YXIgbG93ZXN0RGlzdGFuY2UgPSAxMDAwMDAwMDtcblxuXHRcdFx0dGhpcy5fZW5lbWllcy5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuXHRcdFx0XHR2YXIgZGlzdGFuY2UgPSBQaGFzZXIuTWF0aC5kaXN0YW5jZSh4YywgeWMsIGNoaWxkLngsIGNoaWxkLnkpO1xuXG5cdFx0XHRcdGlmICghbG93ZXN0Q2hpbGQpIHtcblx0XHRcdFx0XHRsb3dlc3RDaGlsZCA9IGNoaWxkO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGlmIChkaXN0YW5jZSA8IGxvd2VzdERpc3RhbmNlKSB7XG5cdFx0XHRcdFx0XHRsb3dlc3RDaGlsZCA9IGNoaWxkO1xuXHRcdFx0XHRcdFx0bG93ZXN0RGlzdGFuY2UgPSBkaXN0YW5jZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMuX2VuZW1pZXMsIHRydWUpOyAvLyB3aGF0J3MgdHJ1ZVxuXHRcdFx0cmV0dXJuIGxvd2VzdENoaWxkO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ2FkZCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFkZChvYmopIHtcblx0XHRcdHRoaXMuX2VuZW1pZXMuYWRkKG9iaik7XG5cdFx0fVxuXHR9XSk7XG5cblx0cmV0dXJuIEVuZW1pZXM7XG59KSgpO1xuXG52YXIgR2FtZSA9IChmdW5jdGlvbiAoX1BoYXNlciRTdGF0ZSkge1xuXHRfaW5oZXJpdHMoR2FtZSwgX1BoYXNlciRTdGF0ZSk7XG5cblx0ZnVuY3Rpb24gR2FtZSgpIHtcblx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgR2FtZSk7XG5cblx0XHQvL29iamVjdCBsZXZlbCBwcm9wZXJ0aWVzXG5cdFx0X2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoR2FtZS5wcm90b3R5cGUpLCAnY29uc3RydWN0b3InLCB0aGlzKS5jYWxsKHRoaXMpO1xuXHR9XG5cblx0X2NyZWF0ZUNsYXNzKEdhbWUsIFt7XG5cdFx0a2V5OiAnY3JlYXRlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuXHRcdFx0dGhpcy5wbGF5ZXJMaWZlID0gMTA7XG5cdFx0XHR0aGlzLmh1bWFucyA9IDA7XG5cdFx0XHR0aGlzLm1vbmV5ID0gNTA7XG5cdFx0XHR0aGlzLnNwYXduVGltZSA9IDIwMDA7XG5cdFx0XHR0aGlzLm1hcERhdGEgPSB0aGlzLmdhbWUuY2FjaGUuZ2V0SlNPTignbWFwZGF0YScpO1xuXHRcdFx0dGhpcy5nYW1lLnBoeXNpY3Muc3RhcnRTeXN0ZW0oUGhhc2VyLlBoeXNpY3MuQVJDQURFKTtcblx0XHRcdHRoaXMuZ2FtZS50aW1lLmFkdmFuY2VkVGltaW5nID0gdHJ1ZTtcblx0XHRcdHRoaXMuZ2FtZS5hZGQuc3ByaXRlKDAsIDAsIFwiZ2FtZWJnXCIpO1xuXHRcdFx0dGhpcy5nYW1lLnBsdWdpbnMuYWRkKG5ldyBQaGFzZXIuUGx1Z2luLklzb21ldHJpYyh0aGlzLmdhbWUpKTtcblx0XHRcdHRoaXMuZ2FtZS5pc28uYW5jaG9yLnNldFRvKDAuNSwgMC4yKTtcblx0XHRcdHRoaXMuaXNvR3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XG5cdFx0XHR0aGlzLmlzb0NoYXJzID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xuXHRcdFx0dGhpcy5hbGxpZXMgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKHRoaXMuaXNvQ2hhcnMpO1xuXHRcdFx0dGhpcy5lbmVtaWVzID0gbmV3IEVuZW1pZXModGhpcy5nYW1lLCB0aGlzLmlzb0NoYXJzKTtcblx0XHRcdHRoaXMuYXJyb3dzID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xuXHRcdFx0dGhpcy5hcnJvd3MuZW5hYmxlQm9keSA9IHRydWU7XG5cdFx0XHR0aGlzLmFycm93cy5waHlzaWNzQm9keVR5cGUgPSBQaGFzZXIuUGh5c2ljcy5BUkNBREU7XG5cdFx0XHR0aGlzLmhlYWx0aEJveCA9IG5ldyBfcHJlZmFic051bWJlckJveEpzMlsnZGVmYXVsdCddKHRoaXMuZ2FtZSwgJ2hlYWx0aGhvbGRlcicsIHRoaXMucGxheWVyTGlmZSwgMTAsIDEwKTtcblx0XHRcdHRoaXMuc2NvcmVCb3ggPSBuZXcgX3ByZWZhYnNOdW1iZXJCb3hKczJbJ2RlZmF1bHQnXSh0aGlzLmdhbWUsICdtb25leWhvbGRlcicsIHRoaXMubW9uZXksIDEwMCwgMTApO1xuXG5cdFx0XHQvL1xuXHRcdFx0Ly8gVEVTVFxuXHRcdFx0Ly92YXIgX2h1bWFuID0gbmV3IEh1bWFuKHRoaXMuZ2FtZSwgMjAwLCAyMDApO1xuXHRcdFx0Ly90aGlzLmFsbGllcy5hZGQoX2h1bWFuKTtcblx0XHRcdC8vdmFyIF9za2VsZXRvbiA9IG5ldyBTa2VsZXRvbih0aGlzLmdhbWUsIDMwMCwgMjAwKTtcblx0XHRcdC8vdGhpcy5hbGxpZXMuYWRkKF9za2VsZXRvbik7XG5cblx0XHRcdHRoaXMuc3Bhd25UaWxlcygpO1xuXG5cdFx0XHR0aGlzLmVhc3lzdGFyID0gbmV3IEVhc3lTdGFyLmpzKCk7XG5cdFx0XHR0aGlzLmVhc3lzdGFyLnNldEdyaWQodGhpcy5tYXBEYXRhLnRpbGVNYXApO1xuXHRcdFx0dGhpcy5lYXN5c3Rhci5zZXRBY2NlcHRhYmxlVGlsZXMoWzFdKTtcblx0XHRcdHRoaXMuYm91bmRGb3VuZCA9IHRoaXMucGF0aEZvdW5kLmJpbmQodGhpcyk7XG5cdFx0XHR0aGlzLmVhc3lzdGFyLmZpbmRQYXRoKDEsIDAsIDAsIDQsIHRoaXMuYm91bmRGb3VuZCk7XG5cblx0XHRcdHRoaXMuY3Vyc29yUG9zID0gbmV3IFBoYXNlci5QbHVnaW4uSXNvbWV0cmljLlBvaW50MygpO1xuXHRcdFx0dGhpcy5uZXh0U3Bhd24gPSB0aGlzLmdhbWUudGltZS5ub3cgKyB0aGlzLnNwYXduVGltZTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICd1cGRhdGUnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUoKSB7XG5cdFx0XHR0aGlzLmdhbWUuaXNvLnVucHJvamVjdCh0aGlzLmdhbWUuaW5wdXQuYWN0aXZlUG9pbnRlci5wb3NpdGlvbiwgdGhpcy5jdXJzb3JQb3MpO1xuXHRcdFx0dGhpcy5pc29Hcm91cC5mb3JFYWNoKHRoaXMuY2hlY2tUaWxlcywgdGhpcywgZmFsc2UpO1xuXHRcdFx0aWYgKHRoaXMuZ2FtZS5pbnB1dC5hY3RpdmVQb2ludGVyLmlzRG93biAmJiB0aGlzLnNlbGVjdGVkVGlsZSkge1xuXHRcdFx0XHQvLyBob3cgY291bGQgdGhpcy5zZWxlY3RlZFRpbGUgYmUgbnVsbD9cblx0XHRcdFx0aWYgKCF0aGlzLnNlbGVjdGVkVGlsZS5vY2N1cGFudCAmJiB0aGlzLnNlbGVjdGVkVGlsZS5idXlhYmxlKSB7XG5cdFx0XHRcdFx0aWYgKHRoaXMubW9uZXkgPj0gNTApIHtcblx0XHRcdFx0XHRcdHZhciBodW1hbiA9IG5ldyBfcHJlZmFic0h1bWFuSnMyWydkZWZhdWx0J10odGhpcy5nYW1lLCB0aGlzLnNlbGVjdGVkVGlsZS5pc29YLCB0aGlzLnNlbGVjdGVkVGlsZS5pc29ZLCB0aGlzLmVuZW1pZXMsIHRoaXMuYXJyb3dzKTtcblx0XHRcdFx0XHRcdHRoaXMuYWxsaWVzLmFkZChodW1hbik7XG5cdFx0XHRcdFx0XHR0aGlzLnNlbGVjdGVkVGlsZS5vY2N1cGFudCA9IGh1bWFuO1xuXHRcdFx0XHRcdFx0dGhpcy5tb25leSAtPSA1MDtcblx0XHRcdFx0XHRcdHRoaXMuc2NvcmVCb3guc2V0VmFsdWUodGhpcy5tb25leSk7XG5cdFx0XHRcdFx0XHR0aGlzLmh1bWFucyArPSAxO1xuXHRcdFx0XHRcdFx0aWYgKHRoaXMuaHVtYW5zID09IDE2KSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuZ2FtZS5zdGF0ZS5zdGFydCgndmljdG9yeScpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmdhbWUucGh5c2ljcy5hcmNhZGUub3ZlcmxhcCh0aGlzLmFycm93cywgdGhpcy5lbmVtaWVzLl9lbmVtaWVzLCB0aGlzLmFycm93SGl0RW5lbXksIG51bGwsIHRoaXMpO1xuXG5cdFx0XHRpZiAodGhpcy5nYW1lLnRpbWUubm93ID4gdGhpcy5uZXh0U3Bhd24pIHtcblx0XHRcdFx0dGhpcy5zcGF3bkVuZW15KCk7XG5cdFx0XHRcdHRoaXMubmV4dFNwYXduID0gdGhpcy5nYW1lLnRpbWUubm93ICsgdGhpcy5zcGF3blRpbWUgKyBNYXRoLnJhbmRvbSgpICogdGhpcy5zcGF3blRpbWU7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuZWFzeXN0YXIuY2FsY3VsYXRlKCk7XG5cdFx0XHR0aGlzLmdhbWUuaXNvLnNpbXBsZVNvcnQodGhpcy5lbmVtaWVzLl9lbmVtaWVzKTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdzcGF3bkVuZW15Jyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gc3Bhd25FbmVteSgpIHtcblx0XHRcdHZhciBza2VsID0gbmV3IF9wcmVmYWJzU2tlbGV0b25KczJbJ2RlZmF1bHQnXSh0aGlzLmdhbWUsIHRoaXMuY29udmVydGVkUGF0aFswXS54LCB0aGlzLmNvbnZlcnRlZFBhdGhbMF0ueSk7XG5cdFx0XHRza2VsLnNldFBhdGgodGhpcy5jb252ZXJ0ZWRQYXRoKTtcblx0XHRcdHNrZWwuYWR2YW5jZVRpbGUoKTtcblx0XHRcdHNrZWwucGF0aEZpbmlzaGVkLmFkZE9uY2UodGhpcy5lbmVteUF0R29hbCwgdGhpcyk7XG5cdFx0XHR0aGlzLmVuZW1pZXMuYWRkKHNrZWwpO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ2VuZW15QXRHb2FsJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZW5lbXlBdEdvYWwoZW5lbXkpIHtcblx0XHRcdGVuZW15LmtpbGwoKTtcblx0XHRcdHRoaXMucGxheWVyTGlmZSAtPSAxO1xuXHRcdFx0dGhpcy5oZWFsdGhCb3guc2V0VmFsdWUodGhpcy5wbGF5ZXJMaWZlKTtcblx0XHRcdGlmICh0aGlzLnBsYXllckxpZmUgPD0gMCkge1xuXHRcdFx0XHR0aGlzLmdhbWVPdmVyKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnZ2FtZU92ZXInLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnYW1lT3ZlcigpIHtcblx0XHRcdHRoaXMuZ2FtZS5zdGF0ZS5zdGFydCgnZ2FtZW92ZXInKTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdhcnJvd0hpdEVuZW15Jyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXJyb3dIaXRFbmVteShhcnJvdywgZW5lbXkpIHtcblx0XHRcdGFycm93LmtpbGwoKTtcblx0XHRcdGVuZW15LmRhbWFnZSgxKTtcblx0XHRcdGlmICghZW5lbXkuYWxpdmUpIHtcblx0XHRcdFx0dGhpcy5tb25leSArPSBlbmVteS53b3J0aDtcblx0XHRcdFx0dGhpcy5zY29yZUJveC5zZXRWYWx1ZSh0aGlzLm1vbmV5KTtcblx0XHRcdFx0dGhpcy5zcGF3blRpbWUgPSBNYXRoLm1heCgwLCB0aGlzLnNwYXduVGltZSAtIDEwMCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnY2hlY2tUaWxlcycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGNoZWNrVGlsZXModGlsZSkge1xuXHRcdFx0dmFyIGluQm91bmRzID0gdGlsZS5pc29Cb3VuZHMuY29udGFpbnNYWSh0aGlzLmN1cnNvclBvcy54LCB0aGlzLmN1cnNvclBvcy55KTtcblxuXHRcdFx0aWYgKCF0aWxlLnNlbGVjdGVkICYmIGluQm91bmRzKSB7XG5cdFx0XHRcdHRpbGUuc2VsZWN0ZWQgPSB0cnVlO1xuXHRcdFx0XHR0aWxlLnRpbnQgPSAweDg2YmZkYTtcblx0XHRcdFx0dGhpcy5nYW1lLmFkZC50d2Vlbih0aWxlKS50byh7IGlzb1o6IDQgfSwgMjAwLCBQaGFzZXIuRWFzaW5nLlF1YWRyYXRpYy5Jbk91dCwgdHJ1ZSk7XG5cdFx0XHRcdHRoaXMuc2VsZWN0ZWRUaWxlID0gdGlsZTtcblx0XHRcdH0gZWxzZSBpZiAodGlsZS5zZWxlY3RlZCAmJiAhaW5Cb3VuZHMpIHtcblx0XHRcdFx0dGlsZS5zZWxlY3RlZCA9IGZhbHNlO1xuXHRcdFx0XHR0aWxlLnRpbnQgPSAweGZmZmZmZjtcblx0XHRcdFx0dGhpcy5nYW1lLmFkZC50d2Vlbih0aWxlKS50byh7IGlzb1o6IDAgfSwgMjAwLCBQaGFzZXIuRWFzaW5nLlF1YWRyYXRpYy5Jbk91dCwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnc3Bhd25UaWxlcycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHNwYXduVGlsZXMoKSB7XG5cdFx0XHR2YXIgc2l6ZSA9IDU1O1xuXHRcdFx0dmFyIG1hcFdpZHRoID0gdGhpcy5tYXBEYXRhLnRpbGVNYXBbMF0ubGVuZ3RoIC0gMTtcblx0XHRcdHZhciBtYXBIZWlnaHQgPSB0aGlzLm1hcERhdGEudGlsZU1hcC5sZW5ndGggLSAxO1xuXHRcdFx0dGhpcy5nYW1lVGlsZXMgPSBbXTtcblxuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0ICAgIHRpbGU7XG5cdFx0XHRmb3IgKHZhciB5ID0gMDsgeSA8PSBtYXBIZWlnaHQ7IHkrKykge1xuXG5cdFx0XHRcdHRoaXMuZ2FtZVRpbGVzW3ldID0gW107XG5cblx0XHRcdFx0Zm9yICh2YXIgeCA9IDA7IHggPD0gbWFwV2lkdGg7IHgrKykge1xuXHRcdFx0XHRcdHZhciB0aWxlTnVtYmVyID0gdGhpcy5tYXBEYXRhLnRpbGVNYXBbeV1beF07XG5cdFx0XHRcdFx0dmFyIHRpbGVOYW1lID0gdGhpcy5tYXBEYXRhLnRpbGVOYW1lc1t0aWxlTnVtYmVyXTtcblx0XHRcdFx0XHR0aWxlID0gdGhpcy5nYW1lLmFkZC5pc29TcHJpdGUoeCAqIHNpemUsIHkgKiBzaXplLCAwLCB0aWxlTmFtZSwgMCwgdGhpcy5pc29Hcm91cCk7XG5cdFx0XHRcdFx0dGlsZS5hbmNob3Iuc2V0KDAuNSwgMCk7XG5cdFx0XHRcdFx0dGlsZS5idXlhYmxlID0gdGlsZU51bWJlciA9PSAwID8gdHJ1ZSA6IGZhbHNlO1xuXHRcdFx0XHRcdHRoaXMuZ2FtZVRpbGVzW3ldW3hdID0gdGlsZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ3BhdGhGb3VuZCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHBhdGhGb3VuZChwYXRoKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhwYXRoKTtcblx0XHRcdGlmIChwYXRoICE9IG51bGwpIHtcblx0XHRcdFx0dGhpcy5jb252ZXJ0ZWRQYXRoID0gW107XG5cdFx0XHRcdHZhciBjdXJQb2ludDtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0Y3VyUG9pbnQgPSB0aGlzLmdhbWVUaWxlc1twYXRoW2ldLnldW3BhdGhbaV0ueF07XG5cdFx0XHRcdFx0dGhpcy5jb252ZXJ0ZWRQYXRoLnB1c2goeyB4OiBjdXJQb2ludC5pc29YLCB5OiBjdXJQb2ludC5pc29ZIH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XSk7XG5cblx0cmV0dXJuIEdhbWU7XG59KShQaGFzZXIuU3RhdGUpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBHYW1lO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXNaWE56WVc1a2NtOHZTR0ZqYTJsdVp5OUtVeTlIUVUxRkwxQklRVk5GVWk5aWIyOXJMWFJ5WVhacGN5MW1ZV0Z6TDFSdmQyVnlSR1ZtWlc1elpTOXpjbU12YzNSaGRHVnpMMGRoYldVdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN096czdPenM3T3pzN096aENRVVZyUWl4eFFrRkJjVUk3T3pzN2FVTkJRMnhDTEhkQ1FVRjNRanM3T3p0clEwRkRka0lzZVVKQlFYbENPenM3TzBsQlJYcERMRTlCUVU4N1FVRkRSQ3hWUVVST0xFOUJRVThzUTBGRFFTeEpRVUZKTEVWQlFVVXNWMEZCVnl4RlFVRkRPM2RDUVVSNlFpeFBRVUZQT3p0QlFVVlNMRTFCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETzBGQlEycENMRTFCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETzBWQlEzQkVPenRqUVVwSkxFOUJRVTg3TzFOQlRVUXNjVUpCUVVNc1JVRkJSU3hGUVVGRkxFVkJRVVVzUlVGQlF6dEJRVU5zUWl4UFFVRkpMRmRCUVZjc1IwRkJSeXhKUVVGSkxFTkJRVU03UVVGRGRrSXNUMEZCU1N4alFVRmpMRWRCUVVjc1VVRkJVU3hEUVVGRE96dEJRVVU1UWl4UFFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZUTEV0QlFVc3NSVUZCUXp0QlFVTndReXhSUVVGSkxGRkJRVkVzUjBGQlJ5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhGUVVGRkxFVkJRVVVzUlVGQlJTeEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZET3p0QlFVVTVSQ3hSUVVGSExFTkJRVU1zVjBGQlZ5eEZRVUZETzBGQlEyWXNaMEpCUVZjc1IwRkJSeXhMUVVGTExFTkJRVU03UzBGRGNFSXNUVUZCVFR0QlFVTk9MRk5CUVVrc1VVRkJVU3hIUVVGSExHTkJRV01zUlVGQlF6dEJRVU0zUWl4cFFrRkJWeXhIUVVGSExFdEJRVXNzUTBGQlF6dEJRVU53UWl4dlFrRkJZeXhIUVVGSExGRkJRVkVzUTBGQlF6dE5RVU14UWp0TFFVTkVPMGxCUTBRc1JVRkJSU3hKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMEZCUTNoQ0xGVkJRVThzVjBGQlZ5eERRVUZETzBkQlEyNUNPenM3VTBGRlJTeGhRVUZETEVkQlFVY3NSVUZCUXp0QlFVTlFMRTlCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMGRCUTNaQ096czdVVUV6UWtrc1QwRkJUenM3TzBsQk9FSlJMRWxCUVVrN1YwRkJTaXhKUVVGSk96dEJRVVZhTEZWQlJsRXNTVUZCU1N4SFFVVlVPM2RDUVVaTExFbEJRVWs3T3p0QlFVbHlRaXcyUWtGS2FVSXNTVUZCU1N3MlEwRkpZanRGUVVOVU96dGpRVXhyUWl4SlFVRkpPenRUUVU5cVFpeHJRa0ZCUnp0QlFVTlNMRTlCUVVrc1EwRkJReXhWUVVGVkxFZEJRVWNzUlVGQlJTeERRVUZETzBGQlEzSkNMRTlCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEyaENMRTlCUVVrc1EwRkJReXhMUVVGTExFZEJRVWNzUlVGQlJTeERRVUZETzBGQlEyaENMRTlCUVVrc1EwRkJReXhUUVVGVExFZEJRVWNzU1VGQlNTeERRVUZETzBGQlEyNUNMRTlCUVVrc1EwRkJReXhQUVVGUExFZEJRVWtzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzBGQlEzUkVMRTlCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZkQlFWY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZCTzBGQlEzQkVMRTlCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEdOQlFXTXNSMEZCUnl4SlFVRkpMRU5CUVVNN1FVRkRja01zVDBGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVNN1FVRkRja01zVDBGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZET1VRc1QwRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEY2tNc1QwRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF6dEJRVU4wUXl4UFFVRkpMRU5CUVVNc1VVRkJVU3hIUVVGSExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRE8wRkJRM1JETEU5QlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dEJRVU5xUkN4UFFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExFbEJRVWtzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzBGQlEzSkVMRTlCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU03UVVGRGNFTXNUMEZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETzBGQlF6bENMRTlCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zWlVGQlpTeEhRVUZITEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRE8wRkJRM0JFTEU5QlFVa3NRMEZCUXl4VFFVRlRMRWRCUVVrc2IwTkJRV01zU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlN4alFVRmpMRVZCUVVVc1NVRkJTU3hEUVVGRExGVkJRVlVzUlVGQlJTeEZRVUZGTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkRjRVlzVDBGQlNTeERRVUZETEZGQlFWRXNSMEZCU1N4dlEwRkJZeXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEdGQlFXRXNSVUZCUlN4SlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRkxFZEJRVWNzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXpzN096czdPenM3TzBGQlV6bEZMRTlCUVVrc1EwRkJReXhWUVVGVkxFVkJRVVVzUTBGQlF6czdRVUZGYkVJc1QwRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eEpRVUZKTEZGQlFWRXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJRenRCUVVOc1F5eFBRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMEZCUXpWRExFOUJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTNSRExFOUJRVWtzUTBGQlF5eFZRVUZWTEVkQlFVY3NTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdRVUZETlVNc1QwRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenM3UVVGRmNFUXNUMEZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhKUVVGSkxFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRE8wRkJRM1JFTEU5QlFVa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4SFFVRkhMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU03UjBGRGNrUTdPenRUUVVkTExHdENRVUZITzBGQlExSXNUMEZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExHRkJRV0VzUTBGQlF5eFJRVUZSTEVWQlFVVXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE8wRkJRMmhHTEU5QlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVWQlFVVXNTVUZCU1N4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRE8wRkJRM0JFTEU5QlFVY3NTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zWVVGQllTeERRVUZETEUxQlFVMHNTVUZCU1N4SlFVRkpMRU5CUVVNc1dVRkJXU3hGUVVGSE96dEJRVU01UkN4UlFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eFJRVUZSTEVsQlFVa3NTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhQUVVGUExFVkJRVU03UVVGRE0wUXNVMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhKUVVGSkxFVkJRVVVzUlVGQlF6dEJRVU51UWl4VlFVRkpMRXRCUVVzc1IwRkJSeXhuUTBGRFdDeEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVTlVMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zU1VGQlNTeEZRVU4wUWl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFbEJRVWtzUlVGRGRFSXNTVUZCU1N4RFFVRkRMRTlCUVU4c1JVRkRXaXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdRVUZEWkN4VlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0QlFVTjJRaXhWUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEZGQlFWRXNSMEZCUnl4TFFVRkxMRU5CUVVNN1FVRkRia01zVlVGQlNTeERRVUZETEV0QlFVc3NTVUZCU1N4RlFVRkZMRU5CUVVNN1FVRkRha0lzVlVGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBGQlEyNURMRlZCUVVrc1EwRkJReXhOUVVGTkxFbEJRVWtzUTBGQlF5eERRVUZETzBGQlEycENMRlZCUVVrc1NVRkJTU3hEUVVGRExFMUJRVTBzU1VGQlNTeEZRVUZGTEVWQlFVTTdRVUZEY2tJc1YwRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE8wOUJRMnBETzAxQlEwUTdTMEZEUkR0SlFVTkVPenRCUVVWRUxFOUJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlN4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExGRkJRVkVzUlVGQlJTeEpRVUZKTEVOQlFVTXNZVUZCWVN4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF6czdRVUZGY2tjc1QwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRWRCUVVjc1NVRkJTU3hEUVVGRExGTkJRVk1zUlVGQlF6dEJRVU4wUXl4UlFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFTkJRVU03UVVGRGJFSXNVVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRWRCUVVjc1NVRkJTU3hEUVVGRExGTkJRVk1zUjBGQlNTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRExGTkJRVk1zUVVGQlF5eERRVUZETzBsQlEzaEdPenRCUVVWRUxFOUJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNVMEZCVXl4RlFVRkZMRU5CUVVNN1FVRkRNVUlzVDBGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1IwRkRhRVE3T3p0VFFVVlRMSE5DUVVGRk8wRkJRMWdzVDBGQlNTeEpRVUZKTEVkQlFVY3NiVU5CUTFZc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGRFZDeEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBGQlEyNUVMRTlCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkRPMEZCUTJwRExFOUJRVWtzUTBGQlF5eFhRVUZYTEVWQlFVVXNRMEZCUXp0QlFVTnVRaXhQUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzBGQlEyeEVMRTlCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMGRCUTNaQ096czdVMEZGVlN4eFFrRkJReXhMUVVGTExFVkJRVU03UVVGRGFrSXNVVUZCU3l4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRE8wRkJRMklzVDBGQlNTeERRVUZETEZWQlFWVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRja0lzVDBGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzBGQlEzcERMRTlCUVVjc1NVRkJTU3hEUVVGRExGVkJRVlVzU1VGQlNTeERRVUZETEVWQlFVTTdRVUZEZGtJc1VVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETzBsQlEyaENPMGRCUTBRN096dFRRVVZQTEc5Q1FVRkZPMEZCUTFRc1QwRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8wZEJRMnhET3pzN1UwRkhXU3gxUWtGQlF5eExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkRPMEZCUXpGQ0xGRkJRVXNzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0QlFVTmlMRkZCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEYUVJc1QwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVWQlFVTTdRVUZEWml4UlFVRkpMRU5CUVVNc1MwRkJTeXhKUVVGSkxFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTTdRVUZETVVJc1VVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8wRkJRMjVETEZGQlFVa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhIUVVGSExFTkJRVU1zUTBGQlF6dEpRVU51UkR0SFFVTkVPenM3VTBGSFV5eHZRa0ZCUXl4SlFVRkpMRVZCUVVNN1FVRkRaaXhQUVVGSkxGRkJRVkVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRlZCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZET3p0QlFVVTNSU3hQUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNTVUZCU1N4UlFVRlJMRVZCUVVNN1FVRkROMElzVVVGQlNTeERRVUZETEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVNN1FVRkRja0lzVVVGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4UlFVRlJMRU5CUVVNN1FVRkRja0lzVVVGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUlN4RlFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJ5eEhRVUZITEVWQlFVVXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zUzBGQlN5eEZRVUZGTEVsQlFVa3NRMEZCUlN4RFFVRkRPMEZCUTNKR0xGRkJRVWtzUTBGQlF5eFpRVUZaTEVkQlFVY3NTVUZCU1N4RFFVRkRPMGxCUTNwQ0xFMUJRVTBzU1VGQlNTeEpRVUZKTEVOQlFVTXNVVUZCVVN4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRE8wRkJRM0pETEZGQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1MwRkJTeXhEUVVGRE8wRkJRM1JDTEZGQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1VVRkJVU3hEUVVGRE8wRkJRM0pDTEZGQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSMEZCUnl4RlFVRkZMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEV0QlFVc3NSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenRKUVVOc1JqdEhRVWRFT3pzN1UwRkZVeXh6UWtGQlJUdEJRVU5ZTEU5QlFVa3NTVUZCU1N4SFFVRkhMRVZCUVVVc1EwRkJRenRCUVVOa0xFOUJRVWtzVVVGQlVTeEhRVUZITEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRiRVFzVDBGQlNTeFRRVUZUTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhQUVVGUExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTm9SQ3hQUVVGSkxFTkJRVU1zVTBGQlV5eEhRVUZITEVWQlFVVXNRMEZCUXpzN1FVRkZjRUlzVDBGQlNTeERRVUZETEVkQlFVTXNRMEZCUXp0UFFVRkZMRWxCUVVrc1EwRkJRenRCUVVOa0xGRkJRVXNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1NVRkJTU3hUUVVGVExFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVTTdPMEZCUlc1RExGRkJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRE96dEJRVVYyUWl4VFFVRkpMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVsQlFVa3NVVUZCVVN4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRE8wRkJRMnBETEZOQlFVa3NWVUZCVlN4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRelZETEZOQlFVa3NVVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPMEZCUTJ4RUxGTkJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhUUVVGVExFTkJRemRDTEVOQlFVTXNSMEZCUXl4SlFVRkpMRVZCUTA0c1EwRkJReXhIUVVGRExFbEJRVWtzUlVGRFRpeERRVUZETEVWQlEwUXNVVUZCVVN4RlFVTlNMRU5CUVVNc1JVRkRSQ3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVU5pTEVOQlFVTTdRVUZEUml4VFFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRlRUlzVTBGQlNTeERRVUZETEU5QlFVOHNSMEZCUnl4QlFVRkRMRlZCUVZVc1NVRkJTU3hEUVVGRExFZEJRVWtzU1VGQlNTeEhRVUZITEV0QlFVc3NRMEZCUXp0QlFVTm9SQ3hUUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF6dExRVU0xUWp0SlFVTkVPMGRCUTBRN096dFRRVVZSTEcxQ1FVRkRMRWxCUVVrc1JVRkJRenRCUVVOa0xGVkJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRiRUlzVDBGQlNTeEpRVUZKTEVsQlFVa3NTVUZCU1N4RlFVRkRPMEZCUTJoQ0xGRkJRVWtzUTBGQlF5eGhRVUZoTEVkQlFVY3NSVUZCUlN4RFFVRkRPMEZCUTNoQ0xGRkJRVWtzVVVGQlVTeERRVUZETzBGQlEySXNVMEZCU1N4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVU03UVVGRGJrTXNZVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOb1JDeFRRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMRWxCUVVrc1EwRkJSU3hGUVVGRExFTkJRVU1zUlVGQlJTeFJRVUZSTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNc1JVRkJSU3hSUVVGUkxFTkJRVU1zU1VGQlNTeEZRVUZETEVOQlFVVXNRMEZCUXp0TFFVTm9SVHRKUVVORU8wZEJRMFE3T3p0UlFUbExhMElzU1VGQlNUdEhRVUZUTEUxQlFVMHNRMEZCUXl4TFFVRkxPenR4UWtGQmVrSXNTVUZCU1NJc0ltWnBiR1VpT2lJdlZYTmxjbk12YkdWemMyRnVaSEp2TDBoaFkydHBibWN2U2xNdlIwRk5SUzlRU0VGVFJWSXZZbTl2YXkxMGNtRjJhWE10Wm1GaGN5OVViM2RsY2tSbFptVnVjMlV2YzNKakwzTjBZWFJsY3k5SFlXMWxMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5OXlaWEYxYVhKbElHOTBhR1Z5SUdOdmJYQnZibVZ1ZEhOY2NseHVYSEpjYm1sdGNHOXlkQ0JJZFcxaGJpQm1jbTl0SUNjdUxpOXdjbVZtWVdKekwwaDFiV0Z1TG1wekp6dGNjbHh1YVcxd2IzSjBJRk5yWld4bGRHOXVJR1p5YjIwZ0p5NHVMM0J5WldaaFluTXZVMnRsYkdWMGIyNHVhbk1uTzF4eVhHNXBiWEJ2Y25RZ1RuVnRZbVZ5UW05NElHWnliMjBnSnk0dUwzQnlaV1poWW5NdlRuVnRZbVZ5UW05NExtcHpKenRjY2x4dVhISmNibU5zWVhOeklFVnVaVzFwWlhNZ2UxeHlYRzVjZEdOdmJuTjBjblZqZEc5eUtHZGhiV1VzSUhCaGNtVnVkRWR5YjNWd0tYdGNjbHh1WEhRZ0lDQWdkR2hwY3k1bllXMWxJRDBnWjJGdFpUdGNjbHh1WEhRZ0lDQWdkR2hwY3k1ZlpXNWxiV2xsY3lBOUlIUm9hWE11WjJGdFpTNWhaR1F1WjNKdmRYQW9jR0Z5Wlc1MFIzSnZkWEFwTzF4eVhHNWNkSDFjY2x4dVhISmNibHgwWm1sdVpFNWxZWEpsYzNRb2VHTXNJSGxqS1h0Y2NseHVYSFJjZEhaaGNpQnNiM2RsYzNSRGFHbHNaQ0E5SUc1MWJHdzdYSEpjYmx4MFhIUjJZWElnYkc5M1pYTjBSR2x6ZEdGdVkyVWdQU0F4TURBd01EQXdNRHRjY2x4dVhISmNibHgwWEhSMGFHbHpMbDlsYm1WdGFXVnpMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9ZMmhwYkdRcGUxeHlYRzVjZEZ4MFhIUjJZWElnWkdsemRHRnVZMlVnUFNCUWFHRnpaWEl1VFdGMGFDNWthWE4wWVc1alpTaDRZeXdnZVdNc0lHTm9hV3hrTG5nc0lHTm9hV3hrTG5rcE8xeHlYRzVjY2x4dVhIUmNkRngwYVdZb0lXeHZkMlZ6ZEVOb2FXeGtLWHRjY2x4dVhIUmNkRngwWEhSc2IzZGxjM1JEYUdsc1pDQTlJR05vYVd4a08xeHlYRzVjZEZ4MFhIUjlJR1ZzYzJVZ2UxeHlYRzVjZEZ4MFhIUmNkR2xtSUNoa2FYTjBZVzVqWlNBOElHeHZkMlZ6ZEVScGMzUmhibU5sS1h0Y2NseHVYSFJjZEZ4MFhIUmNkR3h2ZDJWemRFTm9hV3hrSUQwZ1kyaHBiR1E3WEhKY2JseDBYSFJjZEZ4MFhIUnNiM2RsYzNSRWFYTjBZVzVqWlNBOUlHUnBjM1JoYm1ObE8xeHlYRzVjZEZ4MFhIUmNkSDFjY2x4dVhIUmNkRngwZlZ4eVhHNWNkRngwZlN3Z2RHaHBjeTVmWlc1bGJXbGxjeXdnZEhKMVpTazdJQzh2SUhkb1lYUW5jeUIwY25WbFhISmNibHgwWEhSeVpYUjFjbTRnYkc5M1pYTjBRMmhwYkdRN1hISmNibHgwZlZ4eVhHNWNjbHh1WEhSaFpHUW9iMkpxS1h0Y2NseHVYSFJjZEhSb2FYTXVYMlZ1WlcxcFpYTXVZV1JrS0c5aWFpazdYSEpjYmx4MGZWeHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCSFlXMWxJR1Y0ZEdWdVpITWdVR2hoYzJWeUxsTjBZWFJsSUh0Y2NseHVYSEpjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9LU0I3WEhKY2JpQWdJQ0F2TDI5aWFtVmpkQ0JzWlhabGJDQndjbTl3WlhKMGFXVnpYSEpjYmlBZ0lDQnpkWEJsY2lncE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ1kzSmxZWFJsS0NrZ2UxeHlYRzRnSUZ4MGRHaHBjeTV3YkdGNVpYSk1hV1psSUQwZ01UQTdYSEpjYmlBZ1hIUjBhR2x6TG1oMWJXRnVjeUE5SURBN1hISmNiaUFnWEhSMGFHbHpMbTF2Ym1WNUlEMGdOVEE3WEhKY2JpQWdYSFIwYUdsekxuTndZWGR1VkdsdFpTQTlJREl3TURBN1hISmNiaUFnSUNBZ0lIUm9hWE11YldGd1JHRjBZU0E5SUNCMGFHbHpMbWRoYldVdVkyRmphR1V1WjJWMFNsTlBUaWduYldGd1pHRjBZU2NwTzF4eVhHNWNkQ0FnZEdocGN5NW5ZVzFsTG5Cb2VYTnBZM011YzNSaGNuUlRlWE4wWlcwb1VHaGhjMlZ5TGxCb2VYTnBZM011UVZKRFFVUkZLVnh5WEc1Y2RDQWdkR2hwY3k1bllXMWxMblJwYldVdVlXUjJZVzVqWldSVWFXMXBibWNnUFNCMGNuVmxPMXh5WEc1Y2RDQWdkR2hwY3k1bllXMWxMbUZrWkM1emNISnBkR1VvTUN3Z01Dd2dYQ0puWVcxbFltZGNJaWs3WEhKY2JseDBJQ0IwYUdsekxtZGhiV1V1Y0d4MVoybHVjeTVoWkdRb2JtVjNJRkJvWVhObGNpNVFiSFZuYVc0dVNYTnZiV1YwY21saktIUm9hWE11WjJGdFpTa3BPMXh5WEc1Y2RDQWdkR2hwY3k1bllXMWxMbWx6Ynk1aGJtTm9iM0l1YzJWMFZHOG9NQzQxTENBd0xqSXBPMXh5WEc1Y2RDQWdkR2hwY3k1cGMyOUhjbTkxY0NBOUlIUm9hWE11WjJGdFpTNWhaR1F1WjNKdmRYQW9LVHRjY2x4dVhIUWdJSFJvYVhNdWFYTnZRMmhoY25NZ1BTQjBhR2x6TG1kaGJXVXVZV1JrTG1keWIzVndLQ2s3WEhKY2JseDBJQ0IwYUdsekxtRnNiR2xsY3lBOUlIUm9hWE11WjJGdFpTNWhaR1F1WjNKdmRYQW9kR2hwY3k1cGMyOURhR0Z5Y3lrN1hISmNibHgwSUNCMGFHbHpMbVZ1WlcxcFpYTWdQU0J1WlhjZ1JXNWxiV2xsY3loMGFHbHpMbWRoYldVc0lIUm9hWE11YVhOdlEyaGhjbk1wTzF4eVhHNWNkQ0FnZEdocGN5NWhjbkp2ZDNNZ1BTQjBhR2x6TG1kaGJXVXVZV1JrTG1keWIzVndLQ2s3WEhKY2JseDBJQ0IwYUdsekxtRnljbTkzY3k1bGJtRmliR1ZDYjJSNUlEMGdkSEoxWlR0Y2NseHVYSFFnSUhSb2FYTXVZWEp5YjNkekxuQm9lWE5wWTNOQ2IyUjVWSGx3WlNBOUlGQm9ZWE5sY2k1UWFIbHphV056TGtGU1EwRkVSVHRjY2x4dVhIUWdJSFJvYVhNdWFHVmhiSFJvUW05NElDQTlJRzVsZHlCT2RXMWlaWEpDYjNnb2RHaHBjeTVuWVcxbExDQW5hR1ZoYkhSb2FHOXNaR1Z5Snl3Z2RHaHBjeTV3YkdGNVpYSk1hV1psTENBeE1Dd2dNVEFwTzF4eVhHNWNkQ0FnZEdocGN5NXpZMjl5WlVKdmVDQWdQU0J1WlhjZ1RuVnRZbVZ5UW05NEtIUm9hWE11WjJGdFpTd2dKMjF2Ym1WNWFHOXNaR1Z5Snl3Z2RHaHBjeTV0YjI1bGVTd2dNVEF3TENBeE1DazdYSEpjYmx4eVhHNWNkQ0FnTHk5Y2NseHVYSFFnSUM4dklGUkZVMVJjY2x4dVhIUWdJQzh2ZG1GeUlGOW9kVzFoYmlBOUlHNWxkeUJJZFcxaGJpaDBhR2x6TG1kaGJXVXNJREl3TUN3Z01qQXdLVHRjY2x4dVhIUWdJQzh2ZEdocGN5NWhiR3hwWlhNdVlXUmtLRjlvZFcxaGJpazdYSEpjYmx4MElDQXZMM1poY2lCZmMydGxiR1YwYjI0Z1BTQnVaWGNnVTJ0bGJHVjBiMjRvZEdocGN5NW5ZVzFsTENBek1EQXNJREl3TUNrN1hISmNibHgwSUNBdkwzUm9hWE11WVd4c2FXVnpMbUZrWkNoZmMydGxiR1YwYjI0cE8xeHlYRzVjY2x4dVhIUWdJSFJvYVhNdWMzQmhkMjVVYVd4bGN5Z3BPMXh5WEc1Y2NseHVYSFFnSUhSb2FYTXVaV0Z6ZVhOMFlYSWdQU0J1WlhjZ1JXRnplVk4wWVhJdWFuTW9LVHRjY2x4dVhIUWdJSFJvYVhNdVpXRnplWE4wWVhJdWMyVjBSM0pwWkNoMGFHbHpMbTFoY0VSaGRHRXVkR2xzWlUxaGNDazdYSEpjYmx4MElDQjBhR2x6TG1WaGMzbHpkR0Z5TG5ObGRFRmpZMlZ3ZEdGaWJHVlVhV3hsY3loYk1WMHBPMXh5WEc1Y2RDQWdkR2hwY3k1aWIzVnVaRVp2ZFc1a0lEMGdkR2hwY3k1d1lYUm9SbTkxYm1RdVltbHVaQ2gwYUdsektUdGNjbHh1WEhRZ0lIUm9hWE11WldGemVYTjBZWEl1Wm1sdVpGQmhkR2dvTVN3Z01Dd2dNQ3dnTkN3Z2RHaHBjeTVpYjNWdVpFWnZkVzVrS1R0Y2NseHVYSEpjYmx4MElDQjBhR2x6TG1OMWNuTnZjbEJ2Y3lBOUlHNWxkeUJRYUdGelpYSXVVR3gxWjJsdUxrbHpiMjFsZEhKcFl5NVFiMmx1ZERNb0tUdGNjbHh1WEhRZ0lIUm9hWE11Ym1WNGRGTndZWGR1SUQwZ2RHaHBjeTVuWVcxbExuUnBiV1V1Ym05M0lDc2dkR2hwY3k1emNHRjNibFJwYldVN1hISmNiaUFnZlZ4eVhHNWNjbHh1WEhKY2JpQWdkWEJrWVhSbEtDa2dlMXh5WEc1Y2RDQWdkR2hwY3k1bllXMWxMbWx6Ynk1MWJuQnliMnBsWTNRb2RHaHBjeTVuWVcxbExtbHVjSFYwTG1GamRHbDJaVkJ2YVc1MFpYSXVjRzl6YVhScGIyNHNJSFJvYVhNdVkzVnljMjl5VUc5ektUdGNjbHh1WEhRZ0lIUm9hWE11YVhOdlIzSnZkWEF1Wm05eVJXRmphQ2gwYUdsekxtTm9aV05yVkdsc1pYTXNJSFJvYVhNc0lHWmhiSE5sS1R0Y2NseHVYSFFnSUdsbUtIUm9hWE11WjJGdFpTNXBibkIxZEM1aFkzUnBkbVZRYjJsdWRHVnlMbWx6Ukc5M2JpQW1KaUIwYUdsekxuTmxiR1ZqZEdWa1ZHbHNaU0FwSUhzZ0x5OGdhRzkzSUdOdmRXeGtJSFJvYVhNdWMyVnNaV04wWldSVWFXeGxJR0psSUc1MWJHdy9YSEpjYmx4MFhIUWdJR2xtS0NGMGFHbHpMbk5sYkdWamRHVmtWR2xzWlM1dlkyTjFjR0Z1ZENBbUppQjBhR2x6TG5ObGJHVmpkR1ZrVkdsc1pTNWlkWGxoWW14bEtYdGNjbHh1WEhSY2RGeDBJQ0JwWmloMGFHbHpMbTF2Ym1WNUlENDlJRFV3S1h0Y2NseHVYSFJjZEZ4MFhIUWdJSFpoY2lCb2RXMWhiaUE5SUc1bGR5QklkVzFoYmloY2NseHVYSFJjZEZ4MFhIUmNkQ0FnZEdocGN5NW5ZVzFsTEZ4eVhHNWNkRngwWEhSY2RGeDBJQ0IwYUdsekxuTmxiR1ZqZEdWa1ZHbHNaUzVwYzI5WUxGeHlYRzVjZEZ4MFhIUmNkRngwSUNCMGFHbHpMbk5sYkdWamRHVmtWR2xzWlM1cGMyOVpMRnh5WEc1Y2RGeDBYSFJjZEZ4MElDQjBhR2x6TG1WdVpXMXBaWE1zWEhKY2JseDBYSFJjZEZ4MFhIUWdJSFJvYVhNdVlYSnliM2R6S1R0Y2NseHVYSFJjZEZ4MFhIUWdJSFJvYVhNdVlXeHNhV1Z6TG1Ga1pDaG9kVzFoYmlrN1hISmNibHgwWEhSY2RGeDBJQ0IwYUdsekxuTmxiR1ZqZEdWa1ZHbHNaUzV2WTJOMWNHRnVkQ0E5SUdoMWJXRnVPMXh5WEc1Y2RGeDBYSFJjZENBZ2RHaHBjeTV0YjI1bGVTQXRQU0ExTUR0Y2NseHVYSFJjZEZ4MFhIUWdJSFJvYVhNdWMyTnZjbVZDYjNndWMyVjBWbUZzZFdVb2RHaHBjeTV0YjI1bGVTazdYSEpjYmx4MFhIUmNkRngwSUNCMGFHbHpMbWgxYldGdWN5QXJQU0F4TzF4eVhHNWNkRngwWEhSY2RDQWdhV1lnS0hSb2FYTXVhSFZ0WVc1eklEMDlJREUyS1h0Y2NseHVYSFJjZEZ4MFhIUmNkQ0FnZEdocGN5NW5ZVzFsTG5OMFlYUmxMbk4wWVhKMEtDZDJhV04wYjNKNUp5azdYSEpjYmx4MFhIUmNkRngwSUNCOVhISmNibHgwWEhSY2RDQWdmVnh5WEc1Y2RGeDBJQ0I5WEhKY2JseDBJQ0I5WEhKY2JseHlYRzVjZENBZ2RHaHBjeTVuWVcxbExuQm9lWE5wWTNNdVlYSmpZV1JsTG05MlpYSnNZWEFvZEdocGN5NWhjbkp2ZDNNc0lIUm9hWE11Wlc1bGJXbGxjeTVmWlc1bGJXbGxjeXdnZEdocGN5NWhjbkp2ZDBocGRFVnVaVzE1TENCdWRXeHNMQ0IwYUdsektUdGNjbHh1WEhKY2JseDBJQ0JwWmloMGFHbHpMbWRoYldVdWRHbHRaUzV1YjNjZ1BpQjBhR2x6TG01bGVIUlRjR0YzYmlsN1hISmNibHgwWEhRZ0lIUm9hWE11YzNCaGQyNUZibVZ0ZVNncE8xeHlYRzVjZEZ4MElDQjBhR2x6TG01bGVIUlRjR0YzYmlBOUlIUm9hWE11WjJGdFpTNTBhVzFsTG01dmR5QXJJSFJvYVhNdWMzQmhkMjVVYVcxbElDc2dLRTFoZEdndWNtRnVaRzl0S0NrZ0tpQjBhR2x6TG5Od1lYZHVWR2x0WlNrN1hISmNibHgwSUNCOVhISmNibHh5WEc1Y2RDQWdkR2hwY3k1bFlYTjVjM1JoY2k1allXeGpkV3hoZEdVb0tUdGNjbHh1WEhRZ0lIUm9hWE11WjJGdFpTNXBjMjh1YzJsdGNHeGxVMjl5ZENoMGFHbHpMbVZ1WlcxcFpYTXVYMlZ1WlcxcFpYTXBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdjM0JoZDI1RmJtVnRlU2dwZTF4eVhHNWNkQ0FnZG1GeUlITnJaV3dnUFNCdVpYY2dVMnRsYkdWMGIyNG9YSEpjYmx4MFhIUWdJSFJvYVhNdVoyRnRaU3hjY2x4dVhIUmNkQ0FnZEdocGN5NWpiMjUyWlhKMFpXUlFZWFJvV3pCZExuZ3NJSFJvYVhNdVkyOXVkbVZ5ZEdWa1VHRjBhRnN3WFM1NUtUdGNjbHh1WEhRZ0lITnJaV3d1YzJWMFVHRjBhQ2gwYUdsekxtTnZiblpsY25SbFpGQmhkR2dwTzF4eVhHNWNkQ0FnYzJ0bGJDNWhaSFpoYm1ObFZHbHNaU2dwTzF4eVhHNWNkQ0FnYzJ0bGJDNXdZWFJvUm1sdWFYTm9aV1F1WVdSa1QyNWpaU2gwYUdsekxtVnVaVzE1UVhSSGIyRnNMQ0IwYUdsektUdGNjbHh1WEhRZ0lIUm9hWE11Wlc1bGJXbGxjeTVoWkdRb2MydGxiQ2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0JsYm1WdGVVRjBSMjloYkNobGJtVnRlU2w3WEhKY2JseDBJQ0JsYm1WdGVTNXJhV3hzS0NrN1hISmNibHgwSUNCMGFHbHpMbkJzWVhsbGNreHBabVVnTFQwZ01UdGNjbHh1WEhRZ0lIUm9hWE11YUdWaGJIUm9RbTk0TG5ObGRGWmhiSFZsS0hSb2FYTXVjR3hoZVdWeVRHbG1aU2s3WEhKY2JseDBJQ0JwWmloMGFHbHpMbkJzWVhsbGNreHBabVVnUEQwZ01DbDdYSEpjYmx4MFhIUWdJSFJvYVhNdVoyRnRaVTkyWlhJb0tUdGNjbHh1WEhRZ0lIMWNjbHh1SUNCOVhISmNibHh5WEc0Z0lHZGhiV1ZQZG1WeUtDbDdYSEpjYmx4MElDQjBhR2x6TG1kaGJXVXVjM1JoZEdVdWMzUmhjblFvSjJkaGJXVnZkbVZ5SnlrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCY2NseHVJQ0JoY25KdmQwaHBkRVZ1WlcxNUtHRnljbTkzTENCbGJtVnRlU2w3WEhKY2JseDBJQ0JoY25KdmR5NXJhV3hzS0NrN1hISmNibHgwSUNCbGJtVnRlUzVrWVcxaFoyVW9NU2s3WEhKY2JseDBJQ0JwWmlnaFpXNWxiWGt1WVd4cGRtVXBlMXh5WEc1Y2RGeDBJQ0IwYUdsekxtMXZibVY1SUNzOUlHVnVaVzE1TG5kdmNuUm9PMXh5WEc1Y2RGeDBJQ0IwYUdsekxuTmpiM0psUW05NExuTmxkRlpoYkhWbEtIUm9hWE11Ylc5dVpYa3BPMXh5WEc1Y2RGeDBJQ0IwYUdsekxuTndZWGR1VkdsdFpTQTlJRTFoZEdndWJXRjRLREFzSUhSb2FYTXVjM0JoZDI1VWFXMWxJQzBnTVRBd0tUdGNjbHh1WEhRZ0lIMWNjbHh1SUNCOVhISmNibHh5WEc1Y2NseHVJQ0JqYUdWamExUnBiR1Z6S0hScGJHVXBlMXh5WEc1Y2RDQWdkbUZ5SUdsdVFtOTFibVJ6SUQwZ2RHbHNaUzVwYzI5Q2IzVnVaSE11WTI5dWRHRnBibk5ZV1NoMGFHbHpMbU4xY25OdmNsQnZjeTU0TENCMGFHbHpMbU4xY25OdmNsQnZjeTU1S1R0Y2NseHVYSEpjYmx4MElDQnBaaWdoZEdsc1pTNXpaV3hsWTNSbFpDQW1KaUJwYmtKdmRXNWtjeWw3WEhKY2JseDBYSFFnSUhScGJHVXVjMlZzWldOMFpXUWdQU0IwY25WbE8xeHlYRzVjZEZ4MElDQjBhV3hsTG5ScGJuUWdQU0F3ZURnMlltWmtZVHRjY2x4dVhIUmNkQ0FnZEdocGN5NW5ZVzFsTG1Ga1pDNTBkMlZsYmloMGFXeGxLUzUwYnlnZ2UybHpiMW82SURSOUlDd2dNakF3TENCUWFHRnpaWEl1UldGemFXNW5MbEYxWVdSeVlYUnBZeTVKYms5MWRDd2dkSEoxWlNBcE8xeHlYRzVjZEZ4MElDQjBhR2x6TG5ObGJHVmpkR1ZrVkdsc1pTQTlJSFJwYkdVN1hISmNibHgwSUNCOUlHVnNjMlVnYVdZZ0tIUnBiR1V1YzJWc1pXTjBaV1FnSmlZZ0lXbHVRbTkxYm1SektYdGNjbHh1WEhSY2RDQWdkR2xzWlM1elpXeGxZM1JsWkNBOUlHWmhiSE5sTzF4eVhHNWNkRngwSUNCMGFXeGxMblJwYm5RZ1BTQXdlR1ptWm1abVpqdGNjbHh1WEhSY2RDQWdkR2hwY3k1bllXMWxMbUZrWkM1MGQyVmxiaWgwYVd4bEtTNTBieWg3YVhOdldqb2dNSDBzSURJd01Dd2dVR2hoYzJWeUxrVmhjMmx1Wnk1UmRXRmtjbUYwYVdNdVNXNVBkWFFzSUhSeWRXVXBPMXh5WEc1Y2RDQWdmVnh5WEc1Y2NseHVYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQnpjR0YzYmxScGJHVnpLQ2w3WEhKY2JseDBJQ0IyWVhJZ2MybDZaU0E5SURVMU8xeHlYRzVjZENBZ2RtRnlJRzFoY0ZkcFpIUm9JRDBnZEdocGN5NXRZWEJFWVhSaExuUnBiR1ZOWVhCYk1GMHViR1Z1WjNSb0lDMGdNVHRjY2x4dVhIUWdJSFpoY2lCdFlYQklaV2xuYUhRZ1BTQjBhR2x6TG0xaGNFUmhkR0V1ZEdsc1pVMWhjQzVzWlc1bmRHZ2dMU0F4TzF4eVhHNWNkQ0FnZEdocGN5NW5ZVzFsVkdsc1pYTWdQU0JiWFR0Y2NseHVYSEpjYmx4MElDQjJZWElnYVQwd0xDQjBhV3hsTzF4eVhHNWNkQ0FnWm05eUlDaDJZWElnZVNBOUlEQTdJSGtnUEQwZ2JXRndTR1ZwWjJoME95QjVLeXNwZTF4eVhHNWNjbHh1WEhSY2RDQWdkR2hwY3k1bllXMWxWR2xzWlhOYmVWMGdQU0JiWFR0Y2NseHVYSEpjYmx4MFhIUWdJR1p2Y2loMllYSWdlQ0E5SURBN0lIZ2dQRDBnYldGd1YybGtkR2c3SUhnckt5bDdYSEpjYmx4MFhIUmNkQ0FnZG1GeUlIUnBiR1ZPZFcxaVpYSWdQU0IwYUdsekxtMWhjRVJoZEdFdWRHbHNaVTFoY0Z0NVhWdDRYVHRjY2x4dVhIUmNkRngwSUNCMllYSWdkR2xzWlU1aGJXVWdQU0IwYUdsekxtMWhjRVJoZEdFdWRHbHNaVTVoYldWelczUnBiR1ZPZFcxaVpYSmRPMXh5WEc1Y2RGeDBYSFFnSUhScGJHVWdQU0IwYUdsekxtZGhiV1V1WVdSa0xtbHpiMU53Y21sMFpTaGNjbHh1WEhSY2RGeDBYSFFnSUhncWMybDZaU3hjY2x4dVhIUmNkRngwWEhRZ0lIa3FjMmw2WlN4Y2NseHVYSFJjZEZ4MFhIUWdJREFzWEhKY2JseDBYSFJjZEZ4MElDQjBhV3hsVG1GdFpTeGNjbHh1WEhSY2RGeDBYSFFnSURBc1hISmNibHgwWEhSY2RGeDBJQ0IwYUdsekxtbHpiMGR5YjNWd1hISmNibHgwWEhSY2RDQWdLVHRjY2x4dVhIUmNkRngwSUNCMGFXeGxMbUZ1WTJodmNpNXpaWFFvTUM0MUxDQXdLVHRjY2x4dVhIUmNkRngwSUNCMGFXeGxMbUoxZVdGaWJHVWdQU0FvZEdsc1pVNTFiV0psY2lBOVBTQXdLU0EvSUhSeWRXVWdPaUJtWVd4elpUdGNjbHh1WEhSY2RGeDBJQ0IwYUdsekxtZGhiV1ZVYVd4bGMxdDVYVnQ0WFNBOUlIUnBiR1U3WEhKY2JseDBYSFFnSUgxY2NseHVYSFFnSUgxY2NseHVJQ0I5WEhKY2JseHlYRzRnSUhCaGRHaEdiM1Z1WkNod1lYUm9LWHRjY2x4dVhIUWdJR052Ym5OdmJHVXViRzluS0hCaGRHZ3BPMXh5WEc1Y2RDQWdhV1lnS0hCaGRHZ2dJVDBnYm5Wc2JDbDdYSEpjYmx4MFhIUWdJSFJvYVhNdVkyOXVkbVZ5ZEdWa1VHRjBhQ0E5SUZ0ZE8xeHlYRzVjZEZ4MElDQjJZWElnWTNWeVVHOXBiblE3WEhKY2JseDBYSFFnSUdadmNpaDJZWElnYVNBOUlEQTdJR2tnUENCd1lYUm9MbXhsYm1kMGFEc2dhU3NyS1h0Y2NseHVYSFJjZEZ4MElDQmpkWEpRYjJsdWRDQTlJSFJvYVhNdVoyRnRaVlJwYkdWelczQmhkR2hiYVYwdWVWMWJjR0YwYUZ0cFhTNTRYVHRjY2x4dVhIUmNkRngwSUNCMGFHbHpMbU52Ym5abGNuUmxaRkJoZEdndWNIVnphQ2dnZTNnNklHTjFjbEJ2YVc1MExtbHpiMWdzSUhrNklHTjFjbEJ2YVc1MExtbHpiMWw5SUNrN1hISmNibHgwWEhRZ0lIMWNjbHh1WEhRZ0lIMWNjbHh1SUNCOVhISmNibHh5WEc1Y2NseHVmVnh5WEc0aVhYMD0iLCJcbi8vcmVxdWlyZSBvdGhlciBjb21wb25lbnRzXG5cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KF94LCBfeDIsIF94MykgeyB2YXIgX2FnYWluID0gdHJ1ZTsgX2Z1bmN0aW9uOiB3aGlsZSAoX2FnYWluKSB7IHZhciBvYmplY3QgPSBfeCwgcHJvcGVydHkgPSBfeDIsIHJlY2VpdmVyID0gX3gzOyBfYWdhaW4gPSBmYWxzZTsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IF94ID0gcGFyZW50OyBfeDIgPSBwcm9wZXJ0eTsgX3gzID0gcmVjZWl2ZXI7IF9hZ2FpbiA9IHRydWU7IGRlc2MgPSBwYXJlbnQgPSB1bmRlZmluZWQ7IGNvbnRpbnVlIF9mdW5jdGlvbjsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfSB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEdhbWVPdmVyID0gKGZ1bmN0aW9uIChfUGhhc2VyJFN0YXRlKSB7XG4gIF9pbmhlcml0cyhHYW1lT3ZlciwgX1BoYXNlciRTdGF0ZSk7XG5cbiAgZnVuY3Rpb24gR2FtZU92ZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEdhbWVPdmVyKTtcblxuICAgIC8vb2JqZWN0IGxldmVsIHByb3BlcnRpZXNcbiAgICBfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihHYW1lT3Zlci5wcm90b3R5cGUpLCBcImNvbnN0cnVjdG9yXCIsIHRoaXMpLmNhbGwodGhpcyk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoR2FtZU92ZXIsIFt7XG4gICAga2V5OiBcImNyZWF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICB0aGlzLmFkZC50ZXh0KHRoaXMuZ2FtZS53aWR0aCAvIDIsIHRoaXMuZ2FtZS5oZWlnaHQgLyAyLCBcIkdBTUUgT1ZFUiAocHJlc3Mgc3BhY2UgdG8gcGxheSBhZ2FpbilcIiwgeyBmb250OiBcIjMwcHggQXJpYWxcIiwgYWxpZ246IFwiY2VudGVyXCIsIGZpbGw6IFwiI2ZmZlwiIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ1cGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgaWYgKHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5pc0Rvd24oUGhhc2VyLktleWJvYXJkLlNQQUNFQkFSKSkge1xuICAgICAgICB0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ2dhbWUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gR2FtZU92ZXI7XG59KShQaGFzZXIuU3RhdGUpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IEdhbWVPdmVyO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5c1pYTnpZVzVrY204dlNHRmphMmx1Wnk5S1V5OUhRVTFGTDFCSVFWTkZVaTlpYjI5ckxYUnlZWFpwY3kxbVlXRnpMMVJ2ZDJWeVJHVm1aVzV6WlM5emNtTXZjM1JoZEdWekwwZGhiV1ZQZG1WeUxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN096czdPenM3T3pzN08wbEJSM0ZDTEZGQlFWRTdXVUZCVWl4UlFVRlJPenRCUVVWb1FpeFhRVVpSTEZGQlFWRXNSMEZGWWpzd1FrRkdTeXhSUVVGUk96czdRVUZKZWtJc0swSkJTbWxDTEZGQlFWRXNOa05CU1dwQ08wZEJRMVE3TzJWQlRHdENMRkZCUVZFN08xZEJUM0pDTEd0Q1FVRkhPMEZCUTFJc1ZVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFZEJRVWNzUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUlVGQlJTeDFRMEZCZFVNc1JVRkJSU3hGUVVGRkxFbEJRVWtzUlVGQlJTeFpRVUZaTEVWQlFVVXNTMEZCU3l4RlFVRkZMRkZCUVZFc1JVRkJSU3hKUVVGSkxFVkJRVVVzVFVGQlRTeEZRVUZGTEVOQlFVTXNRMEZCUXp0TFFVTjZTanM3TzFkQlJVc3NhMEpCUVVjN1FVRkRVaXhWUVVGSExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFTkJRMnBETEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1VVRkJVU3hEUVVGRExFVkJRVVU3UVVGRE0wSXNXVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMDlCUXpsQ08wdEJRMFE3T3p0VFFXaENhMElzVVVGQlVUdEhRVUZUTEUxQlFVMHNRMEZCUXl4TFFVRkxPenR4UWtGQk4wSXNVVUZCVVNJc0ltWnBiR1VpT2lJdlZYTmxjbk12YkdWemMyRnVaSEp2TDBoaFkydHBibWN2U2xNdlIwRk5SUzlRU0VGVFJWSXZZbTl2YXkxMGNtRjJhWE10Wm1GaGN5OVViM2RsY2tSbFptVnVjMlV2YzNKakwzTjBZWFJsY3k5SFlXMWxUM1psY2k1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbHh1THk5eVpYRjFhWEpsSUc5MGFHVnlJR052YlhCdmJtVnVkSE5jYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdSMkZ0WlU5MlpYSWdaWGgwWlc1a2N5QlFhR0Z6WlhJdVUzUmhkR1VnZTF4dVhHNGdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVJQ0FnSUM4dmIySnFaV04wSUd4bGRtVnNJSEJ5YjNCbGNuUnBaWE5jYmlBZ0lDQnpkWEJsY2lncE8xeHVJQ0I5WEc1Y2JpQWdZM0psWVhSbEtDa2dlMXh1WEhRZ0lIUm9hWE11WVdSa0xuUmxlSFFvZEdocGN5NW5ZVzFsTG5kcFpIUm9JQzhnTWl3Z2RHaHBjeTVuWVcxbExtaGxhV2RvZENBdklESXNJRndpUjBGTlJTQlBWa1ZTSUNod2NtVnpjeUJ6Y0dGalpTQjBieUJ3YkdGNUlHRm5ZV2x1S1Z3aUxDQjdJR1p2Ym5RNklGd2lNekJ3ZUNCQmNtbGhiRndpTENCaGJHbG5iam9nWENKalpXNTBaWEpjSWl3Z1ptbHNiRG9nWENJalptWm1YQ0lnZlNrN1hHNGdJSDFjYmx4dUlDQjFjR1JoZEdVb0tTQjdYRzVjZENBZ2FXWW9kR2hwY3k1bllXMWxMbWx1Y0hWMExtdGxlV0p2WVhKa0xtbHpSRzkzYmloY2JseDBYSFFnSUZCb1lYTmxjaTVMWlhsaWIyRnlaQzVUVUVGRFJVSkJVaWtwSUh0Y2JseDBYSFFnSUhSb2FYTXVaMkZ0WlM1emRHRjBaUzV6ZEdGeWRDZ25aMkZ0WlNjcE8xeHVYSFFnSUgxY2JpQWdmVnh1WEc1Y2JuMWNiaUpkZlE9PSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG52YXIgUHJlbG9hZCA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFByZWxvYWQoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByZWxvYWQpO1xuXG4gICAgdGhpcy5hc3NldCA9IG51bGw7XG4gICAgdGhpcy5yZWFkeSA9IGZhbHNlO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFByZWxvYWQsIFt7XG4gICAga2V5OiAncHJlbG9hZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByZWxvYWQoKSB7XG4gICAgICB0aGlzLmxvYWQuaW1hZ2UoJ2xvYWRpbmdfYmcnLCAnYXNzZXRzL2ltYWdlcy9sb2FkaW5nX2JnLmpwZycpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NyZWF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcblxuICAgICAgLy9iYWNrZ3JvdW5kIGZvciBnYW1lXG4gICAgICB0aGlzLmFkZC5zcHJpdGUoMCwgMCwgXCJsb2FkaW5nX2JnXCIpO1xuXG4gICAgICB0aGlzLmFzc2V0ID0gdGhpcy5hZGQuc3ByaXRlKHRoaXMuZ2FtZS53aWR0aCAvIDIsIHRoaXMuZ2FtZS5oZWlnaHQgLyAyLCAncHJlbG9hZGVyJyk7XG4gICAgICB0aGlzLmFzc2V0LmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XG5cbiAgICAgIHRoaXMubG9hZC5vbkxvYWRDb21wbGV0ZS5hZGRPbmNlKHRoaXMub25Mb2FkQ29tcGxldGUsIHRoaXMpO1xuICAgICAgdGhpcy5sb2FkLnNldFByZWxvYWRTcHJpdGUodGhpcy5hc3NldCk7XG5cbiAgICAgIC8vZG8gYWxsIHlvdXIgbG9hZGluZyBoZXJlXG4gICAgICB0aGlzLmxvYWQucGFjaygnbGV2ZWwxJywgJ2Fzc2V0cy9hc3NldFBhY2suanNvbicsIG51bGwsIHRoaXMpO1xuXG4gICAgICAvL3N0YWFhYXJ0IGxvYWRcbiAgICAgIHRoaXMubG9hZC5zdGFydCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcblxuICAgICAgaWYgKHRoaXMucmVhZHkpIHtcbiAgICAgICAgdGhpcy5nYW1lLnN0YXRlLnN0YXJ0KCdnYW1lJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnb25Mb2FkQ29tcGxldGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbkxvYWRDb21wbGV0ZSgpIHtcbiAgICAgIHRoaXMucmVhZHkgPSB0cnVlO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQcmVsb2FkO1xufSkoKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gUHJlbG9hZDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk5VmMyVnljeTlzWlhOellXNWtjbTh2U0dGamEybHVaeTlLVXk5SFFVMUZMMUJJUVZORlVpOWliMjlyTFhSeVlYWnBjeTFtWVdGekwxUnZkMlZ5UkdWbVpXNXpaUzl6Y21NdmMzUmhkR1Z6TDFCeVpXeHZZV1F1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3p0SlFVRnhRaXhQUVVGUE8wRkJSV1lzVjBGR1VTeFBRVUZQTEVkQlJWbzdNRUpCUmtzc1QwRkJUenM3UVVGSGVFSXNVVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU03UVVGRGJFSXNVVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU03UjBGRGNFSTdPMlZCVEd0Q0xFOUJRVTg3TzFkQlQyNUNMRzFDUVVGSE8wRkJRMUlzVlVGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1dVRkJXU3hGUVVGRkxEaENRVUU0UWl4RFFVRkRMRU5CUVVNN1MwRkRMMFE3T3p0WFFVVkxMR3RDUVVGSE96czdRVUZIVUN4VlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVWQlFVTXNRMEZCUXl4RlFVRkZMRmxCUVZrc1EwRkJReXhEUVVGRE96dEJRVVZ1UXl4VlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eEhRVUZETEVOQlFVTXNSVUZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUjBGQlF5eERRVUZETEVWQlFVVXNWMEZCVnl4RFFVRkRMRU5CUVVNN1FVRkRhRVlzVlVGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXpzN1FVRkZiRU1zVlVGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eGpRVUZqTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkROVVFzVlVGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN096dEJRVWQyUXl4VlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNkVUpCUVhWQ0xFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPenM3UVVGSk9VUXNWVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF6dExRVU51UWpzN08xZEJSVXNzYTBKQlFVYzdPMEZCUlZBc1ZVRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eEZRVUZGTzBGQlEySXNXVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMDlCUXk5Q08wdEJSVVk3T3p0WFFVVmhMREJDUVVGSE8wRkJRMllzVlVGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNN1MwRkRia0k3T3p0VFFYaERhMElzVDBGQlR6czdPM0ZDUVVGUUxFOUJRVThpTENKbWFXeGxJam9pTDFWelpYSnpMMnhsYzNOaGJtUnlieTlJWVdOcmFXNW5MMHBUTDBkQlRVVXZVRWhCVTBWU0wySnZiMnN0ZEhKaGRtbHpMV1poWVhNdlZHOTNaWEpFWldabGJuTmxMM055WXk5emRHRjBaWE12VUhKbGJHOWhaQzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRkJ5Wld4dllXUWdlMXh5WEc1Y2NseHVJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNjbHh1SUNBZ0lIUm9hWE11WVhOelpYUWdQU0J1ZFd4c08xeHlYRzRnSUNBZ2RHaHBjeTV5WldGa2VTQTlJR1poYkhObE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ2NISmxiRzloWkNncElIdGNjbHh1SUNBZ0lIUm9hWE11Ykc5aFpDNXBiV0ZuWlNnbmJHOWhaR2x1WjE5aVp5Y3NJQ2RoYzNObGRITXZhVzFoWjJWekwyeHZZV1JwYm1kZlltY3VhbkJuSnlrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCamNtVmhkR1VvS1NCN1hISmNibHh5WEc0Z0lDQWdMeTlpWVdOclozSnZkVzVrSUdadmNpQm5ZVzFsWEhKY2JpQWdJQ0IwYUdsekxtRmtaQzV6Y0hKcGRHVW9NQ3d3TENCY0lteHZZV1JwYm1kZlltZGNJaWs3WEhKY2JseHlYRzRnSUNBZ2RHaHBjeTVoYzNObGRDQTlJSFJvYVhNdVlXUmtMbk53Y21sMFpTaDBhR2x6TG1kaGJXVXVkMmxrZEdndk1peDBhR2x6TG1kaGJXVXVhR1ZwWjJoMEx6SXNJQ2R3Y21Wc2IyRmtaWEluS1R0Y2NseHVJQ0FnSUhSb2FYTXVZWE56WlhRdVlXNWphRzl5TG5ObGRGUnZLREF1TlN3Z01DNDFLVHRjY2x4dVhISmNiaUFnSUNCMGFHbHpMbXh2WVdRdWIyNU1iMkZrUTI5dGNHeGxkR1V1WVdSa1QyNWpaU2gwYUdsekxtOXVURzloWkVOdmJYQnNaWFJsTENCMGFHbHpLVHRjY2x4dUlDQWdJSFJvYVhNdWJHOWhaQzV6WlhSUWNtVnNiMkZrVTNCeWFYUmxLSFJvYVhNdVlYTnpaWFFwTzF4eVhHNWNjbHh1SUNBZ0lDOHZaRzhnWVd4c0lIbHZkWElnYkc5aFpHbHVaeUJvWlhKbFhISmNiaUFnSUNCMGFHbHpMbXh2WVdRdWNHRmpheWduYkdWMlpXd3hKeXdnSjJGemMyVjBjeTloYzNObGRGQmhZMnN1YW5OdmJpY3NJRzUxYkd3c0lIUm9hWE1wTzF4eVhHNWNjbHh1WEhKY2JpQWdJQ0F2TDNOMFlXRmhZWEowSUd4dllXUmNjbHh1SUNBZ0lIUm9hWE11Ykc5aFpDNXpkR0Z5ZENncE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ2RYQmtZWFJsS0NrZ2UxeHlYRzVjY2x4dUlDQWdJR2xtS0hSb2FYTXVjbVZoWkhrcElIdGNjbHh1SUNBZ0lDQWdkR2hwY3k1bllXMWxMbk4wWVhSbExuTjBZWEowS0NkbllXMWxKeWs3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUgxY2NseHVYSEpjYmlBZ2IyNU1iMkZrUTI5dGNHeGxkR1VvS1NCN1hISmNiaUFnSUNCMGFHbHpMbkpsWVdSNUlEMGdkSEoxWlR0Y2NseHVJQ0I5WEhKY2JseHlYRzU5WEhKY2JpSmRmUT09IiwiXG4vL3JlcXVpcmUgb3RoZXIgY29tcG9uZW50c1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChfeCwgX3gyLCBfeDMpIHsgdmFyIF9hZ2FpbiA9IHRydWU7IF9mdW5jdGlvbjogd2hpbGUgKF9hZ2FpbikgeyB2YXIgb2JqZWN0ID0gX3gsIHByb3BlcnR5ID0gX3gyLCByZWNlaXZlciA9IF94MzsgX2FnYWluID0gZmFsc2U7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyBfeCA9IHBhcmVudDsgX3gyID0gcHJvcGVydHk7IF94MyA9IHJlY2VpdmVyOyBfYWdhaW4gPSB0cnVlOyBkZXNjID0gcGFyZW50ID0gdW5kZWZpbmVkOyBjb250aW51ZSBfZnVuY3Rpb247IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH0gfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBHYW1lT3ZlciA9IChmdW5jdGlvbiAoX1BoYXNlciRTdGF0ZSkge1xuICBfaW5oZXJpdHMoR2FtZU92ZXIsIF9QaGFzZXIkU3RhdGUpO1xuXG4gIGZ1bmN0aW9uIEdhbWVPdmVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBHYW1lT3Zlcik7XG5cbiAgICAvL29iamVjdCBsZXZlbCBwcm9wZXJ0aWVzXG4gICAgX2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoR2FtZU92ZXIucHJvdG90eXBlKSwgXCJjb25zdHJ1Y3RvclwiLCB0aGlzKS5jYWxsKHRoaXMpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEdhbWVPdmVyLCBbe1xuICAgIGtleTogXCJjcmVhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgdGhpcy5hZGQudGV4dCh0aGlzLmdhbWUud2lkdGggLyAyLCB0aGlzLmdhbWUuaGVpZ2h0IC8gMiwgXCJZT1UgV09OIFRIRSBHQU1FISEgKHByZXNzIHNwYWNlIHRvIHBsYXkgYWdhaW4pXCIsIHsgZm9udDogXCIzMHB4IEFyaWFsXCIsIGFsaWduOiBcImNlbnRlclwiLCBmaWxsOiBcIiNmZmZcIiB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgIGlmICh0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuaXNEb3duKFBoYXNlci5LZXlib2FyZC5TUEFDRUJBUikpIHtcbiAgICAgICAgdGhpcy5nYW1lLnN0YXRlLnN0YXJ0KCdnYW1lJyk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEdhbWVPdmVyO1xufSkoUGhhc2VyLlN0YXRlKTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBHYW1lT3Zlcjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXNaWE56WVc1a2NtOHZTR0ZqYTJsdVp5OUtVeTlIUVUxRkwxQklRVk5GVWk5aWIyOXJMWFJ5WVhacGN5MW1ZV0Z6TDFSdmQyVnlSR1ZtWlc1elpTOXpjbU12YzNSaGRHVnpMMVpwWTNSdmNua3Vhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenM3T3pzN096czdTVUZIY1VJc1VVRkJVVHRaUVVGU0xGRkJRVkU3TzBGQlJXaENMRmRCUmxFc1VVRkJVU3hIUVVWaU96QkNRVVpMTEZGQlFWRTdPenRCUVVsNlFpd3JRa0ZLYVVJc1VVRkJVU3cyUTBGSmFrSTdSMEZEVkRzN1pVRk1hMElzVVVGQlVUczdWMEZQY2tJc2EwSkJRVWM3UVVGRFVpeFZRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4RlFVRkZMR2RFUVVGblJDeEZRVUZGTEVWQlFVVXNTVUZCU1N4RlFVRkZMRmxCUVZrc1JVRkJSU3hMUVVGTExFVkJRVVVzVVVGQlVTeEZRVUZGTEVsQlFVa3NSVUZCUlN4TlFVRk5MRVZCUVVVc1EwRkJReXhEUVVGRE8wdEJRMnhMT3pzN1YwRkZTeXhyUWtGQlJ6dEJRVU5TTEZWQlFVY3NTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEUxQlFVMHNRMEZEYWtNc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eFJRVUZSTEVOQlFVTXNSVUZCUlR0QlFVTXpRaXhaUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03VDBGRE9VSTdTMEZEUkRzN08xTkJhRUpyUWl4UlFVRlJPMGRCUVZNc1RVRkJUU3hEUVVGRExFdEJRVXM3TzNGQ1FVRTNRaXhSUVVGUklpd2labWxzWlNJNklpOVZjMlZ5Y3k5c1pYTnpZVzVrY204dlNHRmphMmx1Wnk5S1V5OUhRVTFGTDFCSVFWTkZVaTlpYjI5ckxYUnlZWFpwY3kxbVlXRnpMMVJ2ZDJWeVJHVm1aVzV6WlM5emNtTXZjM1JoZEdWekwxWnBZM1J2Y25rdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpjYmk4dmNtVnhkV2x5WlNCdmRHaGxjaUJqYjIxd2IyNWxiblJ6WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRWRoYldWUGRtVnlJR1Y0ZEdWdVpITWdVR2hoYzJWeUxsTjBZWFJsSUh0Y2JseHVJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNiaUFnSUNBdkwyOWlhbVZqZENCc1pYWmxiQ0J3Y205d1pYSjBhV1Z6WEc0Z0lDQWdjM1Z3WlhJb0tUdGNiaUFnZlZ4dVhHNGdJR055WldGMFpTZ3BJSHRjYmx4MElDQjBhR2x6TG1Ga1pDNTBaWGgwS0hSb2FYTXVaMkZ0WlM1M2FXUjBhQ0F2SURJc0lIUm9hWE11WjJGdFpTNW9aV2xuYUhRZ0x5QXlMQ0JjSWxsUFZTQlhUMDRnVkVoRklFZEJUVVVoSVNBb2NISmxjM01nYzNCaFkyVWdkRzhnY0d4aGVTQmhaMkZwYmlsY0lpd2dleUJtYjI1ME9pQmNJak13Y0hnZ1FYSnBZV3hjSWl3Z1lXeHBaMjQ2SUZ3aVkyVnVkR1Z5WENJc0lHWnBiR3c2SUZ3aUkyWm1abHdpSUgwcE8xeHVJQ0I5WEc1Y2JpQWdkWEJrWVhSbEtDa2dlMXh1WEhRZ0lHbG1LSFJvYVhNdVoyRnRaUzVwYm5CMWRDNXJaWGxpYjJGeVpDNXBjMFJ2ZDI0b1hHNWNkRngwSUNCUWFHRnpaWEl1UzJWNVltOWhjbVF1VTFCQlEwVkNRVklwS1NCN1hHNWNkRngwSUNCMGFHbHpMbWRoYldVdWMzUmhkR1V1YzNSaGNuUW9KMmRoYldVbktUdGNibHgwSUNCOVhHNGdJSDFjYmx4dVhHNTlYRzRpWFgwPSJdfQ==
